<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Thoughts | @Lenciel]]></title>
  <link href="http://lenciel.cn/blog/categories/thoughts/atom.xml" rel="self"/>
  <link href="http://lenciel.cn/"/>
  <updated>2016-03-15T23:51:20+08:00</updated>
  <id>http://lenciel.cn/</id>
  <author>
    <name><![CDATA[Lenciel Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Django其实不是MVC]]></title>
    <link href="http://lenciel.cn/2015/03/django-is-not-that-much-mvc/"/>
    <updated>2015-03-30T11:36:24+08:00</updated>
    <id>http://lenciel.cn/2015/03/django-is-not-that-much-mvc</id>
    <content type="html"><![CDATA[<p><img src="/downloads/images/2015_03/mvc.jpg" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>很多时候<a href="https://www.djangoproject.com/">Django</a>都被称为是一个MVC框架 — <code>Model-View-Controller</code>。这样说的人要么就是已经熟悉过其他的MVC框架，所以看到Django有自己的Template系统和<code>views.py</code>来放各种逻辑代码，就想当然的认为Django也是；要么就是其实没有真正实践过Django，从各种其他的错误文档里面看到或者是听说的。</p>

<p>MVC框架，是针对<code>状态</code>的。为了明白这个，我们假设你是在编辑一个图片：</p>

<ul>
<li>你得在内存里面保存这张图片 (Model)</li>
<li>你得在屏幕上显示这张图片 (View)</li>
<li>你得有办法让用户改变图片 (Controller)</li>
<li>当用户改变图片后，你得更新显示：<code>Controller</code>通知<code>Model</code>更新状态，然后<code>Model</code>通知<code>View</code>刷新显示（最好是通过某种pub/sub机制，让View和Model之间是没有耦合的)</li>
</ul>


<p>MVC框架主要是管理状态，让MVC三者是同步的：这三部分同时在内存（可能跑在不同的线程甚至进程）里，有各自的状态，相互之间进行交互，让变动同步到各方。</p>

<p>Django的<code>Model-View-Template</code>有很大的不同。</p>

<p>首先是没有状态。大多数的HTTP GET请求，拿到的数据库里面的数据，都被当成是immutable的不可重入的输入，而没有状态。而在一般的Web应用开发中，HTTP上有状态的交互可以通过：</p>

<ol>
<li>修改保存在服务器端数据库里的数据</li>
<li>修改保存在客户端的数据（比如cookies）</li>
</ol>


<p>共同来完成。因此一次状态的变化并不是在一个page的view里面保持的：状态一半放在当前的page和cookies里面，一半放在session数据库里面。</p>

<p>但是处理HTTP请求的时候，Django的MVT是完全无状态的。这里首先要说明的是，<code>views.py</code>这个名字本身是有一点儿误导的，因为给人的感觉是它只做&#8221;读&#8221;操作而不去&#8221;写&#8221;数据库（也就是说只是处理GET请求而不是POST请求）。但实际上<code>GET/POST</code>请求都会被放在<code>views.py</code>里面处理，所以更好的名字其实应该是<code>handler.py</code>：大多数Django的REST框架都是这样命名的。</p>

<p>处理GET请求的时候，如前面分析，本身就没有状态，而只是对输入的请求和服务器返回的数据进行展示。其次，当涉及数据修改的POST请求时，Django的处理其实是非常类似于老式的Web应用的。</p>

<p>所谓的老式的Web应用是指，过去的网站上当后台的数据发生变化的时候，其实是需要用户在前端自己点击刷新按钮来刷新的（最典型的刷新按钮就是浏览器里面那个刷新按钮）。这个动作背后发生的事情其实是：</p>

<ol>
<li>除开标识当前是哪个用户在浏览哪部分数据的信息（当前的url，用户的identity等等cookies里面的数据），把浏览器里面其他的状态都丢弃</li>
<li>发起一个全新的请求，获取所有的数据，再次重建页面</li>
</ol>


<p>说Django和老派的Web应用类似，是指一旦数据变更（比如一次SQL的INSERT或者是UPDATE），你需要返回一个redirect再做一次GET：&#8221;有数据的状态变化了，让我们重头再来一次&#8221;。</p>

<p>这也是为什么<a href="https://code.djangoproject.com/ticket/17">Django的ORM里面是没有一个&#8221;identity mapper&#8221;的</a>。<code>Model</code>处理状态变化的办法就是完全的无视它：当你觉得数据改变了时，直接重新获取一次数据重建页面。</p>

<p>这和大多数经典的MVC框架（比如AngularJS）是和这完全相反的套路：在设计上做了很多事情来避免&#8221;从头再来&#8221;，而是通过建立MVC之间的消息机制，来通知各方的状态变化，做到同步。</p>

<p>MVC还有一部分是关于如何分隔代码。如果你把MVC当成：&#8221;把存储数据，显示数据和处理数据的代码分离&#8221;，那Django的设计的确是符合这个模式的。</p>

<p>但是实际上这是一个粒度非常粗的描述，因此就把Django说成是MVC的其实会带来很多误会。</p>

<p>比如，Django是基于HTTP的，所以理解它的MVT，最好的办法就是实践它：看它的<code>view</code>里面是如何处理一个HTTP的请求并返回一个HTTP的response。如果你脑子里面有其他的不是基于HTTP这层次的MVC框架，用来类比学习Django，你大概会哭&hellip;</p>

<p>其次，Django的框架，它的app里面文件的组织和使用，和很多别的MVC框架也是不同的。</p>

<p>最近有个特别火的日志是Hynek Schlawack的<a href="https://hynek.me/articles/know-your-models/">Know Your Models</a>。它是基于经典的MVC框架来假设，实际上Django并不是适用于这套假设的。</p>

<p>比如他觉得应该有<code>pure</code>的models，从而把M、V、C分离开做到可以独立进行处理。</p>

<p>但其实Django里面很多app都仅仅是数据库的简单wrapper。这种情况下其实没必要有<code>pure</code>的M，然后再加上一堆V和C。其实这是Django的美好之处：以<code>admin</code>这个app为例，它的设计初衷就是要在数据库上面封装一个足够简单的编辑层，以致于95%的代码都是可以自动生成的。</p>

<p>把<code>Model</code>通过API暴露出来给<code>View</code>用，当然也是正确的思路。但我自己写代码的时候，就很喜欢把所有的直接调用<code>.filter()</code>的代码都放到<code>models.py</code>里面，这样一来<code>models.py</code>就是独立可测的。</p>

<p>并且，如果你写了一个<code>pure</code>的Model，而把逻辑代码从Model里面抽取出来放到别的地方去，那你在<code>admin</code>和其他<code>ModelForms</code>里面就没法重用了。</p>

<p>总的来说，在Django里面，model在创建的时候，就是有业务逻辑贯穿在里面的。如果你每个<code>customer</code>只能有一个<code>email</code>，那么你的model就得包含这个限制。如果你要改变这个规则，那么就不仅仅是MVT的某一方要改，而是从上到下都得修改。</p>

<p>甚至我个人认为MVC里面说的&#8221;逻辑和数据分离&#8221;这种思路本来就挺奇怪的。除非你把数据存储当成<code>key-value</code>这样的东西，那么你怎么可能在一个不是为了某个业务逻辑设计的数据库上开发出一个应用呢？</p>

<p>数据就是数据，是<code>gloabl data</code>而不是<code>gloabal state</code>。在整个HTTP请求被处理的过程中，它被认为是没有变化的：如果有，就应该再发一条请求来取最新的数据再去重画。</p>

<p>当我们开发Django的应用时，为了满足实际上的业务逻辑的需要，数据库的schema一般一直在变。这样Django的model就可以作为API的一个良好的基石，把往上走的事情做得尽量简单。</p>

<p>这涉及到软件开发里最基本的一个设计要点：你把数据库仅仅当成应用里面的持久化层，还是当成应用的一部分，甚至是最重要的一部分。</p>

<p>我其实一直偏向于后者：喂，把像Postgres这样RDMS当成一个持久层未免也太不尊重了吧！所以在使用Django设计app的时候，不但要思考&#8221;model layer&#8221;，还要综合考虑其他数据库可以做的事情：比如contraint checking, transactions, triggers等等。同样，在测试的时候也不仅仅是测试那些字段和model之间的关系，而是要考虑对业务逻辑的测试。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[应用开发能火多久?]]></title>
    <link href="http://lenciel.cn/2014/04/why-made-apps/"/>
    <updated>2014-04-09T15:07:57+08:00</updated>
    <id>http://lenciel.cn/2014/04/why-made-apps</id>
    <content type="html"><![CDATA[<p>不管是从日常生活里面的观察和感受，还是查看统计数据，都很容易发现人们在移动设备上停留的时间已经逐渐超过了在PC上停留的时间。当然拐点是不是如下图所示就在今年业界有些争议，但是拐点已经要来了是没有人再怀疑了。</p>

<p><img src="/downloads/images/2014_04/comscore_mobile_users_desktop_users_2014.jpg" title="Don't touch me..." alt="mobile vs desktop" /></p>

<p>而移动设备取代PC机成为最主要的入口之后，就意味着谁占领了移动设备，谁就拥有未来。同样不管是从切身体会还是数据都不难知道，和PC上各种网站（包括各种浏览器+插件提供的服务）占据统治地位不同，在移动平台上，应用程序获得了全面的胜利。</p>

<p><img src="/downloads/images/2014_04/apps_dominate_hires.png" title="Don't touch me..." alt="mobile apps vs website" /></p>

<p>移动客户端上网站和App相比所处的劣势会越来越严重。无论是我们自己公司还是行业内其他人，都知道做移动互联网就是要做应用才行。所以你看手机网页上和游戏里，各种弹窗、各种广告、各种骚扰短信，都是指向某个应用的下载链接。</p>

<p>这也是为什么那么多财大气粗的实体官方的网站在移动客户端上看起来就跟狗屎一样：他们的老板们的逻辑和开发者一样，那些网站没什么人在手机上看，只要我的应用、我的微信公众号看起来好就行了。</p>

<p>这么一来，最好的开发和设计人员都去做应用了，大量的钱也都烧在应用推广上去了。</p>

<p>最终我们手机上的浏览器几乎被闲置了，打开它主要是为了：</p>

<ul>
<li>搜索</li>
<li>下载一个应用</li>
<li>从一些sns程序里面点开某个链接</li>
</ul>


<p>而且，就第三项用处来看，越来越多的sns程序，比如微信，微博等，都是直接在自己内嵌的webview里面打开链接，根本不会使用系统安装的浏览器。</p>

<p>从长远看这种应用一骑绝尘网站无人问津的状况还是对整个生态有很大的风险：</p>

<ul>
<li>看看有线电视发展到后面是什么样：大寡头们有更好的设备，更强大的制作班底，更多的明星，控制了整个行业。这种状况下，用户打开电视能看到什么样的节目几乎没得选，小团队要靠创新来出头也变得非常困难</li>
<li>应用主要在少数几个主流应用商店发行，比如Google和Apple的。意味着Google和Apple不仅仅要抽水，还要对应用内容，应用怎么推广，甚至应用用什么语言开发进行控制。</li>
</ul>


<p>比如Apple。在PhoneGap最开始出来的时候，所有用这个hybrid framework开发的应用都被Apple强制封杀，理由居然是“不使用native library开发的应用不像一个应用”。再比如最近，它直接发了一个policy就让所有跟BT币有关的应用下架了。</p>

<p>感觉在移动平台上会上演类似PC上的历史，首先会有Apple和Google这样提供OS的企业通过应用这个渠道来做成大山头。然后生态系统对其他参与者越来越艰辛，于是会有很多企业尝试破冰，比如通过开发功能强大的浏览器形成新的渠道，来脱离寡头们的控制。最终，移动平台上的浏览器肯定也会像现在PC上的浏览器一样强大，成为各种服务的入口。</p>

<p>而且，这个过程肯定会比PC上要快很多。首先，大家都已经被教育过一次了，大腾讯大百度们做自己的浏览器不是做着玩的；更重要的是，Web发展到今天这个地步，开放性已经有些脱离技术，变成了社会生活中的一种意识形态。一旦移动网络资费和速度真正给力，肯定会有揭竿而起的。即使大如Google和Apple，也很难再像当年MS那样hold住全场了。那个时候，很多Myriad这样的做中间件的公司，又会春风得意了吧。</p>

<p>当然，最近这些年肯定还是应用开发热火的时候，小伙伴们，过时不候，放手干吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Done List Instead of to Do List]]></title>
    <link href="http://lenciel.cn/2013/03/use-done-list-rather-than-todo-list/"/>
    <updated>2013-03-15T21:25:00+08:00</updated>
    <id>http://lenciel.cn/2013/03/use-done-list-rather-than-todo-list</id>
    <content type="html"><![CDATA[<p><img src="/downloads/images/nerd_sniping.png" title="Don't touch me..." alt="nerd sniping" /></p>

<a name="L.strong......strong."></a>
<h2><strong>起</strong></h2>

<p><a href="http://xkcd.com/730/" target="_blank">xkcd</a>一直是本座最喜欢的网站（嗯哼）。上面这幅图说了一个很有趣的现象，正好最近深有体会，就来这边吐槽一下。整个经过是：</p>

<p>大前天回到家感觉不算太忙，本座就开始家姐布置的家庭作业：做一个用于心理学测试的游戏。需求简单来说就是：</p>

<ul>
<li>游戏开始后轮转播放图片、视频或者音频 （媒体库要容易换，播放的切换间隙也要能配置）</li>
<li>被试通过操控手中的手柄表达心理的反应，由程序转成可统计的数据（比如看到美女图按同时按下AB）</li>
<li>程序得到的数据能够很容易的被统计，统计结果能够很优雅的呈现出来</li>
</ul>


<p>为了让这个事情变得更有趣，本座在需求确定之后决定：</p>

<ol>
<li>用帅气的<a href="http://www.nintendo.co.uk/NOE/en_GB/systems/accessories_1243.html" target="_blank" class="broken_link">Wii Remote</a>来让被试表达自己（想想美女图片一出就甩或者是撸一下WiiRemote有多实在）</li>
<li>用<a href="http://www.pygame.org/news.html" target="_blank">pyGame</a>来写这个游戏（早就想学习pyGame了）</li>
<li>把统计数据的输出作为一个用<a href="http://www.r-project.org/" target="_blank">R语言</a>实现的统计绘图的界面的输入</li>
</ol>


<p>接着就开始第一项。当程序把 <code>Wii Remote</code> 的蓝牙信号正确的转换成标准的手柄信号的时候，一看已经挺晚了，本座就只好把后面两个放在了 <code>todo list</code> 上。接着这两天都很忙这些东西就继续的呆在 <code>todo list</code> 。</p>

<p>然后今天又找到时间，本座就开始用 <code>pyGame</code> 写游戏本身部分，但突然觉得vim下面自动补全很烂，就开始google合适的插件。花了10分钟左右发觉不少人说 <code>pydict</code> 好，本座就又花了15分钟左右去配置。然后看着chrome里面为了搜索插件弹出的一堆tab突然本座发现：</p>

<p>经过了4天，本座把Wii Remote用蓝牙连到PC输出手柄信号，本座有了一个不错的vim下开发python的环境，本座还学习了一点儿R。唯一没有开始的就是，嗯，还没有开始写那个游戏。</p>

<a name="L.strong......strong."></a>
<h2><strong>承</strong></h2>

<p>你的情况可能具体细节和我不一样，但是结果估计都是南辕北辙：你是网页设计师，在需要画 <code>wireframe</code> 的时候花了一大把时间去看搜索出来的新鲜的、华丽的 <code>CSS3</code> 效果；你上淘宝买手机结果研究移动电源用了4个小时；你想学怎么养花结果因为选盆子下面水漏的形状耽误了。</p>

<p>这种情况之所以对你的效率有很大的伤害是因为：</p>

<ol>
<li>你认为你是在完成自己 <code>todo list</code> 上的东西，所以你觉得自己是在“进展中”而不是“瞎逛”。</li>
<li>你认为的进展给你带来了更多 <code>todo list</code> 上的东西，而且有些确实对原来的目标是无益的。</li>
</ol>


<p>人的精力是有限的，如果你长期处于这种状况（太正常了，如果你是玩电脑的话），可就要小心了。</p>

<a name="L.strong......strong."></a>
<h2><strong>转</strong></h2>

<p>其实这种发散的工作方式并不是完全错误的。其实在我们这个行业，这种“总想追求更好”的想法，是整个Agile的基础。Facebook在自己的员工的邮件<a href="http://blogs.wsj.com/deals/2012/02/01/mark-zuckerbergs-letter-from-the-facebook-filing/" target="_blank">里面</a>写到：</p>

<blockquote><p>The Hacker Way is an approach to building that involves continuous improvement and iteration. Hackers believe that something can always be better, and that nothing is ever complete. They just have to go fix it — often in the face of people who say it’s impossible or are content with the status quo.</p></blockquote>

<p>从本座自己的感觉而言，做事循规蹈矩的同事，完成一般难度的任务时，效率确实很高。但是那种真正非常困难的问题，常常是被喜欢“瞎逛”的人解决的。这当然也没什么奇怪的，所谓闭门造的车，出门就只能合辙。Richard Hamming也<a href="http://www.cs.virginia.edu/~robins/YouAndYourResearch.html" target="_blank">说</a>：</p>

<blockquote><p>I notice that if you have the door to your office closed, you get more work done today and tomorrow, and you are more productive than most. But 10 years later somehow you don&#8217;t know quite about what problems are worth working on … He who works with the door open gets all kinds of interruptions, but he also occasionally gets clues as to what the world is and what might be important. ….</p></blockquote>

<a name="L.strong......strong."></a>
<h2><strong>合</strong></h2>

<p>不能闭门造车，又需要有固定的输出值，怎么办？今天本座是这么办的：</p>

<ol>
<li>早上起来把今天最重要的事情从<a href="https://astrid.com/home" target="_blank">todo list</a>里面选出来。</li>
<li>完成这些事情的过程中遇到任何有趣的东西或者想法，存到<a href="http://delicious.com/" target="_blank">delicious</a>或者<a href="http://www.evernote.com/" target="_blank">evernote</a>里面。</li>
<li>使用<a href="https://idonethis.com" target="_blank">Done list</a>而不是todo list来标记自己今天的活动。</li>
</ol>


<p>结果是今天3点钟就完成了所有重要的事情，能够来安心的写一篇blog，看起来是个不错的办法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[洛带，洛带]]></title>
    <link href="http://lenciel.cn/2010/05/luo-dai-tour/"/>
    <updated>2010-05-24T12:23:00+08:00</updated>
    <id>http://lenciel.cn/2010/05/luo-dai-tour</id>
    <content type="html"><![CDATA[<p><img src="/downloads/images/beautiful_loser.png" title="Don't touch me..." alt="" /></p>

<p>周末开车去了趟洛带古镇。倒不是专为了枇杷，更多是解闷。和偶像派坐在一条有大树遮盖的巷子，就着一口有水藻覆盖的池塘，点两杯冰糖过量的柠檬水，大眼瞪小眼的回忆童年、青春、挨揍、被追。太阳下去，微风上来，买两斤鲜枇杷，剥出天下、百姓、出世、入球。灯光亮起来的时候，吃伤心凉粉，砍公社烧鹅，再探讨为什么我们一个美又白，一个丑又黑，但千百人中，我们好了。</p>

<p>夜幕洒下来的时候，街面上的工商、公安、城管、街道、环卫和小贩、地痞、流氓、小偷并肩走了，银器、木器、兵器和珠光宝气收了，会馆、饭馆、照相馆和殡仪馆歇了。我以为属于古镇最好的时候要来了。这里没记事本没打印机、没CFR没DPD，到处是眼神迟缓而放空的老年人，像文学女青年一般忧郁得让人动心。</p>

<p>可惜这个时候古镇的年轻人就出现了，在白天只能步行的石板路上，飙着他们的电动车。他们大概是不愿加入引车卖浆者流的，因为他们可是非主流。所以白天不露面，晚上才出来展示他们的机车、音乐和纹身。那些纹身，就好像古镇墙壁上的那些壁画一般，既有些年久失修的粗糙，却又带着些五彩缤纷的固执。</p>

<p>没了，好不容易找到的看一个时辰风月，写两个时辰雅俗，颂三个时辰歌赋的那份缓慢劲儿又不见了。什么时候医生已经不去挨个辨认百草，武士也不再琢磨打通任督二脉了，于是，真正的医生和武士也都随风飘散。什么时候地球平了，东土不再意淫西域，西域也不再崇拜东土了，于是，再没有人会在陌生的地方去修馆，去建镇，收拾心情，思考人生。</p>

<p>我们现在的一切都太赶，其实就是因为太丰盛。《诗经》、《道德经》、《四十二章经》收起来了，《股经》、《彩经》、《致富经》流行了。“言语巧偷鹦鹉舌，文章分得凤凰毛”的苏小小薛涛柳如们才能当名妓的时候过了，洗干净自己的泥腿子就能去给客人洗身子的日子来了。没鸡鸡的司马迁唱古人不见我的时候过了，有鸡鸡的小男人唱着歌选超级女生的日子来了。</p>

<p>九球落袋，打完收工……Let&rsquo;s go home.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自己]]></title>
    <link href="http://lenciel.cn/2008/06/himself/"/>
    <updated>2008-06-01T23:10:00+08:00</updated>
    <id>http://lenciel.cn/2008/06/himself</id>
    <content type="html"><![CDATA[<p><img src="/downloads/images/love_affair.png" title="Don't touch me..." alt="Our love" /></p>

<p>他想，让一切都慢下来。<br/>
太阳把阳光，忘在屋子里。<br/>
那把切过西瓜的菜刀，<br/>
斜靠在墙上，像丢失已久的月光宝盒，<br/>
精神奕奕。<br/>
那些被灰尘压得翻不开的书页，<br/>
里面写的，是他自己。</p>

<p>她说，我要走了。<br/>
那好，我送你。<br/>
他爱她的娇横，一如美丽，<br/>
便也服从起，德高望重的距离。<br/>
汽车静止的开来，<br/>
在疯狂奔跑的，是他自己。</p>

<p>在没有她的房间，<br/>
找她的痕迹。<br/>
床单的皱褶里，<br/>
和西瓜皮上新鲜的齿印。<br/>
电视上那些地震的灾民，<br/>
在安详地活着，<br/>
而开始落泪的，却是他自己。</p>
]]></content>
  </entry>
  
</feed>
