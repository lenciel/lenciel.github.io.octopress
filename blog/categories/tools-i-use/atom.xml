<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tools-i-use | @Lenciel]]></title>
  <link href="http://lenciel.cn/blog/categories/tools-i-use/atom.xml" rel="self"/>
  <link href="http://lenciel.cn/"/>
  <updated>2015-01-03T16:37:05+08:00</updated>
  <id>http://lenciel.cn/</id>
  <author>
    <name><![CDATA[Lenciel Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Making Fixture With Factory Boy and Faker]]></title>
    <link href="http://lenciel.cn/2014/12/making-fixture-with-factory-boy-and-faker/"/>
    <updated>2014-12-20T03:14:59+08:00</updated>
    <id>http://lenciel.cn/2014/12/making-fixture-with-factory-boy-and-faker</id>
    <content type="html"><![CDATA[<p>我们在Django项目的开发和测试过程中经常需要mock一些数据作为<a href="https://docs.djangoproject.com/en/1.7/howto/initial-data/">fixture</a>，比较常见的做法是：</p>

<ol>
<li>进行一些操作创建测试数据</li>
<li>使用<code>dumpdata</code>命令导出json格式的数据</li>
<li>以导出的json为模板构造测试数据用<code>loaddata</code>命令导入到数据库</li>
</ol>


<p>这样对于大多数场景也算够用了，但是你总会遇到某一天客户走来说：“我想看看那个报表生成出来啥样，能不能创建两千条记录？”</p>

<p>这种时候你大概你第一反应是把之前那个json搞来copy-paste出两千份数据。但很快你就会意识到那是不行的：要构建一个对象，你常常需要先构建它外键的对象，而实际上线的项目它的数据库结构是非常复杂的（数据库结构图的生成见<a href="http://lenciel.cn/2014/12/integrate-schemaspy-with-sphinx-build-for-django-database-design-visualization/">这里</a>），所以构建两千条记录的工作量会远远超过你的想象：</p>

<p><img src="/downloads/images/2014_12/database_design_visualization.png" title="schemaSpy..." alt="schemaSpy" /></p>

<p>最近本座试用了<a href="https://github.com/rbarrois/factory_boy/">factory boy</a>和<a href="https://github.com/joke2k/faker">faker</a>的组合，感觉还比较好用。</p>

<a name="Factory.Boy"></a>
<h2>Factory Boy</h2>

<p>最开始找这类批量生成测试数据的库，主要考察的是<a href="https://github.com/vandersonmota/model_mommy">Model Mommy</a>和<a href="https://github.com/rbarrois/factory_boy/">Factory Boy</a>。看了一下文档感觉两者的差别并不算很大，但是<a href="http://movie.douban.com/subject/1898357/">Factory Girl</a>里面的<a href="http://movie.douban.com/celebrity/1003485/">Sienna Miller</a>实在是让人过目不忘所以有什么好犹豫的呢？</p>

<p>Factories的文档上说明了基本的用法，需要注意的主要是如何生成有一定依赖关系的一组测试对象。</p>

<a name="L............"></a>
<h3>数据构造</h3>

<p>Factory Boy下的数据构造主要是通过<code>Sequence</code>和<code>Fuzz</code>两个包来完成。</p>

<p><code>Sequence</code>故名思议是顺序生成的，比如你要让生成的数据有规律的用户名和电话号码，这样你看到电话<code>13000000001</code>就是是对应<code>user0001</code>：</p>

<pre><code class="python">
user = Sequence(lambda n: u'user%04d' % n)
phone = Sequence(lambda n: u'1300000%04d' % n)
</code></pre>

<p>而<code>Fuzz</code>则是随机的，主要用来构造像学校、专业或者生日这样的数据：</p>

<pre><code class="python">
card_bank = FuzzyChoice([u'中国银行', u'中国招商银行', u'中国工商银行',
                      u'中国建设银行', u'成都银行'])
major = FuzzyChoice([u'地球物理学', u'大气科学', u'海洋科学', u'力学',
                  u'农业工程', u'环境科学', u'心理学', u'统计学',
                  u'系统科学', u'地矿', u'机械', u'仪器仪表',
                  u'能源动力', u'电气信息', u'土建', u'测绘',
                  u'环境与安全', u'化工与制药', u'交通运输', u'海洋工程;',
                  u'航空航天', u'武器', u'工程力学', u'生物工程',
                  u'公安技术', u'材料科学', u'材料', u'水利',
                  u'林业工程', u'轻工纺织食品', u'电子信息科学', u'其他'])
birthday = FuzzyNaiveDateTime(dt.datetime(1992, 1, 1), dt.datetime(1996, 1, 1))
</code></pre>

<p>当然，有的字段，比如姓名、地址这类通过顺序或者是随机的从某个设定的集合抽取效果都不够理想，后面会看到怎么用<a href="https://github.com/joke2k/faker">faker</a>来构造它们。</p>

<a name="L.................."></a>
<h3>关联对象生成</h3>

<p>关联对象的关系有很多种(1:1, 1:n, n:1, n:n)，主要都是通过组合运用<code>SubFactory</code>和<code>RelatedFactory</code>两者来生成，但具体的构造方式和先构造谁都要以实际情况而定。比如我们有User和Tester这样的1:1的关系：</p>

<pre><code class="python">
class Tester(TimeBaseModel):

    user = models.OneToOneField(User,
                                verbose_name=u'账号',
                                related_name='tester')
    ...
</code></pre>

<p>这里在考虑是在<code>TesterFactory</code>里面把<code>User</code>作为<code>SubFactory</code>来生成，还是在<code>UserFactory</code>里面把<code>Tester</code>作为<code>RelatedFactory</code>来生成，主要就是看先后关系。很显然，在这里我们应该先构造系统里的User：</p>

<pre><code class="python">
class TestUserFactory(UserFactory):
    ...
    tester = RelatedFactory('apps.tester.factories.TesterFactory', 'user')
</code></pre>

<p>这段代码告诉系统，在每个<code>TestUser</code>被构造的时候，用构造出来的<code>user</code>来创建一个1:1的<code>Tester</code>。这个<code>Tester</code>的构造会在<code>user</code>的<code>save</code>之前完成。</p>

<p>然后在<code>Tester</code>的构造过程中你可以直接通过<code>SelfAttribute</code>使用传入的<code>user</code>:</p>

<pre><code class="python">
class TesterFactory(DjangoModelFactory):
    ...
    phone = SelfAttribute('user.phone')
    nick_name = SelfAttribute('user.nick_name')
    creator = SelfAttribute('user')
</code></pre>

<p>再比如，我们的<code>Tester</code>和<code>PlatformTask</code>都会关联到测试任务<code>TesterTask</code>，它们俩看起来都是<code>ForeinKey</code>。</p>

<pre><code class="python">
class TesterTask(TestingDeviceMixin, TimeBaseModel):
    owner = models.ForeignKey(Tester,
                              verbose_name=u'测试人', )

    platform_task = models.ForeignKey(PlatformTask,
                                      verbose_name=u'任务',
                                      related_name=u'tester_tasks')
</code></pre>

<p>但对生成数据而言，我们的目标会是每个<code>Tester</code>在被创建的时候，都给它创建一个以这个<code>Tester</code>为<code>owner</code>的<code>TesterTask</code>，并且给这个<code>TesterTask</code>创建一个关联的<code>PlatformTask</code>。</p>

<p>于是我们的写法就会是，首先在<code>TesterFactory</code>里面使用<code>RelatedFactory</code>来创建<code>TesterTask</code>:</p>

<pre><code class="python">
class TesterFactory(DjangoModelFactory):
    ...
    tester_task = RelatedFactory('apps.tester.factories.TesterTaskFactory', 'owner')
    ...
</code></pre>

<p>然后在<code>TesterTaskFactory</code>里面创建<code>PlatformTask</code>，并且在构造的时候使用传入的<code>owner</code>的参数：</p>

<pre><code class="python">
class TesterTaskFactory(DjangoModelFactory):
    ...
    platform_task = SubFactory('apps.platformtask.factories.PlatformTaskFactory',
                               company=SelfAttribute('..owner.user.company'),
                               owner=SelfAttribute('..owner.user'))
    ...
</code></pre>

<a name="faker"></a>
<h2>faker</h2>

<p>有很多字段，比如姓名、地址这些，纯粹用Fuzz的办法很难做到“贴近真实”。<a href="https://github.com/joke2k/faker">faker</a>就是用来解决这类字段的。</p>

<pre><code class="python">
from faker import Factory
fake = Factory.create()

fake.name()
# 'Lucy Cechtelar'

fake.address()
# "426 Jordy Lodge
#  Cartwrightshire, SC 88120-6700"

fake.text()
# Sint velit eveniet. Rerum atque repellat voluptatem quia rerum. Numquam excepturi
# beatae sint laudantium consequatur. Magni occaecati itaque sint et sit tempore. Nesciunt
# amet quidem. Iusto deleniti cum autem ad quia aperiam.
# A consectetur quos aliquam. In iste aliquid et aut similique suscipit. Consequatur qui
# quaerat iste minus hic expedita. Consequuntur error magni et laboriosam. Aut aspernatur
# voluptatem sit aliquam. Dolores voluptatum est.
# Aut molestias et maxime. Fugit autem facilis quos vero. Eius quibusdam possimus est.
# Ea quaerat et quisquam. Deleniti sunt quam. Adipisci consequatur id in occaecati.
# Et sint et. Ut ducimus quod nemo ab voluptatum.
</code></pre>

<p>这个包最可爱的地方就是支持本地化，比如一个随机的中文姓名可以这么去构造：</p>

<pre><code class="python">
faker = FakerFactory.create('zh_CN')
name = lazy_attribute(lambda x: faker.name())
</code></pre>

<a name="L......fixture"></a>
<h2>生成fixture</h2>

<p>因为<a href="https://github.com/rbarrois/factory_boy/">factory boy</a>和<a href="https://github.com/joke2k/faker">faker</a>主要的作用是在测试里面去mock数据，所以要用它们生成fixture不是那么容易。这是因为Django的整个设计上就很注意避免你把测试的数据写到生产的数据库，所以测试都会在一个在<code>Setup</code>阶段被创建，在<code>TearDown</code>阶段被删除的临时数据库里面进行（我看了一下，在开发版本的Django上已经加了一个<code>--keepdb</code>的参数使得你可以<a href="https://docs.djangoproject.com/en/dev/ref/django-admin/#django-admin-option---keepdb">保留你用来运行测试的数据库了</a>）。</p>

<p>所以我们可以在一个测试的<code>Setup</code>阶段把数据生成后，直接调用<code>dumpdata</code>命令来把数据<code>dump</code>出去：</p>

<pre><code class="python">
def setUp(self):
    company = CompanyFactory.create(id=3)
    TestUserFactory.create(company=company, id=3000)
    TestUserFactory.create_batch(company=company, size=1500)

    #for test_user in test_users:

    create_fixture('tester', 'tester.json')
    create_fixture('account', 'account.json')
</code></pre>

<p>注意，这里在创建的时候指定id主要是为了让初始的id比较大，避免和系统里面已经有的id撞车导致你构造的测试数据在<code>loaddata</code>的时候报错或者覆盖现有数据。</p>

<p>其中，<code>create_fixture</code>函数内容如下：</p>

<pre><code class="python">def create_fixture(app_name, filename):
    buf = StringIO()
    management.call_command('dumpdata', app_name, indent=4, stdout=buf)
    buf.seek(0)
    with open(filename, 'w') as f:
        f.write(buf.read().encode('utf-8'))
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrate schemaSpy With Sphinx Build]]></title>
    <link href="http://lenciel.cn/2014/12/integrate-schemaspy-with-sphinx-build-for-django-database-design-visualization/"/>
    <updated>2014-12-18T00:26:32+08:00</updated>
    <id>http://lenciel.cn/2014/12/integrate-schemaspy-with-sphinx-build-for-django-database-design-visualization</id>
    <content type="html"><![CDATA[<p><img src="/downloads/images/2014_12/schemaSpy.png" title="schemaSpy..." alt="schemaSpy" /></p>

<p>在做项目的时候，客户或者合作的部门常常问研发要“数据库设计”。在古代，瀑布式开发的第一个阶段是做架构设计和写文档，所以这样的需求一般都能被“充分满足”。而在我们现在的项目节奏和迭代速度都很快，数据库的设计在项目初期经常也在变化，如何能够比较方便的文档化这些变更？</p>

<p>对开发团队内部来说，我个人觉得Django的South或者是1.7之后加入的<a href="http://lenciel.cn/2014/08/django-1-dot-7-migrations/">Migration</a>里面每次变更生成的migration文件就已经足够开发人员了解底层的设计发生了什么变化。</p>

<p>而对外提供的文档，主要是在更高层级进行设计的沟通，所以之前我们一般是通过<a href="https://github.com/django-extensions/django-extensions">django-extension</a>里面的<code>graph_models</code>命令来生成简单的关系图：</p>

<pre><code class="bash"># Create a PNG image file called my_project_visualized.png with application grouping
$ ./manage.py graph_models -a -g -o my_project_visualized.png
</code></pre>

<p>效果如下：</p>

<p><img src="/downloads/images/2014_12/django_extension.svg" title="django-extension-sample..." alt="django-extension-sample" /></p>

<p>这里的图是通过<a href="http://www.graphviz.org/">graphviz</a>来完成的，可以看到一般的了解也足够了，但是缺点主要是：</p>

<ol>
<li>生成的关系图比较简陋</li>
<li>由于是图片，一旦表比较多浏览起来并不是那么灵活</li>
</ol>


<a name="L......schemaSpy"></a>
<h2>使用schemaSpy</h2>

<p>于是在新的项目里面本座选用了看起来更美好的<a href="http://schemaspy.sourceforge.net/">schemaSpy</a>，因为：</p>

<ol>
<li>轻量但支持多种数据库（jdbc），针对Django的test/stage/prod环境都可以使用</li>
<li><a href="http://schemaspy.sourceforge.net/sample/">功能非常强大</a>，并且有命令行支持，可以集成到CI</li>
</ol>


<p>不过和大多数开源工具一样，它的文档也是乱糟糟的。以开发环境为例，我们一般使用sqlite作为数据库，要在Mac下面成功运行schemaSpy连接sqlite，你需要：</p>

<ol>
<li>下载最新的<a href="http://sourceforge.net/projects/schemaspy/files/">SchemaSpy jar包</a></li>
<li>下载最新的<a href="https://bitbucket.org/xerial/sqlite-jdbc">Xerial Sqlite JDBC jar</a>包<code>sqlite-xerial.jar</code></li>
<li><p>创建一个<code>sqlite-xerial.properties</code>文件，内容如下：</p>

<pre><code class="`"> # Use -dp to override.
 description=SQLite
 connectionSpec=jdbc:sqlite:&lt;db&gt;
 db=database name
 driver=org.sqlite.JDBC
 #you may need to put the full path to the driver depending on your setup
 driverPath=sqlite-jdbc-3.8.7.jar
 selectTablesSql=.tables
</code></pre></li>
<li><p>运行命令：</p>

<pre><code class="`"> java -jar schemaSpy_5.0.0.jar -t  sqlite-xerial.properties -db ../src/default.db  -o django-testbird -sso
</code></pre></li>
</ol>


<p>会看到有<code>warning</code>，但是无需惊慌，我看了一下是schemaSpy的作者没有正确的处理<code>[]</code>。</p>

<a name="L.........Sphinx"></a>
<h2>集成到Sphinx</h2>

<p>因为我们的项目都使用了Jenkins自动启动Sphinx来生成文档，所以理想的情况当然是：</p>

<ol>
<li>修改Django下某个app的<code>models.py</code></li>
<li><code>make migration</code>生成migrations文件</li>
<li>代码提交并push到gitlab</li>
<li>Jenkins调用<code>django management command</code>完成表结构的变更</li>
<li>Jenkins自动更新包括数据库设计在内的文档</li>
</ol>


<p>要实现#5，最简单的办法是在Sphinx文档目录下的<code>Makefile</code>里面加一个<code>target</code>：</p>

<pre><code class="java">dbv:
    java -jar schemaSpy_5.0.0.jar -t sqlite-xerial.properties -db ../src/default.db  -o _db_virtualization/django-testproject -sso
</code></pre>

<p>然后在Jenkins调用的脚本里面加上<code>make dbv</code>就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Use Evernote]]></title>
    <link href="http://lenciel.cn/2014/12/how-i-use-evernote/"/>
    <updated>2014-12-17T14:27:39+08:00</updated>
    <id>http://lenciel.cn/2014/12/how-i-use-evernote</id>
    <content type="html"><![CDATA[<p>其实之前也分享了一些<a href="http://lenciel.cn/blog/categories/tools-i-use/">自己使用的工具</a>，只是更偏重研发。今天跟另外一个也用Evernote的同事交流了一下我怎么用Evernote，效果还可以，干脆在年关将至的时候分享一下自己日常使用的一些软件。</p>

<p>从Evernote开始。</p>

<p>进入互联网时代，特别是移动互联网时代之后，获取各种信息变得越来越便捷了，如何管理这些纷繁的信息也自热而然成为一个需求。大多数像我一样的老人，一开始是用<a href="https://digg.com/">dig</a>和<a href="https://delicious.com/">delicious</a>这样基于书签的工具。因为在有google和云笔记本这种东西之前，大家都是靠装满了各种书签的&#8221;收藏夹&#8221;过活（年轻人是不能理解重装机器没有备份收藏夹的伤痛的）。</p>

<p>但是这样的系统坏处就是它是&#8221;lazy-loading&#8221;的，你每次需要的时候，需要打开网页（如果你还能想起叫啥并且它们还健在的话）去找原来看到的信息，所以更适合用来做reference的整理。对于你真正希望梳理成自己知识的东西，更好的选择当然是使用所谓的PIM(Personal Information Management)软件。</p>

<p>我2010年开始用Evernote，一直用的是免费版(空间对我来说够了，而且我也没有太多分享的需求)，它的优点包括：</p>

<ul>
<li>多(liang)种(you)多(bu)样(qi)的记录手段</li>
<li>丰富灵活的管理方式</li>
<li>跨平台跨设备云同步</li>
<li>颜色还真水嫩啊</li>
</ul>


<p>但时间久了，Evernote里面的东西也多了起来。每次要找点儿什么基本上都是靠全文搜索，一直到我读到Michael Hyatt的<a href="http://michaelhyatt.com/evernote-tags.html">这篇文章</a>。</p>

<p>简单来说，大多数人用Evernote都是以&#8221;笔记本(Notebook)&ldquo;为容器来整理Note的。Michael的意思是Notebook和Tag比有这么几个弱点：</p>

<ol>
<li>Notebook数量有限制（个人版250，企业版5000），Tag可以有100000个</li>
<li>Notebook和Note是一对一的，Tag和Note是多对一的</li>
<li>Notebook只能建一级嵌套（基本上就是说可以Group一下），Tag可以无限制多层级嵌套</li>
</ol>


<p>所以他推荐了使用Tag来进行Note的管理。</p>

<p>除此之外他那篇文章里面还有个很重要的概念就是所有的文章先收到一个叫<code>Inbox</code>的Notebook，处理了之后再放到<code>Cabinet</code>里面去。这其实非常像我们使用邮箱：所有的邮件先被邮件系统放到Inbox，然后我们处理了之后打上相应的标签(ToDo, Later, &hellip;)，最后归档。</p>

<p>所以我现在是这么Evernote的。</p>

<p>首先，把Notebook减少到两个，一个是<code>Inbox</code>，一个是<code>Archive</code>。它们的作用跟我们的邮箱里面的Inbox和Archive是完全一样的。</p>

<p>然后，如果在网上看到觉得还挺有意思的文章，就用Evernote收录到<code>Inbox</code>。</p>

<p>注意，收录的时候我都习惯用下面的选项，去掉所有的样式：</p>

<p><img src="/downloads/images/2014_12/evernote_chrome_clipper.png" title="Evernote Clipper" alt="Evernote Clipper" /></p>

<p>最后，在整理Inbox的时候，对每篇文章做一些修修剪剪，给Note加上合适的Tag，然后放到<code>Archive</code>。可以看到，因为tag可以嵌套和展开，要找到自己感兴趣的文章变得容易很多：</p>

<p><img src="/downloads/images/2014_12/evernote_nested_tags.png" title="Evernote Clipper" alt="Evernote Clipper" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update Android Sdk With Shadowsocks Proxy]]></title>
    <link href="http://lenciel.cn/2014/09/update-android-sdk-with-proxy/"/>
    <updated>2014-09-02T02:30:35+08:00</updated>
    <id>http://lenciel.cn/2014/09/update-android-sdk-with-proxy</id>
    <content type="html"><![CDATA[<p>博格坎普说，我们android项目的build挂了。</p>

<p>去Jenkins看了一下，日志里面的错误是：</p>

<pre><code>[android] $ /usr/local/share/gradle-1.11/bin/gradle clean build
Creating properties on demand (a.k.a. dynamic properties) has been deprecated and is scheduled to be removed in Gradle 2.0. Please read http://gradle.org/docs/current/dsl/org.gradle.api.plugins.ExtraPropertiesExtension.html for information on the replacement for dynamic properties.
Deprecated dynamic property: "buildName" on "ProductFlavorDsl_Decorated{name=main, minSdkVersion=null, targetSdkVersion=null, renderscriptTargetApi=-1, renderscriptSupportMode=null, renderscriptNdkMode=null, versionCode=-1, versionName=null, applicationId=null, testApplicationId=null, testInstrumentationRunner=null, testHandleProfiling=null, testFunctionalTest=null, signingConfig=null, resConfig=null}", value: "1.0.97".

FAILURE: Build failed with an exception.

* What went wrong:
A problem occurred configuring project ':app'.
&gt; Could not resolve all dependencies for configuration ':app:_debugCompile'.
   &gt; Could not find com.android.support:appcompat-v7:20.0.0.
     Required by:
         android:app:unspecified

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.s
</code></pre>

<p>这其实在天朝是蛮常见的现象，因为<code>dl-ssl.google.com</code>被封了，所以你总是会因为下面的错误无法更新Android的SDK：</p>

<pre><code class="bash">Failed connect to dl-ssl.google.com:443;
</code></pre>

<a name="Jenkins....................."></a>
<h2>Jenkins服务器配置代理</h2>

<p>这里之所以选择<a href="http://shadowsocks.org/">shadowsocks</a>，是因为可以用自己在<a href="https://developers.google.com/appengine/">Google的VM</a>上配置的shadowsocks代理服务器（顺便广告一下，Google的VM在做活动，几乎是最高配的机器都不要钱，而且第一跳就在美帝，用来做代理非常爽）。</p>

<p>安装shadowsocks的pythohn client:</p>

<pre><code class="bash">$ pip install shadowsocks

Downloading/unpacking shadowsocks
  Running setup.py egg_info for package shadowsocks

    warning: manifest_maker: MANIFEST.in, line 1: 'recursive-include' expects &lt;dir&gt; &lt;pattern1&gt; &lt;pattern2&gt; ...

Installing collected packages: shadowsocks
  Running setup.py install for shadowsocks

    warning: manifest_maker: MANIFEST.in, line 1: 'recursive-include' expects &lt;dir&gt; &lt;pattern1&gt; &lt;pattern2&gt; ...

    Installing sslocal script to /usr/local/bin
    Installing ssserver script to /usr/local/bin
Successfully installed shadowsocks
Cleaning up...
</code></pre>

<p>可以看到安装完之后有两个可执行文件，运行其中的<code>sslocal</code>就可以启动shadowsocks的客户端了：</p>

<pre><code class="bash">root@palm4fun-core-1:~/install# sslocal -h
usage: sslocal [-h] -s SERVER_ADDR [-p SERVER_PORT]
               [-b LOCAL_ADDR] [-l LOCAL_PORT] -k PASSWORD [-m METHOD]
               [-t TIMEOUT] [-c CONFIG] [--fast-open] [-v] [-q]

optional arguments:
  -h, --help            show this help message and exit
  -s SERVER_ADDR        server address
  -p SERVER_PORT        server port, default: 8388
  -b LOCAL_ADDR         local binding address, default: 127.0.0.1
  -l LOCAL_PORT         local port, default: 1080
  -k PASSWORD           password
  -m METHOD             encryption method, default: aes-256-cfb
  -t TIMEOUT            timeout in seconds, default: 300
  -c CONFIG             path to config file
  --fast-open           use TCP_FASTOPEN, requires Linux 3.7+
  -v, -vv               verbose mode
  -q, -qq               quiet mode, only show warnings/errors

Online help: &lt;https://github.com/clowwindy/shadowsocks&gt;
</code></pre>

<p>最简单的办法就是新建一个配置文件：</p>

<p><code>javascript ~/.shadowconfig
{
    "server":"my_server_ip",
    "server_port":8388,
    "local_port":1080,
    "password":"barfoo!",
    "timeout":600,
    "method":"table"
}
</code></p>

<p>记得在防火墙打开你配置的本地端口，然后运行下面的命令：</p>

<pre><code class="bash">root@palm4fun-core-1:~/install# sslocal -c ~/.shadowconfig
INFO: loading config from /root/.shadowconfig
shadowsocks 2.1.0
2014-09-02 00:27:53 INFO     starting local at 127.0.0.1:1080
</code></pre>

<a name="L...............android.sdk"></a>
<h2>命令行更新android sdk</h2>

<p>先配置java命令使用的代理，然后
从命令行更新android sdk。只需要到tools目录下面去跑(<code>-u</code>是不显示GUI，<code>-s</code>是指定不使用ssl链接)：</p>

<pre><code class="bash">$ export _JAVA_OPTIONS="-DsocksProxyHost=127.0.0.1"
$ android update sdk -u -s --all
</code></pre>

<p>注意<code>socksProxyHost</code>的默认端口就是1080，如果你使用了其他端口不能只配ip。</p>

<p>另外，<code>--all</code>是比较猛烈的选项（人家的硬盘就是大，人家的代理就是快嘛），你可以在命令行里面通过filter来安装你需要的东西。</p>

<a name="When.shit.happens"></a>
<h2>When shit happens</h2>

<p>运行起来之后更新非常慢，可以<code>android</code>命令报timeout，而代理那边打出日志：</p>

<pre><code class="bash">2014-09-02 00:27:53 INFO     starting local at 127.0.0.1:1080
2014-09-02 00:28:04 INFO     connecting 74.125.237.1:80
2014-09-02 00:28:04 INFO     connecting 74.125.237.1:80
2014-09-02 00:28:04 INFO     connecting 74.125.237.1:80
</code></pre>

<p>因为本座平时上网也是在用Google VM上的这个代理，没理由这么慢。所以就怀疑那个74.125.237.1的地址是被谁在<code>/etc/hosts</code>里面给配了固定ip。打开一看果然有：</p>

<pre><code class="bash">dl-ssl.google.com 74.125.237.1
</code></pre>

<p>估计是之前配置的基友搜索到了类似<a href="http://www.programering.com/a/MjM4YTMwATA.html">这样的文章</a>。这也是为什么我从来不用也不推荐别人用修改hosts文件的方法来翻墙的原因：它们总是在过期。</p>

<p>Last but not the least, Fuck you, GFW.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Complex Your Python Project Is?]]></title>
    <link href="http://lenciel.cn/2014/08/how-complex-your-python-project-is/"/>
    <updated>2014-08-31T21:04:47+08:00</updated>
    <id>http://lenciel.cn/2014/08/how-complex-your-python-project-is</id>
    <content type="html"><![CDATA[<p>最近诸事不顺，却也理所应当。</p>

<p>晚间时段迷上写字和画画，大概是因为之前看<a href="http://www.imdb.com/title/tt0460740/">《Cashback》</a>印象太深刻，觉得这些是美好遗失前力挽狂澜的技艺。</p>

<p>除开纸上涂鸦，还用机器画了不少鸡零狗碎的东西：我想用python画点儿T恤图案，印出来送给大家，给大伙儿同时也给自己打打气。</p>

<p>一开始看中了基于<a href="http://www.graphviz.org/">Graphviz</a>的<a href="http://furius.ca/snakefood/">Snakefood</a>。</p>

<p>最开始接触Graphviz是因为<a href="https://github.com/django-extensions/django-extensions">django-extensions</a>项目用它来画django model的<a href="https://code.djangoproject.com/wiki/DjangoGraphviz">关系图</a>。我们用它冒充ER图，拿去跟那些喜欢看文档但其实又不专业的官僚客户们交差。</p>

<p>Snakefood更进一步，通过分析你的代码依赖，从而得出你代码的“复杂度”。</p>

<p>“复杂度”其实是用“代码行数”衡量码农工作效力被普遍吐槽之后，大公司发明出来折腾工程师的诸多metrics里面还算有点儿用的一个：至少你可以让要接手的人看看这项目大概是个什么规模，以及，大概要挠破几寸头皮才能看懂。</p>

<p>当然，Snakefood这种基于文件依赖的复杂度分析其实不算特别靠谱，这可不是什么<a href="https://en.wikipedia.org/wiki/Cyclomatic_complexity">Cyclomatic complexity</a>，更像是开飞机的时候边排查“事故征兆”边驾驶的辅助工具。作者自己是这么说的：</p>

<p><blockquote><p>Producing pretty graphs is fun, but I found the most leverage of it when I try to make my code simpler, I generate the graph and inspect unexpected dependencies and try to refactor my code to simply the dependency graph as much as possible.</p><footer><strong>Martin Blais</strong></footer></blockquote></p>

<p>下面是本座心目中永远的&#8221;优雅Python代码第一名&#8221;<a href="http://docs.python-requests.org/en/latest/">Requests</a>的分析结果：</p>

<p><img src="/downloads/images/2014_08/requests.png" title="requests dependencies" alt="requests" /></p>

<p>再来看看<a href="https://github.com/django/django">Django</a>的最新版分析结果：</p>

<p><img src="/downloads/images/2014_08/django.png" title="django dependencies" alt="django" /></p>

<p>下面是本座最近撸完的一个项目，印到衣服上感觉还好吧：
<img src="/downloads/images/2014_08/yawp.png" title="yawp dependencies" alt="yawp" /></p>

<a name="L......"></a>
<h2>结论</h2>

<p>首先，本座挺喜欢Snakefood那种Unix范儿的：所有的命令都可以给其他命令来一管，比如：</p>

<pre><code class="bash">    sfood ./src | sfood-graph -p | dot -Tps | pstopdf -i -o ./1.pdf
</code></pre>

<p>其次，本座开始计划是给每个人生成一个他们自己写的模块的依赖图，印到衣服上让大家自己穿。但试了之前几个项目之后，Hmmmm&hellip;有的同学大概是不会愿意的吧&hellip;</p>

<p>最后，T恤计划也没这么就打住：后来又发现了<a href="http://nodebox.net/">nodebox</a>这种真正是拿来搞艺术的玩意儿，于是要生成一点儿敢往自己胸口放的东西变得方便多了，过两天如果公司没有倒闭，就把东西放出来让大家看看。</p>
]]></content>
  </entry>
  
</feed>
