<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tools-i-use | @Lenciel]]></title>
  <link href="http://lenciel.cn/blog/categories/tools-i-use/atom.xml" rel="self"/>
  <link href="http://lenciel.cn/"/>
  <updated>2016-02-25T22:53:13+08:00</updated>
  <id>http://lenciel.cn/</id>
  <author>
    <name><![CDATA[Lenciel Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[从Markdown列表转换成脑图]]></title>
    <link href="http://lenciel.cn/2016/02/markdown-to-mindmap/"/>
    <updated>2016-02-25T21:19:33+08:00</updated>
    <id>http://lenciel.cn/2016/02/markdown-to-mindmap</id>
    <content type="html"><![CDATA[<p>去年过年整理了一次<a href="http://lenciel.cn/2015/01/p4f-tech-stack-part-1-devops/">p4f的技术栈</a>，最近受<a href="http://www.stuq.org/subject/skill-map/">StuQ</a>和<a href="https://leohxj.gitbooks.io/front-end-database/content/interview/skill-path.html">leohxj</a>的启发又开始整理适合我司的各个研发职位的技能图谱：这类树状的图片其实就是脑图(Mindmap)。</p>

<p>图片形式的文档都有一个麻烦的地方，就是不太好做版本控制和review。比如如果本座来整理Web前端技能图谱，总希望：</p>

<ul>
<li>能够发给前端组的人review</li>
<li>能够放到代码库，让前端组维护起来，根据业界动态不断更新</li>
</ul>


<p>如果是张图片，弄起来就比较麻烦，这个时候就需要Markdown出场了。其实最近这几年，用Markdown写文档大概也算Best Practice的一个了。好处确实很多，最重要的两个：</p>

<ul>
<li>集成到现有的开发流程里面把文档也交叉review、版本化、自动部署</li>
<li>有个三长两短的时候，迁移成本非常低</li>
</ul>


<p>只不过从Markdown生成脑图还是比较偏门，所以分享一下。</p>

<p>其实大多数的脑图软件（ 比如MindNode或者Mindjet MindManager）都支持把缩进好的文本直接导入生成图片。以我在用的MindNode为例，你可以把下面的格式：</p>

<pre><code>- 研发团队
    - 前端组
    - 后端组
    - 运维组
    - 测试组
    - 平台组
        - 数据组
        - RIO组
</code></pre>

<p>这样贴到MindNode里面，就会生成下面的脑图：</p>

<p><img src="/downloads/images/2016_02/mindmap_1.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>但是上面的格式，如果是以Markdown的格式放到代码库里面，有略显难看。所以更进一步，你可以先用Markdown的<code>#</code>来标不同层级，使得文档本身可以在网页上显示成规则的列表，<a href="http://lenciel.cn/2014/05/web-development-skill-set-and-reading-list/">类似这样</a>，它的原始Markdown文件在<a href="https://gist.github.com/lenciel/637812a7dcbe8341b07b">这里</a>。</p>

<p>然后，通过脚本把文档里面的<code>#</code>转换成<code>\t</code>，就可以得到能够直接粘贴到MindNode里面生成脑图的文本了。如果你是使用Mac，还可以直接把转换脚本创建成一个<code>service</code>通过<code>Automator</code>安装，这样你在任何一个Markdown文档上选中需要生成脑图的部分，右键就可以了：</p>

<p><img src="/downloads/images/2016_02/mindmap_2.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>还有个未尽事宜就是Markdown里面的链接，生成图片的时候要把方括号、圆括号以及圆括号里面的链接去掉，不然就太那看了：</p>

<p><img src="/downloads/images/2016_02/mindmap_3.png" title="Don't touch me..." alt="Vhost threshold" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Chrome自定义搜索引擎快速查找资源]]></title>
    <link href="http://lenciel.cn/2016/02/how-can-everybody-use-chrome/"/>
    <updated>2016-02-20T11:53:34+08:00</updated>
    <id>http://lenciel.cn/2016/02/how-can-everybody-use-chrome</id>
    <content type="html"><![CDATA[<p>这篇文章讨论的办法，主要是结合使用<code>带参数Google搜索</code>+<code>Chrome快捷搜索入口</code>，鉴于众所周知的原因，如果你不会翻墙可能不能直接使用。</p>

<p>但是鉴于国内搜索引擎功能上多少都有借鉴Google，浏览器多少都有借鉴Chrome，所以这里讨论的办法也许用其他&#8221;搜索&#8221;+&ldquo;浏览器&#8221;组合也可以使用。只是我们都知道国内搜索引擎索引出来的结果有多离奇，所以效果上可能会打一些折扣。</p>

<a name="L.........Google......"></a>
<h3>带参数Google搜索</h3>

<p>Google可以带参数搜索一般用户可能不太用到，但其实对找东西很有用。完整的说明可以自己找来看，对普通用户也非常有用的有：</p>

<a name="L........."></a>
<h4>双引号</h4>

<p>把搜索词放在双引号中，代表完全匹配搜索，也就是说搜索结果返回的页面包含双引号中出现的所有的词，连顺序也必须完全匹配。</p>

<p>比如搜索代码里面的抛出的错误，你直接把错误行扔进去，往往不如加上引号来完全匹配准确。</p>

<a name="filetype"></a>
<h4>filetype</h4>

<p>用于搜索特定文件格式，比如搜索<code>filetype:pdf</code>，那么就只返回所有包含关键词的pdf文件。</p>

<a name="site"></a>
<h4>site</h4>

<p>用来搜索某个域名下的所有文件，比如在百度网盘里面搜索名字包含Hadoop的文件，就可以搜索<code>Hadoop site:pan.baidu.com</code>。</p>

<a name="L......"></a>
<h4>减号</h4>

<p>代表搜索不包含减号后面的词的页面。使用这个指令时减号前面必须是空格，减号后面紧跟着需要排除的词。</p>

<p>熟练掌握并且综合使用上面这些语法，你就可以非常快速地找到你需要的东西了。</p>

<a name="Chrome.................."></a>
<h3>Chrome快捷搜索入口</h3>

<p>Chrome为你提供了快捷方式来使用搜索。<code>Cmd+L</code>（Windows平台大概是<code>Ctrl+L</code>）进入地址栏，然后输入要搜索的内容，回车，就会使用你的默认搜索引擎进行搜索。</p>

<p>假如你要切换一个搜索引擎，比如你的默认引擎是Google，偶尔你需要用百度来搜索，只需要在地址栏里面先敲<code>baidu</code>，然后按<code>Tab</code>键，然后输入你需要搜索的关键字并回车，就可以了。</p>

<p>Chrome里面你可以这样使用的搜索引擎数量其实是远超你想象的。</p>

<p>在地址栏里面敲入<code>chrome://settings/</code>，然后进入搜索引擎的配置你就可以看到它们：</p>

<p><img src="/downloads/images/2016_02/manage_search_engine.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<a name="L................................."></a>
<h3>创建使用自定义搜索引擎</h3>

<p>一旦开始使用自定义搜索，你就会发现有些搜索使用频率相当高。</p>

<p>比如在百度盘里面搜索某个文件。</p>

<p>再比如在<a href="http://quora.com/">Quora</a>或者<a href="http://zhihu.com">知乎</a>里面搜索包含某个关键字的问答。</p>

<p>这个时候你只需要在搜索引擎列表的末尾添加一个自定义项：</p>

<p><img src="/downloads/images/2016_02/custom_search_engine.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>比如我们添加一个<code>Keyword</code>是<code>panb</code>的搜索引擎，它的URL是：</p>

<pre><code>https://www.google.com.hk/search?q=%s+site%3Apan.baidu.com
</code></pre>

<p>注意URL这个参数需要做<a href="https://docs.oracle.com/javase/7/docs/api/java/net/URLEncoder.html">urlencode</a>，所以空格变成了<code>+</code>，<code>site:pan.baidu.com</code>变成了<code>site%3Apan.baidu.com</code>。</p>

<p>如果你不知道<code>urlencode</code>怎么做，可以先到Google上完成一次目标搜索，然后从地址栏上面复制下来。</p>

<p>定义好了自定义搜索引擎以后，你只需要在地址栏里面输入Keyword（panb），然后按<code>Tab</code>键，再输入你需要查找的资源，回车，就可以看到结果了。</p>

<p>具体使用过程请参考下面这个视频（略需要几秒加载）：</p>

<p><video width='640' height='320' preload='none' controls poster=''><source src='href="http://lenciel.cn/downloads/video/chrome_custom_search.mp4">http://lenciel.cn/downloads/video/chrome_custom_search.mp4</a>&#8217; ></video></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[提取微信语音消息]]></title>
    <link href="http://lenciel.cn/2015/12/extract-audio-message-from-wechat/"/>
    <updated>2015-12-24T13:05:21+08:00</updated>
    <id>http://lenciel.cn/2015/12/extract-audio-message-from-wechat</id>
    <content type="html"><![CDATA[<a name="Why."></a>
<h3>Why?</h3>

<p>Why not?</p>

<a name="How."></a>
<h3>How?</h3>

<a name="L................................."></a>
<h4>导出原始微信的音频消息</h4>

<ul>
<li>使用iTunes创建一个不加密备份</li>
<li>导出备份中的微信应用文件夹（可以使用iExplorer试用版）</li>
<li>找到你需要转换的音频文件所在文件夹</li>
</ul>


<a name="L......silk3...............mp3"></a>
<h4>转换silk3编码音频为mp3</h4>

<p>如果你是mac机器，只需要安装ffmpeg（推荐使用homebrew）然后运行脚本：</p>

<pre><code class="python">    python wechat2mp3.py 待转换音频所在文件夹
</code></pre>

<p>如果你是其他系统，确认你装好了ffmpeg之后，需要<a href="https://github.com/gaozehua/SILKCodec">自己编译SILK解码库</a>。</p>

<a name="Seriously.Why."></a>
<h3>Seriously Why?</h3>

<p>常温常压下我并不需要导出微信的语音，之所以有这个需求是因为蒙爷在三亚经常用微信跟我们唠嗑：</p>

<p><audio controls loop preload><source src="http://lenciel.cn/downloads/audio/mm_voice.mp3"></audio></p>

<p>听到这样销魂的声音你就算不想保存，也想要转发，对不对？</p>

<p>毕竟作为一名中国人，你已经有8个亲戚群了，对不对？</p>

<p>然后微信奇怪的生态圈构建方式就是，各种封闭。</p>

<p>微信公众号是世间少有的不允许外链的媒体，微信客户端是世间少有的不允许导出聊天记录的聊天工具。</p>

<p>它的想法大概是，你珍贵的瞬间都在我这里（微信专门做了“收藏”这个功能让你把这些片段上传到微信的服务器，打着不让它们丢失的旗号），那你就逃不出我的手掌心了。</p>

<a name="Seriously.How."></a>
<h3>Seriously How?</h3>

<p>使用iTunes创建一个不加密的备份，然后连接iExplorer，会看到打开iTunes备份的选项：</p>

<p><img src="/downloads/images/2015_12/extract_wechat_1.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>打开后在<code>App</code>文件夹下面导出微信文件夹：</p>

<p><img src="/downloads/images/2015_12/extract_wechat_2.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>在导出的文件夹下面有个Audio目录，你可以根据语音消息的数量大概确认需要导出的目录（目录是个hash），然后到<code>DB/MM.sqlite</code>下面去打开<code>Chat_[hash]</code>这个表里面，看看消息来确认：</p>

<p><img src="/downloads/images/2015_12/extract_wechat_3.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>二进制查看其中的任意一个文件，可以看到是<a href="https://en.wikipedia.org/wiki/SILK">SILK</a>编码的（skype早期版本包括lync都是使用的这种编码方式）：</p>

<p><img src="/downloads/images/2015_12/extract_wechat_4.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>接下来你只需要按照<a href="https://github.com/lenciel/wechat2mp3">repo</a>里面的指导(愿主保佑你是用Mac因为那最简单)来进行文件转换就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Palm4fun Tech Stack Review Part II]]></title>
    <link href="http://lenciel.cn/2015/02/p4f-tech-stack-part-2-others/"/>
    <updated>2015-02-20T14:11:19+08:00</updated>
    <id>http://lenciel.cn/2015/02/p4f-tech-stack-part-2-others</id>
    <content type="html"><![CDATA[<p>距离<a href="http://lenciel.cn/2015/01/p4f-tech-stack-part-1-devops/">上篇</a>略久，主要最近很忙。</p>

<a name="Application..amp..Data"></a>
<h2>Application &amp; Data</h2>

<p>和其他几个提供辅助的部分不同，App/Data这部分基本上就是产品本身了。</p>

<a name="Application.Hosting"></a>
<h3>Application Hosting</h3>

<p><img src="/downloads/images/2015_01/p4f_stack_app_data_1.png" title="Don't touch me..." alt="stack_devops_1" /></p>

<p>我们在选择云的时候，也有试用过“久负盛名”的几家大的。</p>

<ul>
<li>阿里因为性价比的原因直接被我忽略了</li>
<li>AWS显然是成熟度最高的，但是在国内用起来确实比较憋屈，希望他们正式入华后有好转</li>
<li>Google的Compute Engine和Windows Azure都属于开张不久，前者因为有打折劵最终被我用来做了很久的翻墙代理（但是也因为忘记关VPS收到了巨额账单，好在Google还比较厚道免单了）。后者因为在国内有部署，速度非常不错，但是整体比UCloud还是贵了不少。</li>
</ul>


<p>最终我们选择了UCloud，他们的价钱比较公道，服务也做得非常棒。虽然我们机器并不是很多，但是仍然有24小时随叫随到的服务团队在跟，并且服务团队的技术实力在国内的服务提供商里面也非常突出。</p>

<p>平时还有一些抛弃型的原型我会放到Heroku或者Google App Engine上，因为它们用来部署Django应用非常便捷。</p>

<p>我们大多数项目都只是简单的管理后台，用Apache还是Nginx并没有明显区别。因为Apache在大多数OS自带，所以基本上都是以Apache+uwsgi+supervisor来进行部署。</p>

<a name="Languages..amp..Frameworks"></a>
<h3>Languages &amp; Frameworks</h3>

<p><img src="/downloads/images/2015_01/p4f_stack_app_data_2.png" title="Don't touch me..." alt="stack_devops_1" /></p>

<p>这张图再画长一倍也不一定能画完，因为这部分特别是Web前端技术的变动实在是太大了。感觉JavaScript社区换框架、方法论、编译工具甚至是VM就像足球运动员换袜子一样勤。</p>

<p>所以我们的策略一直是不绑定到某个具体框架：那样很容易被绑架。从目前来看：</p>

<ul>
<li>React/Flux最近特别火，由Facebook内部使用并开源（特别是最近推出了React Native）。</li>
<li>AngularJS，火了很长时间，由Google内部使用并开源。目前两个主要版本变动太大嘴炮很多，可以观望到尘埃落定再考虑深入学习。</li>
<li>Backbone是非常不错的客户端MVC框架。</li>
<li>node.js和io.js。目前它们是一样的东西，io.js只是node.js的一个fork（类似于Hudson和Jenkins的关系）。目前可以只学node.js但是得盯着io.js的发展，因为很多原来node.js的主力都在io.js这边。</li>
<li>npm是Javascript目前最主要的package管理工具。目前你还会听说bower但几乎大家都已经确认这是个愚蠢的idea。另外你还会听说jspm，一个很新的系统，非常不错，值得留意。</li>
<li>Browserify使得你可以在browser里面直接使用npm的module，而不仅仅是在server端。完全是一次革命，非常好用。</li>
<li>Gulp和Grunt是build工具（类比Ant/Maven），Gulp更新而且设计上非常成熟，推荐学习和使用Gulp。</li>
<li>express.js是服务器端JS应用开发需要学习的东西。</li>
<li>Meteor是设计非常领先的一个全栈的框架（想想Django），整体上非常酷，目前也很流行。如果你想试试自己的学习能力和承受能力，值得一试。</li>
<li>jQuery之于JavaScript就好比少林寺之于中华武术。每个人都在学，都以为它就可以搞定整个武林，但那是错的。JQuery是用来对DOM做操作的，如果你用它在干别的，你多半错了。</li>
</ul>


<a name="Assets..amp..Media"></a>
<h3>Assets &amp; Media</h3>

<p><img src="/downloads/images/2015_01/p4f_stack_app_data_3.png" title="Don't touch me..." alt="stack_devops_1" /></p>

<p>这方面没什么好说的，一开始我们用的就是UCloud自带的服务。后面为Testbird开发项目的时候接触到了七牛云。不得不吐槽一下七牛云还处于快速增长期，不论是提供的服务的稳定性，还是文档更新的及时性，都还有很多值得提高的地方。</p>

<a name="Data.Storage"></a>
<h3>Data Storage</h3>

<p><img src="/downloads/images/2015_01/p4f_stack_app_data_4.png" title="Don't touch me..." alt="stack_app_data_4" /></p>

<p>数据库我们一般本地开发用SQLite，stage和prod服务器用MySQL。之所以没有选择Postgresql是因为它那些很不错的功能我们在项目里面还没有需要，所以就偷懒选择了自己更熟悉的系统。</p>

<a name="Libraries"></a>
<h3>Libraries</h3>

<p><img src="/downloads/images/2015_01/p4f_stack_app_data_5.png" title="Don't touch me..." alt="stack_app_data_5" /></p>

<p>这张图也是很难画完整的，因为它一直在变。不过我们基本上用ACE封装了一套自己的UI框架，对提高开发效率还是非常有用的。</p>

<a name="Utilities"></a>
<h2>Utilities</h2>

<p><img src="/downloads/images/2015_01/p4f_stack_utilities.png" title="Don't touch me..." alt="stack_utilities" /></p>

<p>都是些中规中矩的选择，因为好的服务都在国内被封堵得比较彻底，不是吗？</p>

<p>比如统计，百度做得和Google还差几个数量级（你见过实时统计有百度那么不实时的么？），但是在国内因为墙的关系常常还是只能用。</p>

<p>再比如SMS网关，国外有大量的类似<a href="https://www.twilio.com/sms/toll-free">Twilio</a>的优质服务，价格便宜，接口良好，但是&hellip;我们都用亿美。</p>

<p>值得一提的是推送消息服务，因为被百度坑过，我们一开始用了我浙大著名创业公司“个推”，结果质量低得还比较离谱。最后好死不死又换到了百度Push：原因还是因为Google原生的Push被墙。</p>

<a name="Business.Tools"></a>
<h2>Business Tools</h2>

<p><img src="/downloads/images/2015_01/p4f_stack_business_tools.png" title="Don't touch me..." alt="stack_devops_1" /></p>

<p>其实Trello和Slack这样的工具用好一个就足以撑起一家中等规模的公司了。可惜因为经常被墙，很多不能自己翻墙的同事或者客户用起来倍感艰辛。</p>

<p>整个公司的任务驱动主要还是靠Jira，知识分享和管理主要是靠Confluence。</p>

<p>阿勒！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goodbye Palm4fun, and the Tech Stack Review Part I]]></title>
    <link href="http://lenciel.cn/2015/01/p4f-tech-stack-part-1-devops/"/>
    <updated>2015-01-04T14:44:23+08:00</updated>
    <id>http://lenciel.cn/2015/01/p4f-tech-stack-part-1-devops</id>
    <content type="html"><![CDATA[<p><img src="/downloads/images/2015_01/goodbye_palm4fun.png" title="Don't touch me..." alt="goodbye" /></p>

<p>大概两年前，和Bergkamp、194一次计划外的聊天之后，<strike>出于保护直肠的目的</strike>，本座离开了基友密布的<a href="http://www.myriadgroup.com/">Myriad</a>，作为Palm4fun的联合创始人之一，开始捣鼓着自己创业。</p>

<p>在具体的研发工作方面，我主要是负责服务器端的开发。但因为被冠名CTO，我的工作还包括：</p>

<ul>
<li>制定研发流程，管理运作研发团队（很幸运，团队都是气味相投的小伙伴并且平均水平很高）</li>
<li>搭建和维护各种IT系统让大家的工作更加轻松</li>
<li>对各种项目进行技术选型、风险评估和报价</li>
<li>培养有palm4fun自己特色的团队文化</li>
<li>甚至是，设计我们的logo和<a href="http://lenciel.cn/2014/09/logo-test/">T-Shirt</a></li>
</ul>


<p>别误会，并不是和写代码比，我更喜欢做这些事情：我做这些，主要是经过多年的折腾，已经对自己想在什么样的环境里进行软件开发有了自己的体会。所以，我当然愿意花时间和小伙伴们一起，把理想中的工作环境具体到实践。</p>

<p>经过这两年的时间，虽然我们有纯技术团队创业理应遭遇的各种捉襟见肘，但因为整个团队的坚持和付出，在活下来的同时，也完成了一定的技术积累。有一个可喜的现象是，我们自己参与开发孵化的项目，虽然有一些死掉了，但也有一些拿到了几百万的天使投资；而我们作为外包方参与研发的项目，客户都非常认可我们的项目质量和工作方式。很多客户不但和我们确定了长期合作的关系，还积极介绍自己朋友的项目给我们。</p>

<p>新年到来之际，随着我们被<a href="http://www.testbird.com/">Testbird</a>收编，Palm4fun大部分成员即将投入到新公司的各条战线，Palm4fun作为一个组织也就此消亡了。回首这两年，我想说，如果你没有和我一起经历那说了你也不懂我还是不说了&hellip;&hellip;</p>

<p>跨年的时候，茕茕孑立的本座画了张思维导图，主要目的是把过去两年palm4fun的积累整理一下。画出来之后很多朋友希望我分享高清无码图：因为整个图非常大，不太适合在移动设备上看。</p>

<p><img src="/downloads/images/2015_01/p4f_stack_all.png" title="Don't touch me..." alt="stack_all" /></p>

<p>其实在一开始选择这些的时候，基本上就是从运维支撑和测试部署工具、产品开发和数据管理、基础设施和功能模块以及商业工具四个维度出发，所以就拆成四个部分简单过一遍。特别声明：选择的依据和出发点主要是根据个人喜好，包括自己使用的体验以及眼缘，并没有特别的理由。比如我们用Reviewboard不用Phabricator，完全是因为团队中大多数人已经用习惯了。</p>

<a name="Build.Test.Deploy"></a>
<h2>Build/Test/Deploy</h2>

<p><img src="/downloads/images/2015_01/p4f_stack_devops_1.png" title="Don't touch me..." alt="stack_devops_1" /></p>

<ul>
<li>我们没有用Gerrit或者Phabricator的原因是它们功能太多了</li>
<li>Ngrok是做微信接口调试时意外发现的好物</li>
</ul>


<a name="Monitoring"></a>
<h2>Monitoring</h2>

<p><img src="/downloads/images/2015_01/p4f_stack_devops_2.png" title="Don't touch me..." alt="stack_devops_2" /></p>

<ul>
<li>Sentry帮我们在用户找到我们之前找到了很多问题</li>
<li>一开始我们用过Nagios，它的设计也很不错，就是界面太&hellip;</li>
<li>Zabbix帮我们远离主机因为硬盘满了或者内存不够驾崩的场面</li>
</ul>

]]></content>
  </entry>
  
</feed>
