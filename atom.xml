<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@Lenciel]]></title>
  <link href="http://lenciel.cn/atom.xml" rel="self"/>
  <link href="http://lenciel.cn/"/>
  <updated>2014-11-25T01:45:02+08:00</updated>
  <id>http://lenciel.cn/</id>
  <author>
    <name><![CDATA[Lenciel Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TLDR是什么?]]></title>
    <link href="http://lenciel.cn/2014/11/the-stories-of-the-bible-in-tldr-form/"/>
    <updated>2014-11-24T10:47:31+08:00</updated>
    <id>http://lenciel.cn/2014/11/the-stories-of-the-bible-in-tldr-form</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/2014_11/bible_story.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>很多人问什么是<code>TL;DR</code>，其实是<code>Too long, didn't read</code>的缩写，一般用来暗示下面是一段摘要，如果你对这长得要死的文章的细节没兴趣，读读它就可以了。</p>

<p>比如我很喜欢的tumblr站<a href="http://tldrwikipedia.tumblr.com/">TL;DR WIKIPEDIA</a>，其实就是魔鬼辞典好不好。再比如昨天在Reddit上的红贴<a href="http://www.reddit.com/r/Christianity/comments/2mpv2r/the_stories_of_the_bible_in_tldr_form/">圣经故事TLDR版本</a>，读起来也很好玩：</p>

<p><strong>创世纪</strong></p>

<ul>
<li>上帝：好了，你们俩，不许干那事儿。除开那件事，你们要怎么疯都可以。</li>
<li>亚当和夏娃：好的。</li>
<li>撒旦：你们就该干那事儿。</li>
<li>亚当和夏娃：好的。</li>
<li>上帝：咋了？</li>
<li>亚当和夏娃：我们干了那事儿。</li>
<li>上帝：我嬲&hellip;&hellip;</li>
</ul>


<p><strong>旧约</strong></p>

<ul>
<li>上帝：你们是我的子民，你们不该干这些事儿。</li>
<li>人们：我们不会再干了。</li>
<li>上帝：好样的。</li>
<li>人们：我们又干了。</li>
<li>上帝：我嬲&hellip;&hellip;</li>
</ul>


<p><strong>福音</strong></p>

<ul>
<li>耶稣：我是上帝之子，虽然你们又干了那些事儿，上帝和我依然爱你们也希望你们活下去。但不能再干那些事儿了。</li>
<li>被治愈的人们：好的！谢谢！</li>
<li>其他人：我们是从木有见过这厮干那些事儿，但是没人看到的时候，说不定他也在干那些事儿。</li>
<li>耶稣：我从木有干过那些事儿。</li>
<li>其他人：我们得审判你。</li>
<li>彼拉多：你有木有干那事儿。</li>
<li>耶稣：木有。</li>
<li>彼拉多：他木有干过。</li>
<li>其他人：还是杀了算了吧。</li>
<li>彼拉多：好的。</li>
<li>耶稣：我嬲&hellip;&hellip;</li>
</ul>


<p><strong>保罗的信件</strong></p>

<ul>
<li>人们：我们干了那些事儿。</li>
<li>保罗：耶稣还是爱你们，而且因为你们也爱他，你们必须停止干这些事儿了。</li>
<li>人们：好的。</li>
</ul>


<p><strong>保罗的信件II</strong></p>

<ul>
<li>人们：我们又干了那些事儿。</li>
<li>保罗：我嬲&hellip;&hellip;</li>
</ul>


<p><strong>启示录</strong></p>

<ul>
<li>约翰：当耶稣复生的时候，就不会再有人干那些事儿了。现在，人们就该开始停止干那些事儿了。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web应用开发的七项原则]]></title>
    <link href="http://lenciel.cn/2014/11/7-principles-of-rich-web-applications/"/>
    <updated>2014-11-17T22:30:42+08:00</updated>
    <id>http://lenciel.cn/2014/11/7-principles-of-rich-web-applications</id>
    <content type="html"><![CDATA[<p>这篇文章主要介绍构建使用Javascript来控制UI的网站在设计时的7个原则。它们是我作为一名开发人员的经验所得，也是我作为一名互联网资深用户的体会和总结。</p>

<p>Javascript毫无疑问早已成为了前端开发人员不可或缺的工具。但现在它的使用范围还在不断扩展到其他的领域，比如<a href="http://nodejs.org/">服务器端</a>甚至是<a href="https://tessel.io/">微控制器</a>。在斯坦福这样的声望卓越的大学里面，它也已经被选为计算机科学<a href="http://web.stanford.edu/class/cs101/">入门课程</a>的教学语言。 </p>

<p>即便如此，它在web开发中究竟应该扮演什么样的角色或者说负责哪方面的作用，仍然是个迷：即便对于很多框架和类库的作者而言也是如此：</p>

<ul>
<li>JavaScript应该被用来替代像<code>history</code>，<code>navigation</code>和<code>page rendering</code> 这样的浏览器函数么？</li>
<li>后端是不是到头了？是不是根本就不该在后端渲染HTML了？</li>
<li>Single Page Applications (SPAs) 是不是代表着未来的趋势?</li>
<li>JS是否应该用来 <em>增强</em> 页面在网站的渲染效果，但 <em>渲染</em> 页面还是应该在web应用里面做?</li>
<li>是否应该使用像PJAX或者TurboLinks这样的技术?</li>
<li>一个网站和一个web应用之间的区别精确的描述起来究竟是什么? 是不是应该就是一个东西?</li>
</ul>


<p>下面就是我试着回答这些问题做的一些分析。我分析的方式是通过用户体验(UX)，特别是如何最小化用户拿到他们感兴趣的 <em>数据</em> 的时间，作为分析的切入点，来验证对Javascript的 <em>各种</em> 使用方式。我会从网络通信的基础入手，一直说到对未来趋势的预测。</p>

<ol>
<li> <a href="#server-rendered-pages-are-not-optional">Server渲染页面仍然是必须的</a></li>
<li> <a href="#act-immediately-on-user-input">对用户输入立刻响应</a></li>
<li> <a href="#react-to-data-changes">数据变更时的应对</a></li>
<li> <a href="#control-the-data-exchange-with-the-server">控制与服务器的数据交互</a></li>
<li> <a href="#dont-break-history-enhance-it">不要搞乱history，增强它</a></li>
<li> <a href="#push-code-updates">Push更新</a></li>
<li> <a href="#predict-behavior">行为预测</a></li>
</ol>


<a name="L1..Server...............................a.name..server-rendered-pages-are-not-optional....a."></a>
<h2>1. Server渲染页面仍然是必须的<a name="server-rendered-pages-are-not-optional"></a></h2>

<p><strong>TL;DR</strong>: <em>服务器端渲染与SEO无关，它主要的考虑是性能：需要考虑的包括不在服务器渲染的话，请求脚本、页面样式、页面资源和API请求造成的额外的开销，以及考虑在HTTP2.0里加入的<code>PUSH of resources</code></em>.</p>

<p>首先需要指出，在业界有一种错误的二分法：&#8221;server-rendered apps&#8221; 和 &ldquo;single-page apps&#8221;的对立。如果我们的目标是用户体验和性能的最优化，那么选择其中任何一个而抛弃另一个都是错误的决定。原因其实很明显：整个互联网用于传输页面的介质，有一个理论上可计算的速度局限。关于这点，Stuart Cheshire有个著名的文献 (或者说是吐槽？)，<a href="http://rescomp.stanford.edu/~cheshire/rants/Latency.html">“It’s the latency, stupid”</a> :</p>

<blockquote><p>The distance from Stanford to Boston is 4320km.<br/>The speed of light in vacuum is 300 x 10^6 m/s.<br/>The speed of light in fibre is roughly 66% of the speed of light in vacuum.<br/>The speed of light in fibre is 300 x 10^6 m/s * 0.66 = 200 x 10^6 m/s.<br/>The one-way delay to Boston is 4320 km / 200 x 10^6 m/s = 21.6ms.<br/>The round-trip time to Boston and back is 43.2ms.<br/>The current ping time from Stanford to Boston over today’s Internet is about 85ms (…)<br/>So: the hardware of the Internet can currently achieve within a factor of two of the speed of light.</p></blockquote>


<p>这里提到的从波士顿到斯坦福路上花费的85ms，当然会随着时间的推移不断的改善：如果你现在测试一下说不定已经大大增速了。但需要注意很重要的一点：理论上两个海岸间最少也需要 <strong>50ms</strong> 才能完成通信。</p>

<p>换句话说，用户间连接的带宽再怎么显著提高，花在传输路上的延迟总有无法突破的极限。所以，在页面上显示信息时减少请求次数，也就是减少信息被传输在路上的次数，对于良好的用户体验和出色的响应速度而言，至关重要。</p>

<p>这一点在Javascript驱动的Web应用流行起来之后显得尤为明显。这些应用一般<code>&lt;body&gt;</code>标签内什么东西都没有，只有<code>&lt;script&gt;</code>和<code>&lt;link&gt;</code>标签，被称为&#8221;Single Page Applications&#8221;或者&#8221;SPA&#8221;。就像它的名字所暗示的一样，服务器返回时一直在重用同一个页面，其他的页面内容都是在客户端被处理和渲染的。</p>

<p>考虑下面的这个场景：用户在浏览器上访问<code>http://app.com/orders/</code>，如果这是一个传统的网页，那么在后台处理这个请求的时，就会带回重要的 <em>信息</em> ，用来完成页面的显示：比如，从数据库里面查询出订单，然后把它们的数据放在请求的返回里面。但如果这是一个SPA，那么第一次可能会立刻返回一个包含<code>&lt;script&gt;</code>标签的空页面，然后再跑一趟才能拿回用来渲染页面的内容和数据。</p>

<p><img src="http://lenciel.cn/downloads/images/2014_11/spa_code_breakdown.png" title="SPA code breakdown" alt="SPA code breakdown" />
图1. 服务器端发送的SPA的每个页面组成结构分析</p>

<p>目前大多数的开发者都大方接受了这个额外的 <em>网络传输过程</em> 是因为他们确信这只发生一次：后面反正是有cache的。也就是说，大家形成了这么一个共识，既然整个代码包一旦加载一次，就可以不用再请求其他的脚本和资源就完成对绝大多数的用户交互（包括跳转到应用的其他页面）的处理，那么这个开销就是可以接受的。</p>

<p>但实际上，虽然有cache，脚本解析和执行的时间仍然会带来性能上的下降。<a href="http://modernweb.com/2014/03/10/is-jquery-too-big-for-mobile/">“Is jQuery Too Big For Mobile?”</a> 这篇文章就探讨了即便是加载一个jQuery库，就会花去一些浏览器数百毫秒的时间。</p>

<p>更糟糕的是，和以前网速慢那种图片慢慢加载的效果不同，如果是脚本正在加载，用户什么都看不到：在整个页面被渲染出来之前，只能显示空白的页面。</p>

<p>最重要的是，目前互联网数据传输主要的协议TCP <em>建立</em> 比较慢。</p>

<p>首先，我们知道，一个TCP连接先需要握手。如果处于安全考虑使用了SSL，就还需要额外的两个来回（客户端重用了session的话，也需要一个额外的来回）。这些流程完毕之后，服务器才能开始往客户端发送数据。换句话说，再小的代码包实际上也需要几个来回才能完成传输，这就让前面描述的问题变得更加糟糕。</p>

<p>其次，TCP协议里面有一个流控机制，被称为 <code>slow start</code>，也就是在连接建立过程中逐渐增加传输的分段(<code>segments</code>)大小，入下图所示：</p>

<p><img src="http://lenciel.cn/downloads/images/2014_11/tcp_segments_chart.png" title="TCP segments chart" alt="TCP segments chart" />
图1. 服务器端在TCP连接的不同阶段能够发送的分段大小(KB)</p>

<p>这对SPA有两个很大的影响：</p>

<ol>
<li><p> 文件比较大的脚本，花在下载上的时间比你想象中的要长得多。Google的Ilya Grigorik在他的专著<a href="http://chimera.labs.oreilly.com/books/1230000000545/ch02.html#thats_four_rou">“High Performance Browser Networking”</a> 里面说过，“4个来回(…)和数百毫秒的延迟都花在从服务器下载64KB的文件到客户端上了”，从前面的图也可以看到，基本是比较高速的网络连接，比如伦敦和纽约之间，一个TCP连接要达到最大速度，也需要花上大概225ms。</p></li>
<li><p> 因为前面说的延迟对首个页面访问也是有效的，所以你让什么数据最先被传输就显得非常重要了。Paul Irish在他的演讲<a href="https://docs.google.com/presentation/d/1MtDBNTH1g7CZzhwlJ1raEJagA8qM3uoV7ta6i66bO2M/present#slide=id.g3eb97ca8f_10">“Delivering the Goods”</a>给出的结论是，一个Web应用最开始的 <strong>14kb</strong> 数据是最重要的。</p></li>
</ol>


<p>在足够短的时间窗内完成内容传输（哪怕只是呈现基本的没有数据的layout）的网站，就是响应良好的。这也是为什么对于很多习惯了在服务器端处理数据的软件开发者觉得Javascript很多时候根本没必要用，或者是在很有限的情况下用用就行了。当这些开发者使用的是配置良好的服务器和数据库，又有CDN来做部署和分发时，他们这种感觉会非常明显。</p>

<p>但是，服务器在辅助和加速页面内容的分发和渲染中应该被怎么使用，也是需要根据每个应用场景仔细分析的，绝对不是“把整个页面交给服务器渲染吧”那么简单的事情。在一些情况下，如果页面上的内容对用户并不是非看不可的，就可以不放在第一个响应中返回，而是让客户端在后面的操作中到服务器去取。</p>

<p>比如，有的应用会先把一个&#8221;壳&#8221;页面返回给客户端，然后在这个页面上并发的请求多个部分的数据。这样即使在后台连接速度较慢的情况下，仍然能够有较好的响应速度。还有的应用会把 “<a href="http://www.feedthebot.com/pagespeed/prioritize-visible-content.html">浏览器里面的第一个整屏</a>” 显示的页面做预渲染。</p>

<p>服务器能够根据当前处理的<code>session</code>，用户和URL对脚本和样式文件进行分类也是很重要的。举例来说，用来对订单进行分类的脚本，对于<code>/orders</code>这个URL显然是重要的，而处理&#8221;首选项&#8221;的逻辑的脚本就不那么重要。再比如说，我们可以对CSS样式表进行分类，比如区分“结构性的样式”和“皮肤和模板的样式”等。前面这类很可能对Javascript的正确运行是必须的，因此需要 <em>阻塞</em> 的方式加载， 后面这类则可以用异步的方式加载。</p>

<p>到目前为止，在服务器端处理一部分或者所有的页面，仍然是避免过多客户端与服务器的交互的主要手段。<a href="http://danlec.com/blog/stackoverflow-in-4096-bytes">StackOverflow in 4096 bytes</a>很不错地展示了如何降低和服务器的来回交互次数。作为概念验证的SPA，它理论上可以做到在握手后的第一个TCP连接中完成加载！当然，要做到这些，它使用了<a href="http://www.chromium.org/spdy/link-headers-and-server-hint">SPDY 或者 HTTP/2 server push</a>，因此可以在一个hop里面传输所有客户端可以缓存的代码。</p>

<p><img src="http://lenciel.cn/downloads/images/2014_11/st4k.png" title="StackOverflow clone in 4096 bytes" alt="StackOverflow clone in 4096 bytes" />
图3. 使用了内链CSS和JS技术的<code>Stackoverflow in 4096 bytes</code></p>

<p>如果我们有一个足够灵活的系统，可以在浏览器和服务器直接共享渲染页面的代码（比如双方都是js），并且提供工具增量的加载脚本和样式，那么 <em>网站</em> 和 <em>Web应用</em> 就可以合一而不再是两个模棱两可难以区分的词了：它们本身就有一样的UX要素。比如一个博客页面和一个复杂的CRM，都有URL，都需要跳转，都展示数据，本质上并没有太大不同。即便是像数据表格这样复杂的东西，传统上主要是客户端提供的功能来完成对数据的处理，但也首先需要给用户展示那些需要他处理的数据 。降低客户端和服务器交互的次数，对实现我们说的这样的系统非常重要。</p>

<p>在我看来，我们看到的大量系统上采用了这样那样性能上的权宜之策，是因为整个技术栈的复杂度在不断累加。Javascript和CSS这样的技术是被逐渐加入到系统的，它们的风靡又花了一段时间。尽管有人希望在协议上做出改进，来增强性能（比如SPDY或者QUIC），但应用层显然才是最需要改进的地方。</p>

<p>要理解速度的重要性，去重温一下WWW和HTML创立之初的一些讨论是非常有用的。特别是在1997年提议在HTML里加入<code>img</code>这个标签的时候，Marc Andreessen在<a href="http://1997.webhistory.org/www.lists/www-talk.1993q1/0260.html">下面这个邮件thread</a>里反复强调了提供信息的速度有多么重要： </p>

<blockquote><p>“If a document has to be pieced together on the fly, it could get arbitrarily complex, and even if that were limited, we’d certainly start experiencing major hits on performance for documents structured in this way. This essentially throws the **single-hop principle of WWW** out the door (well, IMG does that too, but for a very specific reason and in a very limited sense) — are we sure we want to do that?”</p></blockquote>


<a name="L2..............................a.name..act-immediately-on-user-input....a."></a>
<h2>2. 对用户输入立刻响应<a name="act-immediately-on-user-input"></a></h2>

<p><strong>TL;DR</strong>: <em>我们可以使用JavaScript来掩盖网络的延迟，把它作为设计原则，就可以在你自己的应用里面去掉绝大多数的<code>spinner</code>或者<code>loading</code>。使用PJAX和TurboLink的话，你就会失去了这些改善用户速度体验的机会。</em>.</p>

<p>TBA</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Correct Django Site Name During DB Migration]]></title>
    <link href="http://lenciel.cn/2014/11/correct-django-site-name-in-sentry/"/>
    <updated>2014-11-02T16:50:40+08:00</updated>
    <id>http://lenciel.cn/2014/11/correct-django-site-name-in-sentry</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/2014_11/sentry_incorrect_site.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<a name="Problem"></a>
<h1>Problem</h1>

<p>就像截图上显示的那样，真正上线过的Django项目都会好像被施放过诅咒一般，让你在某一天看到那个诡异的<code>example.com</code>。</p>

<p>它可能是在系统发出去的重置密码的邮件里面，可能是在Sentry显示的日志里面，也可能就在你用 <code>site_name</code> tag渲染的模板里面。</p>

<p>这个诅咒来自于Django的<a href="https://docs.djangoproject.com/en/1.6/ref/contrib/sites/">sites framework</a>的设计。简单来说，它提供了一个Site对象的<code>manager</code>，来<strong>方便</strong>你用一套代码给多个部署环境使用。换句话说，虽然<code>settings.py</code>文件里面也有一个<code>SITE_NAME</code>，但其实用<code>Site.objects.get_current().name</code>或者是模板里面的<code>site_name</code>取到的不是那个值，而是数据库<code>django_site</code>里面某个<code>site_id</code>对应的Site对象的<code>name</code>。</p>

<p>而如果你<code>syncdb</code>之后没有手工修改过，<code>Site</code>的<code>domain</code>和<code>name</code>都被默认初始化为<code>example.com</code>，这就是问题所在了。</p>

<a name="Solution"></a>
<h1>Solution</h1>

<p>stackoverflow上<a href="http://stackoverflow.com/questions/3430451/using-django-settings-in-templates">得票最高的答案</a>这样把<code>site_name</code>放到<code>response</code>的<code>local()</code>里面或者是直接做个<code>context_processor</code>是可以的。但这样的坏处是完全抛弃了Django自带的<code>sites</code>，需要在用的地方都专门的处理。</p>

<p>如果要继续使用自带的<code>sites</code>，就得自己写类似下面的fixture：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[
</span><span class='line'>  {
</span><span class='line'>    "pk": 1,
</span><span class='line'>    "model": "sites.site",
</span><span class='line'>    "fields": {
</span><span class='line'>      "name": "LeiFun Production",
</span><span class='line'>      "domain": "leifun.net"
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  {
</span><span class='line'>    "pk": 2,
</span><span class='line'>    "model": "sites.site",
</span><span class='line'>    "fields": {
</span><span class='line'>      "name": "LeiFun Stage",
</span><span class='line'>      "domain": "stage.leifun.net"
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  {
</span><span class='line'>    "pk": 3,
</span><span class='line'>    "model": "sites.site",
</span><span class='line'>    "fields": {
</span><span class='line'>      "name": "LeiFun Test",
</span><span class='line'>      "domain": "test.leifun.net"
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>
</span><span class='line'>  {
</span><span class='line'>    "pk": 4,
</span><span class='line'>    "model": "sites.site",
</span><span class='line'>    "fields": {
</span><span class='line'>      "name": "LeiFun Local Dev",
</span><span class='line'>      "domain": "yawp.dev:8000"
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<p>然后在部署的环境里面用<code>django_admin.py</code>或者<code>manage.py</code>运行<code>loaddata</code>。这样的坏处是<code>fixture</code>这东西本来主要是给本地测试生成mock数据的，所以<code>syncdb</code>命令其实不会发起fixture的导入，于是很多时候你部署了新版本之后，会忘记重新导入<code>fixture</code>（其实本来也不该导入fixture)，牛皮癣一样的<code>example.com</code>又回来了。</p>

<a name="Solution.2"></a>
<h1>Solution 2</h1>

<p>通过修改某个现成app的<code>Migration</code>类的<code>forwards</code>方法，强制它读取一次<code>settings</code>文件里面的配置项：</p>

<pre><code class="python">class Migration(DataMigration):

    def forwards(self, orm):
        Site = orm['sites.Site']
        site = Site.objects.get(id=settings.SITE_ID)
        site.domain = settings.DOMAIN_NAME
        site.name = settings.SITE_NAME
        site.save()
</code></pre>

<p>这样一来，就可以在<code>syncdb</code>的时候刷新<code>django_site</code>这张表的配置。</p>

<a name="Solution.Finally"></a>
<h1>Solution Finally</h1>

<p>在Django 1.7里面，这个倒霉的设计<a href="https://docs.djangoproject.com/en/dev/ref/contrib/sites/?from=olddocs">终于被改掉了</a>。</p>

<blockquote><p>To enable the sites framework, follow these steps:</p><p>1. Add &#8216;django.contrib.sites&#8217; to your INSTALLED_APPS setting.<br/>2. Define a SITE_ID setting<br/>3. Run migrate.</p><p>django.contrib.sites registers a post_migrate signal handler which creates a default site named example.com with the domain example.com. This site will also be created after Django creates the test database. To set the correct name and domain for your project, you can use a data migration.</p></blockquote>


<p>不但如此，Django 1.7 还引入了<code>django.contrib.sites.middleware.CurrentSiteMiddleware</code>， 如果启用，就可以直接使用<code>request.site</code>而不需要在你的<code>view</code>里面自己去调用<code>site = Site.objects.get_current()</code>了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[聚散有期]]></title>
    <link href="http://lenciel.cn/2014/09/no-happy-ending/"/>
    <updated>2014-09-22T04:20:15+08:00</updated>
    <id>http://lenciel.cn/2014/09/no-happy-ending</id>
    <content type="html"><![CDATA[<p><img alt="block" src="http://lenciel.cn/downloads/images/2014_09/death_words.jpg" style="margin:5px;width:40%" align="left" />上周参加了偶像派她爷爷的90大寿，这周就迎来了她另一位爷爷离世的消息。</p>

<p>这位爷爷是我丈母娘保娘(干妈)的老伴，在一场事后被认为是回光返照的愉快聊天后，他独自在卧室睡去，再也没有醒来。</p>

<p>在睡梦中安静的走掉，再加上93岁的高寿，所以我们当然会互相安慰说，不用太伤心，这是寿终正寝。</p>

<p>但一讲起还没有走的婆婆，大家又会忍不住担心起来。</p>

<p>爷爷从不做农活，也不做家务，每天就喝茶打牌养养鸽子。几十年这么被惯着，不但离了婆婆连饭都不会做，甚至连面都不会下。我没有问过他选择这样生活的原因：也许是当年参加抗美援朝，在那片遥远的冰天雪地耗尽了所有的力气吧。</p>

<p>他们也一直没有孩子。</p>

<p>我们每年会去很多次他们在敖平乡下的家，给他们带些粮油和现金。</p>

<p>每次婆婆知道我们要去，就提前到地里掐好自己种的菜，捡好自己养的鸡下的蛋。等我们到了，就一直在厨房里忙活。有时候天气好，我们就把桌子搬到屋外的院子里面，每个人倒一点儿酒慢慢的喝着边吃边等她在厨房忙完上桌。</p>

<p>那时候她已经八十多岁了。</p>

<p>因为牙齿不好，胃口也开始变差。所以大多数时候，她只不过象征性的吃一点儿，就点上一根烟，带着满足的笑容坐在一旁听我们聊天。她很少说话，听到开心的地方，就拿起酒杯微微地抿一口。</p>

<p>在汶川地震之后，他们村里的人被集中安置居住时，他们又选择了留守。四周的邻居逐渐搬走，岳父岳母也去劝过他们和大家一起搬走好有个照应，但他们拒绝了。</p>

<p>更不要说搬来和我们一起住。</p>

<p>据说理由是在自己地里忙活了一辈子，何必要在别的地方去死。</p>

<p>是啊，人到了一定年纪，在哪里死去终于变成一件迫在眉睫的事情。</p>

<p>不知道从哪次去的时候开始，婆婆就已经忙活不动了。大家好像也没有商量过什么，就默默变成我们开车带他们去镇上的饭馆吃一顿，然后送他们回去。</p>

<p>这过程自然比以前要快了不少，每次告别，我都能看出婆婆眼中的不舍：她是个特别重感情的人。</p>

<p>爷爷走了，她反复告诉岳母：“把那些钱拿去好好把事情办了，剩下几千块钱留给我就行了。”</p>

<p>“反正我十一之后就走了”，她这么说。</p>

<p>大家都不停劝她想开一些，但我们都知道她的倔强。</p>

<p>就好像她本来身体比爷爷要差，但一直倔强地撑着，大概她知道自己走了就没人能像自己一样照顾他。</p>

<p>坦白说，他们的感情既让我敬佩，也常常让我疑惑。</p>

<p>有时候我看着婆婆，会想，她有没有偶尔也后悔过没有一个完整的家庭？和爷爷这样的男人厮守到老，是因为依恋，犹豫，认命，还是别的什么东西？</p>

<p>但仔细想想，可能也没有需要特别努力的地方。</p>

<p>反正人生里美好的不过是一些片断：在某个午后踢球赢了比自己更强的对手，夏天很热的时候吃到冰箱里拿出的熟得正好的西瓜，放肆地看着暗恋的对象她/他也正好看着你，跟相爱的人一起度过没人打扰的夜晚，甚至，没有充满恐惧而是在睡梦中平静死去也是美好的。</p>

<p>能抓住它们就好，别的东西我们自己大概很难掌握。</p>

<p>这也是人类到了一定年纪就拒绝去相信纯粹的东西可以持久的原因。毕竟我们这一生会丢失很多东西：首先是理想主义，然后是激情，接下来是容貌和身材，最后是有趣味的生活。想要保持点什么贯穿始终的东西如此不易，倒不如先否认这些需要认真照看的东西，可以让自己生活得容易一些，死的时候也不会太艰难。</p>

<p>记性太好也是需要移除的错误天赋。就好比记得越牢的号码，变成“您拨打的电话无人接听”的那天就越不堪，还不如记错或者干脆忘得一干二净。</p>

<p>也可以给大家都想个理由，就好像张爱玲写她等胡兰成：“雨声潺潺，像住在溪边。宁愿天天下雨，以为你是因为下雨不来。”</p>

<p>该忘记的忘记，剩下的也糊涂些为好。最好还能幽默一些，强势一些，牙尖嘴利地把自己包裹起来生人勿近。</p>

<p>就好像也在这个月刚刚过世的Joan Rivers说：&#8221;My sex life is so bad, my G-spot has been declared a historical landmark.&#8221;</p>

<p>反正，这世界聚散有期，又有几个人在意这些牙尖嘴利的人真正的心思呢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[T-shirt Testing]]></title>
    <link href="http://lenciel.cn/2014/09/logo-test/"/>
    <updated>2014-09-03T01:04:48+08:00</updated>
    <id>http://lenciel.cn/2014/09/logo-test</id>
    <content type="html"><![CDATA[<p>感受一下，哪个印出来比较好看呢&hellip;</p>

<p><img src="http://lenciel.cn/downloads/images/2014_09/logo1.png" title="Don't touch me..." alt="Vhost threshold" />
<img src="http://lenciel.cn/downloads/images/2014_09/logo2.png" title="Don't touch me..." alt="Vhost threshold" />
<img src="http://lenciel.cn/downloads/images/2014_09/logo3.png" title="Don't touch me..." alt="Vhost threshold" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update Android Sdk With Shadowsocks Proxy]]></title>
    <link href="http://lenciel.cn/2014/09/update-android-sdk-with-proxy/"/>
    <updated>2014-09-02T02:30:35+08:00</updated>
    <id>http://lenciel.cn/2014/09/update-android-sdk-with-proxy</id>
    <content type="html"><![CDATA[<p>博格坎普说，我们android项目的build挂了。</p>

<p>去Jenkins看了一下，日志里面的错误是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[android] $ /usr/local/share/gradle-1.11/bin/gradle clean build
</span><span class='line'>Creating properties on demand (a.k.a. dynamic properties) has been deprecated and is scheduled to be removed in Gradle 2.0. Please read http://gradle.org/docs/current/dsl/org.gradle.api.plugins.ExtraPropertiesExtension.html for information on the replacement for dynamic properties.
</span><span class='line'>Deprecated dynamic property: "buildName" on "ProductFlavorDsl_Decorated{name=main, minSdkVersion=null, targetSdkVersion=null, renderscriptTargetApi=-1, renderscriptSupportMode=null, renderscriptNdkMode=null, versionCode=-1, versionName=null, applicationId=null, testApplicationId=null, testInstrumentationRunner=null, testHandleProfiling=null, testFunctionalTest=null, signingConfig=null, resConfig=null}", value: "1.0.97".
</span><span class='line'>
</span><span class='line'>FAILURE: Build failed with an exception.
</span><span class='line'>
</span><span class='line'>* What went wrong:
</span><span class='line'>A problem occurred configuring project ':app'.
</span><span class='line'>&gt; Could not resolve all dependencies for configuration ':app:_debugCompile'.
</span><span class='line'>   &gt; Could not find com.android.support:appcompat-v7:20.0.0.
</span><span class='line'>     Required by:
</span><span class='line'>         android:app:unspecified
</span><span class='line'>
</span><span class='line'>* Try:
</span><span class='line'>Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.s</span></code></pre></td></tr></table></div></figure>


<p>这其实在天朝是蛮常见的现象，因为<code>dl-ssl.google.com</code>被封了，所以你总是会因为下面的错误无法更新Android的SDK：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Failed connect to dl-ssl.google.com:443<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Jenkins....................."></a>
<h2>Jenkins服务器配置代理</h2>

<p>这里之所以选择<a href="http://shadowsocks.org/">shadowsocks</a>，是因为可以用自己在<a href="https://developers.google.com/appengine/">Google的VM</a>上配置的shadowsocks代理服务器（顺便广告一下，Google的VM在做活动，几乎是最高配的机器都不要钱，而且第一跳就在美帝，用来做代理非常爽）。</p>

<p>安装shadowsocks的pythohn client:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pip install shadowsocks
</span><span class='line'>
</span><span class='line'>Downloading/unpacking shadowsocks
</span><span class='line'>  Running setup.py egg_info <span class="k">for</span> package shadowsocks
</span><span class='line'>
</span><span class='line'>    warning: manifest_maker: MANIFEST.in, line 1: <span class="s1">&#39;recursive-include&#39;</span> expects &lt;dir&gt; &lt;pattern1&gt; &lt;pattern2&gt; ...
</span><span class='line'>
</span><span class='line'>Installing collected packages: shadowsocks
</span><span class='line'>  Running setup.py install <span class="k">for</span> shadowsocks
</span><span class='line'>
</span><span class='line'>    warning: manifest_maker: MANIFEST.in, line 1: <span class="s1">&#39;recursive-include&#39;</span> expects &lt;dir&gt; &lt;pattern1&gt; &lt;pattern2&gt; ...
</span><span class='line'>
</span><span class='line'>    Installing sslocal script to /usr/local/bin
</span><span class='line'>    Installing ssserver script to /usr/local/bin
</span><span class='line'>Successfully installed shadowsocks
</span><span class='line'>Cleaning up...
</span></code></pre></td></tr></table></div></figure>


<p>可以看到安装完之后有两个可执行文件，运行其中的<code>sslocal</code>就可以启动shadowsocks的客户端了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@palm4fun-core-1:~/install# sslocal -h
</span><span class='line'>usage: sslocal <span class="o">[</span>-h<span class="o">]</span> -s SERVER_ADDR <span class="o">[</span>-p SERVER_PORT<span class="o">]</span>
</span><span class='line'>               <span class="o">[</span>-b LOCAL_ADDR<span class="o">]</span> <span class="o">[</span>-l LOCAL_PORT<span class="o">]</span> -k PASSWORD <span class="o">[</span>-m METHOD<span class="o">]</span>
</span><span class='line'>               <span class="o">[</span>-t TIMEOUT<span class="o">]</span> <span class="o">[</span>-c CONFIG<span class="o">]</span> <span class="o">[</span>--fast-open<span class="o">]</span> <span class="o">[</span>-v<span class="o">]</span> <span class="o">[</span>-q<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>optional arguments:
</span><span class='line'>  -h, --help            show this <span class="nb">help </span>message and <span class="nb">exit</span>
</span><span class='line'>  -s SERVER_ADDR        server address
</span><span class='line'>  -p SERVER_PORT        server port, default: 8388
</span><span class='line'>  -b LOCAL_ADDR         <span class="nb">local </span>binding address, default: 127.0.0.1
</span><span class='line'>  -l LOCAL_PORT         <span class="nb">local </span>port, default: 1080
</span><span class='line'>  -k PASSWORD           password
</span><span class='line'>  -m METHOD             encryption method, default: aes-256-cfb
</span><span class='line'>  -t TIMEOUT            timeout in seconds, default: 300
</span><span class='line'>  -c CONFIG             path to config file
</span><span class='line'>  --fast-open           use TCP_FASTOPEN, requires Linux 3.7+
</span><span class='line'>  -v, -vv               verbose mode
</span><span class='line'>  -q, -qq               quiet mode, only show warnings/errors
</span><span class='line'>
</span><span class='line'>Online <span class="nb">help</span>: &lt;https://github.com/clowwindy/shadowsocks&gt;
</span></code></pre></td></tr></table></div></figure>


<p>最简单的办法就是新建一个配置文件：</p>

<figure class='code'><figcaption><span>~/.shadowconfig</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;server&quot;</span><span class="o">:</span><span class="s2">&quot;my_server_ip&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;server_port&quot;</span><span class="o">:</span><span class="mi">8388</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;local_port&quot;</span><span class="o">:</span><span class="mi">1080</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;password&quot;</span><span class="o">:</span><span class="s2">&quot;barfoo!&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;timeout&quot;</span><span class="o">:</span><span class="mi">600</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;method&quot;</span><span class="o">:</span><span class="s2">&quot;table&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>记得在防火墙打开你配置的本地端口，然后运行下面的命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@palm4fun-core-1:~/install# sslocal -c ~/.shadowconfig
</span><span class='line'>INFO: loading config from /root/.shadowconfig
</span><span class='line'>shadowsocks 2.1.0
</span><span class='line'>2014-09-02 00:27:53 INFO     starting <span class="nb">local </span>at 127.0.0.1:1080
</span></code></pre></td></tr></table></div></figure>


<a name="L...............android.sdk"></a>
<h2>命令行更新android sdk</h2>

<p>先配置java命令使用的代理，然后
从命令行更新android sdk。只需要到tools目录下面去跑(<code>-u</code>是不显示GUI，<code>-s</code>是指定不使用ssl链接)：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">_JAVA_OPTIONS</span><span class="o">=</span><span class="s2">&quot;-DsocksProxyHost=127.0.0.1&quot;</span>
</span><span class='line'><span class="nv">$ </span>android update sdk -u -s --all
</span></code></pre></td></tr></table></div></figure>


<p>注意<code>socksProxyHost</code>的默认端口就是1080，如果你使用了其他端口不能只配ip。</p>

<p>另外，<code>--all</code>是比较猛烈的选项（人家的硬盘就是大，人家的代理就是快嘛），你可以在命令行里面通过filter来安装你需要的东西。</p>

<a name="When.shit.happens"></a>
<h2>When shit happens</h2>

<p>运行起来之后更新非常慢，可以<code>android</code>命令报timeout，而代理那边打出日志：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>2014-09-02 00:27:53 INFO     starting <span class="nb">local </span>at 127.0.0.1:1080
</span><span class='line'>2014-09-02 00:28:04 INFO     connecting 74.125.237.1:80
</span><span class='line'>2014-09-02 00:28:04 INFO     connecting 74.125.237.1:80
</span><span class='line'>2014-09-02 00:28:04 INFO     connecting 74.125.237.1:80
</span></code></pre></td></tr></table></div></figure>


<p>因为本座平时上网也是在用Google VM上的这个代理，没理由这么慢。所以就怀疑那个74.125.237.1的地址是被谁在<code>/etc/hosts</code>里面给配了固定ip。打开一看果然有：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dl-ssl.google.com 74.125.237.1
</span></code></pre></td></tr></table></div></figure>


<p>估计是之前配置的基友搜索到了类似<a href="http://www.programering.com/a/MjM4YTMwATA.html">这样的文章</a>。这也是为什么我从来不用也不推荐别人用修改hosts文件的方法来翻墙的原因：它们总是在过期。</p>

<p>Last but not the least, Fuck you, GFW.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[疤]]></title>
    <link href="http://lenciel.cn/2014/09/everybody-hurts/"/>
    <updated>2014-09-01T03:38:50+08:00</updated>
    <id>http://lenciel.cn/2014/09/everybody-hurts</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/2014_09/choose_who_to_let_in.jpg" title="Be careful to choose..." alt="careful to choose" /></p>

<p>一个朋友最近跟我说，想去把伤口结痂留下的疤痕用液氮处理一下。</p>

<p>这是我第一次听说除开激光这种“极热”之外，还可以在人的身上用这种“极冻”的方式祛疤。</p>

<p>不过，虽然是听起来非常激烈的方式，大概多少也得吃点儿苦头，但能顺利把身上的疤去掉，总是好的。</p>

<p>相比之下，心头的疤就没有那么容易弄掉了：8月28日，孙仲旭老师因为抑郁症自杀辞世的新闻曝出，着实让我心里面咯噔了一下。</p>

<p>这离Robin Williams抑郁而终不过两个多星期。</p>

<p>《1984》、《动物庄园》、《麦田里的守望者》和耶茨的很多小说，其实之前就看过。但后来因为看了孙仲旭老师翻译的《麦田里的守望者》，就把他其他的译作都翻来看了。</p>

<p>现在想来，从他翻译目标的选择来看，本身就是一个很不快乐的人吧。</p>

<p>当然，这很正常。</p>

<p>人虽然从出生开始，都无非是走在通向死亡的道路之上，但每个人经历的过程和心中的念想却大不相同。</p>

<p>有的人很幸运，出生在和谐的家庭，从小就完整地见证过快乐是什么，长大后也顺风顺水，对人生有自己明确的诉求。</p>

<p>而有的人，只见到过碎片一样的生活，自己从来不明白自己活着是需要什么，又能给别人提供什么。</p>

<p>不但如此，还会对那些把幸福或者是快乐挂在嘴边的人呲之以鼻：因为从心底质疑它们是否真的存在。</p>

<p>正是有《麦田里的守望者》这样的小说，正是有Robin Williams这样的演员，正是有孙仲旭老师这样的译者，才让后面这种人明白，自己不是什么奇奇怪怪的东西：原来还有很多人都这样活着，或者是这样活过。</p>

<p>而偏偏也是他们选择了自戕，仿佛在提醒大家：你看，就算知道有这么多人这样活着，我也不知道如何是好。</p>

<p>我想他们不是没有放胆让那些温暖的人走进自己内心，也感受过幸福和快乐。但要习得<a href="http://lenciel.cn/2014/04/rip-marquez/">孤独与爱</a>的要义实在是太难。更何况，抑郁并不仅仅是心理上的问题而已。</p>

<p>最后，摘一段献给孙仲旭老师，Wish you rest in peace：</p>

<blockquote><p>“我知道他死了！你以为我不知道？但是我仍然可以喜欢他，行吗？就因为这人死了，你不可能马上不再喜欢他了，岂有此理 —— 特别当这个人比你认识的活人要好上一千倍时。”</p><footer><strong>《麦田里的守望者》</strong></footer></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Complex Your Python Project Is?]]></title>
    <link href="http://lenciel.cn/2014/08/how-complex-your-python-project-is/"/>
    <updated>2014-08-31T21:04:47+08:00</updated>
    <id>http://lenciel.cn/2014/08/how-complex-your-python-project-is</id>
    <content type="html"><![CDATA[<p>最近诸事不顺，却也理所应当。</p>

<p>晚间时段迷上写字和画画，大概是因为之前看<a href="http://www.imdb.com/title/tt0460740/">《Cashback》</a>印象太深刻，觉得这些是美好遗失前力挽狂澜的技艺。</p>

<p>除开纸上涂鸦，还用机器画了不少鸡零狗碎的东西：我想用python画点儿T恤图案，印出来送给大家，给大伙儿同时也给自己打打气。</p>

<p>一开始看中了基于<a href="http://www.graphviz.org/">Graphviz</a>的<a href="http://furius.ca/snakefood/">Snakefood</a>。</p>

<p>最开始接触Graphviz是因为<a href="https://github.com/django-extensions/django-extensions">django-extensions</a>项目用它来画django model的<a href="https://code.djangoproject.com/wiki/DjangoGraphviz">关系图</a>。我们用它冒充ER图，拿去跟那些喜欢看文档但其实又不专业的官僚客户们交差。</p>

<p>Snakefood更进一步，通过分析你的代码依赖，从而得出你代码的“复杂度”。</p>

<p>“复杂度”其实是用“代码行数”衡量码农工作效力被普遍吐槽之后，大公司发明出来折腾工程师的诸多metrics里面还算有点儿用的一个：至少你可以让要接手的人看看这项目大概是个什么规模，以及，大概要挠破几寸头皮才能看懂。</p>

<p>当然，Snakefood这种基于文件依赖的复杂度分析其实不算特别靠谱，这可不是什么<a href="https://en.wikipedia.org/wiki/Cyclomatic_complexity">Cyclomatic complexity</a>，更像是开飞机的时候边排查“事故征兆”边驾驶的辅助工具。作者自己是这么说的：</p>

<blockquote><p>Producing pretty graphs is fun, but I found the most leverage of it when I try to make my code simpler, I generate the graph and inspect unexpected dependencies and try to refactor my code to simply the dependency graph as much as possible.</p><footer><strong>Martin Blais</strong></footer></blockquote>


<p>下面是本座心目中永远的&#8221;优雅Python代码第一名&#8221;<a href="http://docs.python-requests.org/en/latest/">Requests</a>的分析结果：</p>

<p><img src="http://lenciel.cn/downloads/images/2014_08/requests.png" title="requests dependencies" alt="requests" /></p>

<p>再来看看<a href="https://github.com/django/django">Django</a>的最新版分析结果：</p>

<p><img src="http://lenciel.cn/downloads/images/2014_08/django.png" title="django dependencies" alt="django" /></p>

<p>下面是本座最近撸完的一个项目，印到衣服上感觉还好吧：
<img src="http://lenciel.cn/downloads/images/2014_08/yawp.png" title="yawp dependencies" alt="yawp" /></p>

<a name="L......"></a>
<h2>结论</h2>

<p>首先，本座挺喜欢Snakefood那种Unix范儿的：所有的命令都可以给其他命令来一管，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sfood ./src <span class="p">|</span> sfood-graph -p <span class="p">|</span> dot -Tps <span class="p">|</span> pstopdf -i -o ./1.pdf
</span></code></pre></td></tr></table></div></figure>


<p>其次，本座开始计划是给每个人生成一个他们自己写的模块的依赖图，印到衣服上让大家自己穿。但试了之前几个项目之后，Hmmmm&hellip;有的同学大概是不会愿意的吧&hellip;</p>

<p>最后，T恤计划也没这么就打住：后来又发现了<a href="http://nodebox.net/">nodebox</a>这种真正是拿来搞艺术的玩意儿，于是要生成一点儿敢往自己胸口放的东西变得方便多了，过两天如果公司没有倒闭，就把东西放出来让大家看看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[突然事件]]></title>
    <link href="http://lenciel.cn/2014/08/but-does-it-flow/"/>
    <updated>2014-08-21T03:54:13+08:00</updated>
    <id>http://lenciel.cn/2014/08/but-does-it-flow</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/2014_08/just_let_it_go.jpg" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>葛明走了之后，我们去火葬场送他。</p>

<p>他在关好门窗的卧室里点燃了一盆木炭，静悄悄走掉了。</p>

<p>最先发现他的是跟他住一起的他母亲。她说，一圈木炭排在火盆里，大头向上，小头向下，整整齐齐。另外，他还专门喝了安眠药，所以没有一般烧炭者因为气促造成的痉挛表情。</p>

<p>这就是他的风格，做什么都计划详实，控制精准，旁人既无法预知，更无法阻挡。</p>

<p>“他不但表情很安详，而且碳氧血红蛋白让他全身都变成了樱桃红色，看起来就像个刚出生那天一样。”</p>

<p>“阿姨，你……”，我听到他妈妈这样说的时候有些不知道该怎么接话。</p>

<p>“别怕，我没疯”，她抹了一把眼泪，“只不过阿姨我退休之前是个法医。”</p>

<p>那天的确有很多眼泪，大家说的最多是，这太突然。</p>

<p>但我觉得不奇怪。的确，葛明是我们中间最幽默的人。不过，活到我这把年纪，已经明白那些让别人发笑的人，不过是把这技能当成保护自己内心世界的硬壳而已。和大多数动不动就要哭死在你面前的朋友相比，他们心门紧锁，难以真正亲近。</p>

<p>即便是像我们这样的关系，他也只说起过几次他的烦恼。</p>

<p>一次是他请我去他家吃饭，说想让我帮忙。</p>

<p>“我在找方便好用的热敷袋。要求很简单，一个人操作起来要很方便，什么部位用起来都很方便，什么时候想用热起来要很方便，还有，不要太丑”。</p>

<p>“最后一个要求表明，你是要送人吧？”</p>

<p>他只是笑，带我去看书房里面满屋子奇形怪状的物件。</p>

<p>“别人都说淘宝上什么都有得卖，但是我买回来试了好多，都没有特别满意的。”</p>

<p>我看了看，基本都还是进口货。</p>

<p>“如果说有热敷袋里的战斗机，那我好像就身处一个军事机场了，所以感觉帮不上什么忙了。”</p>

<p>“我已经大概决定哪几个比较好了，我是要你帮忙把我不要的带走几个。”</p>

<p>后来我听说，葛明给我们这帮人每人送了几个热敷袋。我们现在也不知道，他满意的那些究竟和我们手上的这些有什么不一样。</p>

<p>还有一次，是他叫我出去喝酒。喝到一半，他递给我他的手机，看一个什么“女神男神体重表”。</p>

<p>“你看，我是男神。”</p>

<p>“这谁给你发的？”</p>

<p>“是给我发的最后一条消息。”</p>

<p>“那你为什么不回呢？这不是一个很不错的开始聊天的话题吗？”</p>

<p>“因为是之前答应要发给我这个，但发之前，就说了以后不要再联系了。”</p>

<p>“那就不回了？我以为你的风格是永远最后挂电话，永远回最后一条的。”</p>

<p>“嗯，不回是因为会希望一直没有收到过这个。”</p>

<p>“为什么呢？”</p>

<p>“因为一旦收到，就会有&#8217;我答应你的事情已经办完了从此我们就没有关系了&#8217;的感觉冒出来，就好像我自己站在被封起来的纸箱里面，看到胶条把最后那点儿缝隙盖起来了一样。所以不知道怎么回，也宁愿一直没有收到。”</p>

<p>我最后一次见到他，是在商场碰巧遇见他在挑榨汁机。他拿着说明书，对导购小姐说：</p>

<p>“你看，上面写着：使用后立即清洁，就容易清洁。”</p>

<p>“是的，先生。”</p>

<p>“然后后面几页，它又写着：榨汁后应立即饮用。如果汁液在空气中暴露一段时间，就会变味并失去营养价值。”</p>

<p>“是的，先生。”</p>

<p>“那我每次榨完汁，究竟应该立即去清洗，还是应该立即去饮用果汁呢？”</p>

<p>他问完这个问题，我和导购小姐都笑了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shadowsocks on Google Compute Engine]]></title>
    <link href="http://lenciel.cn/2014/08/shadowsocks-on-google-compute-engine/"/>
    <updated>2014-08-17T21:55:44+08:00</updated>
    <id>http://lenciel.cn/2014/08/shadowsocks-on-google-compute-engine</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Migration in Django 1.7 (2)]]></title>
    <link href="http://lenciel.cn/2014/08/django-1-dot-7-migrations-part-2/"/>
    <updated>2014-08-11T03:59:47+08:00</updated>
    <id>http://lenciel.cn/2014/08/django-1-dot-7-migrations-part-2</id>
    <content type="html"><![CDATA[<p>在应用开发的过程中，我们会遇到migration主要分为：</p>

<ol>
<li>Schema Migrations：数据库schema的变化，也就是我们前面<a href="http://lenciel.cn/2014/08/django-1-dot-7-migrations/">讨论的内容</a></li>
<li>Data Migrations：数据的变化，比如需要批量变更数据或者备份在其他地方的历史数据</li>
</ol>


<p>第二种是没法敲几条命令让Django自动帮你完成其他的事情的，而是需要手动使用<code>RunPython</code>，这里具体说一下做法。</p>

<p>还是以之前的那个项目来作为例子，我们首先创建一个migration file：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python manage.py makemigrations --empty ts_data
</span><span class='line'>
</span><span class='line'>Migrations <span class="k">for</span> ts_data:
</span><span class='line'>  0003_auto_20140811_0110.py:
</span></code></pre></td></tr></table></div></figure>


<p>它的内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">unicode_literals</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span><span class="p">,</span> <span class="n">migrations</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Migration</span><span class="p">(</span><span class="n">migrations</span><span class="o">.</span><span class="n">Migration</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">(</span><span class="s">&#39;ts_data&#39;</span><span class="p">,</span> <span class="s">&#39;0002_auto_20140805_1525&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">operations</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们在里面加入一个<code>RunPython</code>的部分，来导入数据：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">unicode_literals</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span><span class="p">,</span> <span class="n">migrations</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">ts_data.models</span> <span class="kn">import</span> <span class="n">PingPongPrice</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">load_data</span><span class="p">(</span><span class="n">apps</span><span class="p">,</span> <span class="n">schema_editor</span><span class="p">):</span>
</span><span class='line'>    <span class="n">PingPongPrice</span><span class="p">(</span><span class="n">date</span><span class="o">=</span><span class="n">date</span><span class="p">(</span><span class="mi">2014</span><span class="p">,</span><span class="mo">07</span><span class="p">,</span><span class="mi">29</span><span class="p">),</span>
</span><span class='line'>         <span class="n">price</span><span class="o">=</span><span class="mf">12.00</span><span class="p">,</span>
</span><span class='line'>         <span class="p">)</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>    <span class="n">PingPongPrice</span><span class="p">(</span><span class="n">date</span><span class="o">=</span><span class="n">date</span><span class="p">(</span><span class="mi">2014</span><span class="p">,</span><span class="mo">01</span><span class="p">,</span><span class="mi">29</span><span class="p">),</span>
</span><span class='line'>         <span class="n">price</span><span class="o">=</span><span class="mf">8.00</span><span class="p">,</span>
</span><span class='line'>         <span class="p">)</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Migration</span><span class="p">(</span><span class="n">migrations</span><span class="o">.</span><span class="n">Migration</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">(</span><span class="s">&#39;ts_data&#39;</span><span class="p">,</span> <span class="s">&#39;0002_auto_20140805_1525&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">operations</span> <span class="o">=</span> <span class="p">[</span><span class="n">migrations</span><span class="o">.</span><span class="n">RunPython</span><span class="p">(</span><span class="n">load_data</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你觉得：咦，这样导入数据不是有点儿像用<code>syncdb</code>然后导入<code>fixture</code>么？的确，从效果上它们是一样的，个人觉得，对于测试环境我们可以继续使用fixture来保存mock的测试数据，然后使用<code>loaddata</code>命令手动加载测试数据。对生产环境使用migration来导入数据更好，和使用<code>loaddata</code>命令来导入fixture相比，它不需要手动操作，并且由于是通过<code>RunPython</code>来进行，实际上可以对数据进行各种需要的处理。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何不正确的殴打企鹅]]></title>
    <link href="http://lenciel.cn/2014/08/how-to-beat-the-penguin/"/>
    <updated>2014-08-09T20:32:58+08:00</updated>
    <id>http://lenciel.cn/2014/08/how-to-beat-the-penguin</id>
    <content type="html"><![CDATA[<p>今天在微信朋友圈里面看了20来条这游戏的成绩分享，还有的群开始讨论心得。打开链接一看，原来是当年那个小范围流行了一下的<a href="https://www.google.com/search?q=Penguin+Ball&amp;oq=Penguin+Ball&amp;aqs=chrome..69i57j69i60.972j0j4&amp;sourceid=chrome&amp;es_sm=91&amp;ie=UTF-8">Penguin Ball</a>嘛（我记得后来有些人开始玩那个<a href="http://www.bloody-penguin.com/">血腥版</a>，正常人就慢慢不玩这游戏了）。</p>

<p>不过，链接指向的那山寨游戏虽然没有再用flash，但是对手势事件的处理有问题（他们还是挺<a href="http://game.2sky.cn/js/52/index.js">大方的</a>），所以确实还蛮难的：我打了五六次，最好成绩6000多一点。</p>

<p>然后，那个页面除开嵌入了一个“教你如何调情”的广告之外，一直在不停的要你分享，分享，分享&hellip;&hellip;</p>

<p>那我就分享嘛~~~</p>

<p>去看了一下微信的分享是怎么弄出去的，原来有个非官方的叫<code>WeixinJSBridge</code>的东西：只要是通过微信应用内置的Webview打开的网页就可以调用到一组特别的接口，比如分享链接到朋友圈或者发送链接给朋友。这两个接口的参数非常类似：</p>

<ul>
<li>分享链接消息里面的title image的url</li>
<li>title image的宽度和高度</li>
<li>标题</li>
<li>描述</li>
<li>链接指向的url</li>
<li>微信APPID</li>
</ul>


<p>分享出来的链接，以这个“打企鹅”的游戏为例，是长成下面这样子的一条链接消息：</p>

<p><img src="http://lenciel.cn/downloads/images/2014_08/wechat_share_msg.jpg" title="Don't touch me..." alt="Wechat Message" /></p>

<p>所以，要伪装一个“打企鹅”的高分数链接就只需要找到title image的url和链接指向的url（因为标题和描述照着编就是了）。</p>

<p>本座觉得，那么山寨的游戏作者，肯定是把所有的东西都放在页面上的吧，于是用Chrome打开了那个页面，果然没有被拒绝（一般来说，给微信浏览的页面至少应该根据访问上报的user-agent等参数判断它是不是移动设备浏览的，如果不是应该reject），并且源码里面我想要的都在（所以比较敏感的js什么的minify一下会好一些）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="kd">var</span> <span class="nx">mebtnopenurl</span> <span class="o">=</span> <span class="s1">&#39;http://game.2sky.cn/game/&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">rankurl</span> <span class="o">=</span> <span class="nx">mebtnopenurl</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">dataForWeixin</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;appId&quot;</span><span class="o">:</span> <span class="s2">&quot;wx60c8c12f639f3ef4&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;imgUrl&quot;</span><span class="o">:</span> <span class="s2">&quot;http://game.2sky.cn/vapp/52/3.jpg&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;url&quot;</span><span class="o">:</span> <span class="s2">&quot;http://bingkafei.hnsdcpa.com/game/52/&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;tTitle&quot;</span><span class="o">:</span> <span class="s2">&quot;打企鹅-6e游戏&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;tContent&quot;</span><span class="o">:</span> <span class="s2">&quot;打企鹅-6e游戏&quot;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">dataForWeixin</span><span class="p">.</span><span class="nx">appId</span> <span class="o">=</span> <span class="s2">&quot;wx8820cdf5db680ffa&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">dataForWeixin</span><span class="p">.</span><span class="nx">url</span> <span class="o">=</span> <span class="s2">&quot;http://weiapp.552200.com/game/&quot;</span><span class="o">+</span><span class="nx">_con</span><span class="p">[</span><span class="s2">&quot;num&quot;</span><span class="p">]</span><span class="o">+</span><span class="s2">&quot;/&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">dp_share</span><span class="p">(){</span>
</span><span class='line'>        <span class="nb">document</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span><span class="s2">&quot;你简直霸气侧漏，把企鹅击飞出&quot;</span><span class="o">+</span><span class="nx">myData</span><span class="p">.</span><span class="nx">scoreName</span><span class="o">+</span><span class="s2">&quot;，谁还能超越我？&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;share&quot;</span><span class="p">).</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">dataForWeixin</span><span class="p">.</span><span class="nx">tTitle</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">title</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，拿到这些了之后，也不是马上一句：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">WeixinJSBridge</span><span class="p">.</span><span class="nx">invoke</span><span class="p">(</span><span class="s1">&#39;shareTimeline&#39;</span><span class="p">,</span><span class="nx">data</span><span class="p">,</span><span class="nx">callback</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>就能把你装神弄鬼消息分享出去的。前面说了，微信那边还是会检查整个事情是不是发生在微信内置的webview里面。但是，要绕开也不是那么麻烦，你懂的&hellip;</p>

<p>总体感觉微信的这api还是挺扯的，本来可以作为身份校验的appid其实填不填也无所谓，所以朋友圈里面的链接点起来还是谨慎一点儿吧，骚年们。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Migration in Django 1.7 (1)]]></title>
    <link href="http://lenciel.cn/2014/08/django-1-dot-7-migrations/"/>
    <updated>2014-08-05T11:12:41+08:00</updated>
    <id>http://lenciel.cn/2014/08/django-1-dot-7-migrations</id>
    <content type="html"><![CDATA[<p>Django 1.7已经发布一段时间了，基本上这个版本最主要的改动就是加入了<code>migrations</code>。</p>

<p>在过去，几乎所有的Django项目都是用South来处理数据变更的。而在Django1.7版本，South的作者Andrew Godwin把<code>migrations</code>加到了Django Core里面。</p>

<p>So&hellip;</p>

<a name="Migrations............"></a>
<h1>Migrations是什么？</h1>

<p>Migrations其实就是一堆帮助你完成数据库变更和数据迁移的命令，使得你可以用“Django”的方式来管理和变更数据库的schema。比如，当你的model改变了，你需要在数据库里面去重命名一列时，你不会想跑到命令行下面去敲SQL吧？特别是，如果你要变更的数据库是线上的，有几百万用户数据，你应该更不愿意搭上这种活了吧？</p>

<p>Migrations让事情变得简单可控：</p>

<ol>
<li>它使得数据库schema的调整可以通过Django命令来完成</li>
<li>它使得数据库的schema和对应的model的变更被track起来：整个历史都可以版本化在Git里面</li>
<li>提供了一套匹配schema和对应的fixture的机制</li>
<li>如何和CI搭配起来，可以保证代码和数据一致性</li>
</ol>


<a name="Migrations......"></a>
<h1>Migrations上手</h1>

<a name="L.................."></a>
<h2>创建测试项目</h2>

<p>首先创建一个virtualenv和django项目：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkvirtualenv django17
</span><span class='line'><span class="nv">$ </span>pip install https://www.djangoproject.com/download/1.7c2/tarball/
</span><span class='line'><span class="nv">$ </span>django-admin.py startproject django_migration_test
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>django_migration_test
</span><span class='line'><span class="nv">$ </span>python manage.py startapp ts_data
</span></code></pre></td></tr></table></div></figure>


<p>然后创建一个model到subl ts_data/models.py：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Create your models here.</span>
</span><span class='line'><span class="k">class</span> <span class="nc">PingPongPrice</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">date</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">auto_now_add</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DecimalField</span><span class="p">(</span><span class="n">max_digits</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">decimal_places</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>subl django_migration_test/settings.py</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="s">&#39;ts_data&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<a name="L......Migrations"></a>
<h2>创建Migrations</h2>

<p>使用下面的命令可以创建ts_data这个app的Migrations。当然，和大多数Django命令一样，如果你不显式的指定，就</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">(</span><span class="n">django17</span><span class="p">)</span> <span class="err">○</span> <span class="n">python</span> <span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">makemigrations</span> <span class="n">ts_data</span>
</span><span class='line'><span class="n">Migrations</span> <span class="k">for</span> <span class="s">&#39;ts_data&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="mo">0001</span><span class="n">_initial</span><span class="o">.</span><span class="n">py</span><span class="p">:</span>
</span><span class='line'>    <span class="o">-</span> <span class="n">Create</span> <span class="n">model</span> <span class="n">PingPongPrice</span>
</span></code></pre></td></tr></table></div></figure>


<a name="L......Migrations"></a>
<h2>应用Migrations</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>django17<span class="o">)</span> ○ python manage.py migrate
</span><span class='line'>Operations to perform:
</span><span class='line'>  Apply all migrations: admin, contenttypes, ts_data, auth, sessions
</span><span class='line'>Running migrations:
</span><span class='line'>  Applying contenttypes.0001_initial... OK
</span><span class='line'>  Applying auth.0001_initial... OK
</span><span class='line'>  Applying admin.0001_initial... OK
</span><span class='line'>  Applying sessions.0001_initial... OK
</span><span class='line'>  Applying ts_data.0001_initial... OK
</span></code></pre></td></tr></table></div></figure>


<p>注意，因为是一个全新的app，这条命令会先建表，换句话说，之前版本的<code>syncdb</code>命令可以不用了。整个使用流程应该变成：</p>

<ol>
<li>建立或者更新一个model</li>
<li>运行<code>python manage.py makemigrations &lt;app_name&gt;</code></li>
<li>运行<code>python mange.py migrate &lt;app_name</code>来应用创建的Migrations</li>
<li>重复前面的步骤</li>
</ol>


<a name="L................................."></a>
<h1>不是新建的项目如何使用</h1>

<p>大多数情况下我们都是从旧版本的Django迁移过来，也就意味着是从South迁移过来。这种情况下需要：</p>

<ol>
<li>删除所有的South创建的migration文件</li>
<li>运行 <code>./manage.py makemigrations</code>，Django会根据你当前model来创建那份<code>initial migrations file</code></li>
<li>运行<code>./manage.py migrate</code>，Django会把已经存在的数据库table当成是migration的产物，完成整个migration</li>
</ol>


<p>如果你运行上面的命令遇到错误，就需要运行 <code>./manage.py migrate --fake &lt;appname&gt;</code> 做一个fake的migration。</p>

<p>如果你不想丢掉过去的South维护的历史记录，可以同时使用South和Django Migrations：升级South到1.0，然后<a href="http://www.aeracode.org/2014/7/1/end-era/">参考这篇文章的做法</a>。</p>

<a name="South...Django.Migrations......"></a>
<h1>South和Django Migrations比较</h1>

<p>对比一下South和Django Migrations的workflow，可能会更加清晰：</p>

<a name="L............migrations"></a>
<h2>首次全新migrations</h2>

<p>South:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">./</span><span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">syncdb</span>
</span><span class='line'><span class="o">./</span><span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">schemamigration</span> <span class="o">&lt;</span><span class="n">appname</span><span class="o">&gt;</span> <span class="o">--</span><span class="n">initial</span>
</span></code></pre></td></tr></table></div></figure>


<p>Django Migrations:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">./</span><span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">makemigrations</span> <span class="o">&lt;</span><span class="n">appname</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<a name="L......migrations"></a>
<h2>应用migrations</h2>

<p>South:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">./</span><span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">migrate</span> <span class="o">&lt;</span><span class="n">appname</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Django Migrations:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">./</span><span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">migrate</span> <span class="o">&lt;</span><span class="n">appname</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<a name="L.........migrations"></a>
<h2>非首次migrations</h2>

<p>South:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">./</span><span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">schemamigration</span> <span class="o">&lt;</span><span class="n">appname</span><span class="o">&gt;</span> <span class="o">--</span><span class="n">auto</span>
</span></code></pre></td></tr></table></div></figure>


<p>Django Migrations:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">./</span><span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">makemigration</span> <span class="o">&lt;</span><span class="n">appname</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，大概是因为出自同一个作者的原因，Django Migrations基本上follow了South的工作流程，只不过是命令更加简洁和清晰了。</p>

<a name="L............"></a>
<h1>更多细节</h1>

<a name="L..................Django.Migrations........."></a>
<h2>哪些变化会被Django Migrations找到？</h2>

<p>如果你再次运行<code>python manage.py migrate</code>，会发现什么都没有发生：这是因为在项目的数据库中有一张<code>django_migrations</code>仍然被更新。表，记录了哪些Migrations已经被应用过了：无论是运行了migrate还是fake的，这个表都会被插入一条记录。比如从South升级到使用Django自带的MigrationsDjango会检查是否有更新。如果没有，它就fake一次，但<code>django_migrations</code>仍然被更新。</p>

<p>在少数情况下，确实有需要再次运行某个特定的Migrations，我们可以在<code>django_migrations</code>里面把这个记录删除掉。</p>

<p>在极少数情况下，如果你有需要回退到特定的版本，比如最初的zero版本，可以用类似<code>python manage.py migrate &lt;app_name&gt; zero</code>的语法。</p>

<a name="Migration......."></a>
<h2>Migration 文件</h2>

<p>在我们运行<code>python manage.py migrate &lt;app_name&gt;</code>究竟发生了什么？实际上，Django会创建一个python文件来描述如何完成这个migration，以前面的ts_data为例，这个文件位于<code>ts_data/migrations/0001_initial.py</code>，内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">unicode_literals</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span><span class="p">,</span> <span class="n">migrations</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Migration</span><span class="p">(</span><span class="n">migrations</span><span class="o">.</span><span class="n">Migration</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">operations</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="n">migrations</span><span class="o">.</span><span class="n">CreateModel</span><span class="p">(</span>
</span><span class='line'>            <span class="n">name</span><span class="o">=</span><span class="s">&#39;PingPongPrice&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">fields</span><span class="o">=</span><span class="p">[</span>
</span><span class='line'>                <span class="p">(</span><span class="s">&#39;id&#39;</span><span class="p">,</span> <span class="n">models</span><span class="o">.</span><span class="n">AutoField</span><span class="p">(</span><span class="n">verbose_name</span><span class="o">=</span><span class="s">&#39;ID&#39;</span><span class="p">,</span> <span class="n">serialize</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">auto_created</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)),</span>
</span><span class='line'>                <span class="p">(</span><span class="s">&#39;date&#39;</span><span class="p">,</span> <span class="n">models</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">auto_now_add</span><span class="o">=</span><span class="bp">True</span><span class="p">)),</span>
</span><span class='line'>                <span class="p">(</span><span class="s">&#39;price&#39;</span><span class="p">,</span> <span class="n">models</span><span class="o">.</span><span class="n">DecimalField</span><span class="p">(</span><span class="n">max_digits</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">decimal_places</span><span class="o">=</span><span class="mi">2</span><span class="p">)),</span>
</span><span class='line'>            <span class="p">],</span>
</span><span class='line'>            <span class="n">options</span><span class="o">=</span><span class="p">{</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="n">bases</span><span class="o">=</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">,),</span>
</span><span class='line'>        <span class="p">),</span>
</span><span class='line'>    <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，是完全可读的Python代码。这也是为什么推荐把整个<code>migrations</code>文件夹加入版本控制的原因：这样你的应用经过了怎样的变更就变得可以回溯了。</p>

<a name="Migration.Dependencies"></a>
<h2>Migration Dependencies</h2>

<p>上面的源代码有一些值得注意的地方。</p>

<p>首先，所有的migration file里面都有一个<code>Migration()</code>类，继承自<code>django.db.migrations.Migration</code>。在我们运行<code>migrate</code>命令的时候，运行的就是这个类。</p>

<p>这个类有两个list，一个是<code>dependencies</code>，一个是<code>operations</code>。</p>

<p><code>dependencies</code>定义了这个migration之前必须完成的操作，比如你的model里面包括一个外键，那么你得首先有对应的table。比如，假设外键指向的model在<code>app_1</code>，那么<code>dependencies</code>会像这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">dependencies</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>   <span class="p">(</span><span class="s">&#39;main&#39;</span><span class="p">,</span> <span class="s">&#39;__first__&#39;</span><span class="p">),</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>如果没有前置条件，这个list可以为空。但大多数时候<code>dependencies</code>是指向其他的migration文件。比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">dependencies</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;main&#39;</span><span class="p">,</span> <span class="s">&#39;0001_initial&#39;</span><span class="p">),</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里使用list的结果是，所有的依赖是没有顺序的，也就是说你不需要按照0001、0002、0003的顺序来排列所有的依赖。</p>

<a name="Migration.Operations"></a>
<h2>Migration Operations</h2>

<p>这个list定义的就是migration完成的操作，可以分为下面的这些种类：</p>

<ul>
<li>CreateModel</li>
<li>DeleteModel</li>
<li>RenameModel</li>
<li>AlterModelTable</li>
<li>AlterUniqueTogether</li>
<li>AlteIndexTogether</li>
<li>AddField</li>
<li>RemoveField</li>
<li>RenameField</li>
<li>RunSQL</li>
<li>RunPython</li>
</ul>


<p>前面的那些操作是整个Django Migrations的核心：因为需要对各种不同的数据库做适配。而后面的两个操作则是灵活度非常高的，几乎可以干任何事情。</p>

<a name="L......"></a>
<h1>实例</h1>

<p>让我们试试把<code>PingPongPrice</code>的<code>price</code>这个field的<code>max_digits</code>改成8位的（通货膨胀嘛），然后再次运<code>makemigrations</code>行命令:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>django17<span class="o">)</span> ○ python manage.py makemigrations ts_data
</span><span class='line'>Migrations <span class="k">for</span> <span class="s1">&#39;ts_data&#39;</span>:
</span><span class='line'>  0002_auto_20140805_1525.py:
</span><span class='line'>    - Alter field price on PingPongPrice
</span></code></pre></td></tr></table></div></figure>


<p>可以看到这次生成的migration文件里面有<code>AlterField</code>操作：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">unicode_literals</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span><span class="p">,</span> <span class="n">migrations</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Migration</span><span class="p">(</span><span class="n">migrations</span><span class="o">.</span><span class="n">Migration</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">(</span><span class="s">&#39;ts_data&#39;</span><span class="p">,</span> <span class="s">&#39;0001_initial&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">operations</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="n">migrations</span><span class="o">.</span><span class="n">AlterField</span><span class="p">(</span>
</span><span class='line'>            <span class="n">model_name</span><span class="o">=</span><span class="s">&#39;PingPongPrice&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">name</span><span class="o">=</span><span class="s">&#39;price&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">field</span><span class="o">=</span><span class="n">models</span><span class="o">.</span><span class="n">DecimalField</span><span class="p">(</span><span class="n">max_digits</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span> <span class="n">decimal_places</span><span class="o">=</span><span class="mi">2</span><span class="p">),</span>
</span><span class='line'>        <span class="p">),</span>
</span><span class='line'>    <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[It's August Now, Boy...]]></title>
    <link href="http://lenciel.cn/2014/08/before-sunrise/"/>
    <updated>2014-08-04T23:47:03+08:00</updated>
    <id>http://lenciel.cn/2014/08/before-sunrise</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/2014_08/before_sunrise_1.jpg" title="Don't touch me..." alt="before sunrise1" />
<img src="http://lenciel.cn/downloads/images/2014_08/before_sunrise_2.jpg" title="Don't touch me..." alt="before sunrise2" /></p>

<blockquote><p>&#8220;I believe if there’s any kind of God it wouldn’t be in any of us, not you or me but just this little space in between. If there’s any kind of magic in this world it must be in the attempt of understanding someone, sharing something.&#8221;</p><footer><strong>Ethan Hawke</strong> <cite><a href='http://www.imdb.com/title/tt0112471/'>Before Sunrise(1995)</a></cite></footer></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[白日焰火]]></title>
    <link href="http://lenciel.cn/2014/07/what-did-ocean-say-2/"/>
    <updated>2014-07-29T01:07:51+08:00</updated>
    <id>http://lenciel.cn/2014/07/what-did-ocean-say-2</id>
    <content type="html"><![CDATA[<p><img height="200" width="300" alt="spark" src="http://lenciel.cn/downloads/images/2014_07/Black_Coal_Thin_Ice.jpg" align="left" style="margin:0px 20px;"/> “你不要再来找我了。”文慧这么说的时候，柳徽不敢看她的眼睛。</p>

<p>当然，我们也可以说这是因为文慧身后的工地上高高的塔吊顶端那盏不可一世的探照灯：当时是凌晨一点，那工地又相隔甚远，本来应该是从天而降的灯光变得和视线平行。惨白的光线在茫茫夜色中显得异常刺眼，让人根本不敢看向她所在的方位。</p>

<p>他们常常在夜里聊天，这是有原因的。白天让人们变得循规蹈矩，不敢轻举妄动。放眼望去，每个人的额头上似乎贴上了符咒，世俗的规则在所有人身上发挥着魔法般的控制力，消磨掉生活本该有的神奇之处。无论扮演着紧张呆板，还是飞扬跋扈的角色，一切言谈举止一切思绪梦想，都仿佛在执行预设的程序而已。</p>

<p>只有在夜里，他们才会感觉摆脱了现实的控制，让自己任性地随心游走。</p>

<p>“你说，那盏灯有没有200米远啊？”</p>

<p>“可能有吧，那又怎样？”</p>

<p>“如果，有一个地方离我们很远很远，比如十光年，二十光年。站在那个地方，往我们这里看，过去的十年、二十年就会一幕幕重现的，对吧？”</p>

<p>“啊？”</p>

<p>“就好比，你看，天上这些星星。很多说不定老早就已经挂掉了。只不过是因为和我们隔了几十万光年，我们就以为它还在一闪一闪亮晶晶呢。”</p>

<p>“我现在说的事情，跟这有什么关系？”</p>

<p>“你看，是活着还是已经死掉都可能只是站在哪里看的问题。”</p>

<p>“嗯，继续。”</p>

<p>“对一个时间旅行者来说，没有你们所谓生和死的区别，当然也没有在一起和分开的区别。不光是周围的人，我生活的地点也一直在变，在这里几年，到那里几年。但在这个城市里面，我知道有你，会觉得对它格外熟悉和依恋：那是因为在需要温暖的时候，我知道能躲到你的怀抱里面。据蔡先生说，这就是本地人和旅行者最大的区别。”</p>

<p>柳徽说这些的时候，认真地看着文慧。当然，还是看不清她是什么表情，就只好继续说下去：</p>

<p>“你说不要再见了，那我会听你的话。我只是想让你知道，人肯定是有能够吸引某个特定的人的线，即使没有太多话想聊，也能把对方拉过来。呆呆看着也好，默默守着也罢，就是想感受着有这个人的存在。”</p>

<p>然后，柳徽就慢慢变得透明起来。还没等文慧反应过来，就消失在无边的夜色之中。</p>

<p>这就是为什么女孩儿们从小就被教育千万不要搭理时间旅行者的原因：据说，他们的出现总是显得过于匆忙，好像白日焰火，很快就变得无影无踪。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[中国式创新]]></title>
    <link href="http://lenciel.cn/2014/07/innovation-company/"/>
    <updated>2014-07-27T15:26:01+08:00</updated>
    <id>http://lenciel.cn/2014/07/innovation-company</id>
    <content type="html"><![CDATA[<p>今天看到一则新闻，百度要做<a href="http://www.36kr.com/p/214107.html">无人驾驶汽车</a>了。</p>

<p>这要换做几年前，本座可能还要看一下评论或者搜一下新闻来源，现在基本上看看这标题也大概能猜到是怎么个事情了。以技术创新为核心竞争力的互联网行业，在中国是“BAT”这样的三家公司领跑：</p>

<ul>
<li>百度主要是<a href="http://food.hebei.com.cn/system/2013/03/13/012627507.shtml">卖假药</a>的</li>
<li>腾讯主要是卖游戏的</li>
<li>阿里主要是卖假货的</li>
</ul>


<p>虽然作为从业人员，一开始的时候本座会对这种状况感觉有些黯然。 但不得不承认，这几个大佬们就算做得不错的了：你总不会希望360、人人这样的公司来做老大吧？</p>

<p>不过，有一个公司，是无论如何本座都很难去忍受的，那就是最近发布了新一代手机的小米。I don&rsquo;t wanna be an ass hole, so I&rsquo;ll let you decide&hellip;</p>

<p>这是当年米3手机宣传册上的图标和苹果的Aperture应用的图标</p>

<p><img src="http://lenciel.cn/downloads/images/2014_07/xiaoxi_icon_mac_icon.jpg" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>这是小米盒子和Apple TV盒子</p>

<p><img src="http://lenciel.cn/downloads/images/2014_07/xiao_tv_mac_tv.jpg" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>这是小米零售店和苹果零售店 (除开装潢，小米居然一样有蓝衣genius)</p>

<p><img src="http://lenciel.cn/downloads/images/2014_07/xiaomi_mac_shop.jpg" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>这是小米的平板系列和苹果的5c系列</p>

<p><img src="http://lenciel.cn/downloads/images/2014_07/xiaomi_pad_mac_phone.jpg" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>这是小米的路由器和苹果的触摸板</p>

<p><img src="http://lenciel.cn/downloads/images/2014_07/xiaomi_router_mac_pad.jpg" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>这是最新款小米4手机和苹果5s手机</p>

<p><img src="http://lenciel.cn/downloads/images/2014_07/xiaomi_mac_new_phone.jpg" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>当然，发布会上有一张图让本座明白雷布斯内心有多么强大，所以抄抄产品外观算得了什么&hellip;</p>

<p><img src="http://lenciel.cn/downloads/images/2014_07/xiaomi_mac_presentation.jpg" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>你当然可以说，这是人家雷布斯的“苹果”情怀嘛。是啊是啊，不知道什么时候开始，“情怀”这个词居然变成了无能的解药。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac上使用Suite Fusion管理字体]]></title>
    <link href="http://lenciel.cn/2014/07/manage-fonts-on-your-mac/"/>
    <updated>2014-07-26T11:36:48+08:00</updated>
    <id>http://lenciel.cn/2014/07/manage-fonts-on-your-mac</id>
    <content type="html"><![CDATA[<p>对于从事设计工作的人员，难免要和字体打交道：因为<a href="http://lenciel.cn/2013/08/buttericks-practical-typography/">设计主要就是Typography的设计</a>，而Typography的基础就是字体。</p>

<p>随着完成的项目越来越多，机器上的字体也就慢慢多起来，如何快速的找到自己想要的字体变成了问题。特别是大多数设计软件里，字体选择的界面都是一个下拉框：如果你有几百个字体加载到系统，几乎每次选择字体都是一场灾难。</p>

<p>这种情况下，难免会希望：</p>

<ul>
<li>对于特定的项目，能够选择特定的字体库</li>
<li>对于特定的文档类型，能够选择特定的字体库</li>
</ul>


<p>使用Suite Fusion管理字体就可以到达这两个目的。</p>

<a name="Mac.............................."></a>
<h2>Mac上的字体集和安装路径</h2>

<p>过去在Windows平台上工作的时候，字体都是放在一个地方的，而在Mac下面字体主要是下面三部分字体集组成：</p>

<ul>
<li>System：位于<code>/System/Library/Fonts</code>， 是系统的字体库，所有登录的用户都可以使用，最好不要随便改动</li>
<li>Local：位于 <code>/Library/Fonts</code>，和System字体一样也是所有登录的用户都可以使用的。只是它们基本不是随系统安装，而是其他软件装上去的，比如MS Word等等</li>
<li>User：位于 <code>~/Library/Fonts</code>，仅对当前登录的用户可用，可以是第三方软件安装的时候安装的（如果你选择了只对当前用户可用），也可以是用户自己安装的字体</li>
</ul>


<a name="L......Suite.Fusion...Font.Vault"></a>
<h2>启用Suite Fusion的Font Vault</h2>

<p>Suite Fusion提供了一个可以自己定义路径的Font Vault。然后你如果在<code>Preferences</code>里面把<code>Copy added fonts into the vault</code>勾上，那么所有添加到Suite Fusion的字体都会被放在一个地方。这样的好处是管理方便：保证字体没有重复，并且很容易备份。</p>

<p>一旦你的字体都在Font Vault里面了，就可以使用Suitcase Fusion删除原来放在各个地方的字体了。在字体清理好之后，你就可以根据不同的项目或者是文档类型建立Set，根据需要来激活它们。</p>

<a name="L.............................."></a>
<h2>添加字体和创建字体库</h2>

<p>只需要使用快捷键&#8221;Cmd+L&#8221;就可以添加字体到字体库。如果默认的字体库不符合你的要求还可以自己新建。添加字体的过程中，SF会扫描字体，提取字体信息，检测是否有错（注意，Suite Fusion不支持orphan outline和orphan bitmap字体）。</p>

<p>并且，如果你本来是用目录来组织字体的，Suite Fusion在支持顶级目录导入，再自动以子目录名创建相应的字体库。</p>

<p>整理字体的界面可以参考下面的截图：</p>

<p><img src="http://lenciel.cn/downloads/images/2014_07/suite_fusion_5.png" title="Don't touch me..." alt="suite fusion 5" /></p>

<p>建立的这些字体库可以根据你打开的文档类型来进行激活和去激活。并且Suite Fusion提供了很多常见设计软件（比如Photoshop、Sketch等）的插件，让你直接在这些软件里面操作字体库。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Retina屏幕上的最佳编程字体]]></title>
    <link href="http://lenciel.cn/2014/07/font-for-programming/"/>
    <updated>2014-07-13T18:45:27+08:00</updated>
    <id>http://lenciel.cn/2014/07/font-for-programming</id>
    <content type="html"><![CDATA[<p>关于编程使用什么样的字体比较好是一个由来已久的话题 <a href="" title="[Anonymous pro programming font](http://hivelogic.com/articles/anonymous-pro-programming-monospace-font).">^1</a> <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，但其实在不同分辨率和操作系统的屏幕上，字体的表现也不一样，所以并不应该有一统天下的字体。比如Retina的屏幕上，字体越细滑看起来似乎就好（当然这也是个体感觉），所以本座最近把所有的开发环境默认字体都换成了<a href="http://mplus-fonts.sourceforge.jp/">M+</a>。</p>

<p>除开字体给人的感觉很细腻之外，M+还满足了本座心中好字体的几大标准。</p>

<a name="L..."></a>
<h2>窄</h2>

<p><img src="http://lenciel.cn/downloads/images/2014_07/fonts_comparision.png" title="Don't touch me..." alt="fonts comparision" /></p>

<p>可以看到，它比大多数的等宽字体都要窄。这样在本座13寸的笔记本屏幕上，也能在显示80个字符宽度的标线的同时，完整看到最少两个水平分割的编辑区。</p>

<p><img src="http://lenciel.cn/downloads/images/2014_07/pycharm_split.png" title="Don't touch me..." alt="pycharm split" /></p>

<p>当然，如果你对码农们为什么需要显示一根80个字符宽度的标线有疑问：这一方面是<a href="http://programmers.stackexchange.com/questions/148677/why-is-80-characters-the-standard-limit-for-code-width">处女座程序员对历史的坚持</a>，另一方面，如果你经常写出很长的语句，也意味着你的代码质量有问题。</p>

<a name="L..."></a>
<h2>全</h2>

<p>除开基本的字符，M+因为是出自日本设计师的关系，字符很全。</p>

<p><img src="http://lenciel.cn/downloads/images/2014_07/fonts_map.png" title="Don't touch me..." alt="fonts map" /></p>

<a name="L..."></a>
<h2>清</h2>

<p>对程序员来说，清楚的字体主要是指：</p>

<ul>
<li>要能很方便的区别开大写的字母<code>O</code>和数字<code>0</code></li>
<li>要能很方便的区别开数字<code>1</code>，大写的<code>I</code>和小写的<code>l</code></li>
<li>要能很方便的区别开<code>.</code>和IDE显示的Whitespace</li>
</ul>


<p>M+在这方面也是非常棒的：</p>

<p><img src="http://lenciel.cn/downloads/images/2014_07/fonts_clear.png" title="Don't touch me..." alt="fonts clear" /></p>

<p>因为是开源字体，M+是可以自由下载和使用的。但因为你在中国，可能访问不了Sourceforge，不如下载<a href="http://pan.baidu.com/s/1gdgk6VT">我分享的zip包</a>吧，lol。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://www.slant.co/topics/67/~what-are-the-best-programming-fonts">What are the best programming fonts</a>.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac上自启动autossh]]></title>
    <link href="http://lenciel.cn/2014/07/fuck-the-gfw-with-ssh-tunnel/"/>
    <updated>2014-07-11T20:14:20+08:00</updated>
    <id>http://lenciel.cn/2014/07/fuck-the-gfw-with-ssh-tunnel</id>
    <content type="html"><![CDATA[<p>If you know what it is then you know what it is. Let&rsquo;s fuck the GFW.</p>

<div><script src='https://gist.github.com/d353a04a3a7bc0278ec6.js?file=autossh.lenciel.plist'></script>
<noscript><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
  &lt;key&gt;KeepAlive&lt;/key&gt;
  &lt;true/&gt;
  &lt;key&gt;Label&lt;/key&gt;
  &lt;string&gt;autossh.lenciel&lt;/string&gt;
  &lt;key&gt;ProgramArguments&lt;/key&gt;
  &lt;array&gt;
    &lt;string&gt;/opt/boxen/homebrew/bin/autossh&lt;/string&gt;
    &lt;string&gt;-M&lt;/string&gt;
    &lt;string&gt;20000&lt;/string&gt;
    &lt;string&gt;-f&lt;/string&gt;
    &lt;string&gt;-i&lt;/string&gt;
    &lt;string&gt;~/.ssh/fuckgfw&lt;/string&gt;
    &lt;string&gt;-N&lt;/string&gt;
    &lt;string&gt;-L&lt;/string&gt;
    &lt;string&gt;0.0.0.0:3189:localhost:31280&lt;/string&gt;
    &lt;string&gt;remotehost&lt;/string&gt;
  &lt;/array&gt;
  &lt;key&gt;RunAtLoad&lt;/key&gt;
  &lt;true/&gt;
  &lt;key&gt;WorkingDirectory&lt;/key&gt;
  &lt;string&gt;/opt/boxen/&lt;/string&gt;
  &lt;key&gt;StandardErrorPath&lt;/key&gt;
  &lt;string&gt;/opt/boxen/log/autossh/autossh.log&lt;/string&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quartz Composer和Origami试玩]]></title>
    <link href="http://lenciel.cn/2014/06/quartz-composer-and-origami/"/>
    <updated>2014-06-26T22:57:05+08:00</updated>
    <id>http://lenciel.cn/2014/06/quartz-composer-and-origami</id>
    <content type="html"><![CDATA[<p>这篇不是教程，不会讲述怎么安装需要的软件，怎么用它们来做软件原型。只是记录分享一下我对这套东西的感受和评价。</p>

<p>动态设计，也就是<a href="http://v.youku.com/v_show/id_XMzIyNTk1NTMy.html">Motion Design</a>或者是<a href="http://en.wikipedia.org/wiki/Motion_graphic_design">Motion Graphic Design</a>其实已经火了很长一段时间了：你只要经常去Dribble上逛就可以看到很多非常优秀的作品。国内的团队经过一段时间的学习和追赶，目前这方面的水平也很不错：从去年开始，BAT的大多数App的splash或者tutorial都已经不再是静态的图片而是动态图了。</p>

<p>当然，除开看起来更加狂炫帅富屌的splash、tutorial，本座看重动态设计的原因其实是它在原型阶段的作用：如果UX的团队会制作动态图，就能展示软件实际的操作流程，效果比传统的需要脑补的静态Wireframe要好太多。</p>

<p>不过从本座开始关注这种设计方法到现在，主流的动态设计流程一直是先在PS里面做静态资源，然后在AE里面导入静态资源做动画，最后生成mp4格式视频，然后配合QuickTime或者别的什么软件生成gif（比较详细的描述可以看看<a href="http://www.uisdc.com/the-internet-motion-graphic">这篇文章</a>)。</p>

<p>这种方式对本座来说上手就略显太重，换句话说，不是财大气粗的BAT，需要考虑：</p>

<ol>
<li>PS+AE很贵</li>
<li>会这两个东西的UX人才很贵</li>
</ol>


<p>接下来事情似乎有了转机：<a href="http://quartzcomposer.com/">Quartz Composer</a>和<a href="http://facebook.github.io/origami/">Origami</a>的组合自从Facebook的Paper推出之后在网络上被风风火火的讨论了一把，然后不久<a href="http://www.fastcodesign.com/3025932/facebook-develops-a-photoshop-for-interaction-design-and-its-free-for-anyone-to-use">Facebook就开源了后者</a>。</p>

<p>在有Origami之前，本座就看Facebook的设计主管说他们内部用QC做原型设计就去学习了一下，结果感觉实在是云里雾里。这次又了Origami之后，经过几个小时的试玩，我得到的感受如下。</p>

<p>首先，这套免费的工具非常给力：除开不要钱，不难用之外，给力主要是因为QC的patch设计带来的高度可重用性：其实Origami从根本上来说就是一堆patch而已。</p>

<p>其次，这套工具也称不上“photoshop for interaction design”。你仍然需要使用PS（或者Sketch等等做图的软件）做上游，把静态资源做好，然后导入到QC里面完成动态效果。这种&#8221;设计-切图-导入-动态化&#8221;的模式其实还蛮像一度风靡网络的flash的制作流程。</p>

<p>最后，如果你是程序员，习惯了写CSS/JS来控制界面，要适应QC的图形化编程（类似VB那样先选控件再改属性然后绑事件）还是蛮蛋疼的。比如它里面的设定偏移量来定位元素的方式，就让本座觉得用起来非常虐心。</p>

<p><img src="http://lenciel.cn/downloads/images/2014_06/qc_yx_intro.gif" title="intro" alt="Don't touch me" width="35%" style="margin-left:30px"><img src="http://lenciel.cn/downloads/images/2014_06/qc_yx_bd.gif" title="bd" alt="Don't touch me" width="38%" style="margin-left:30px"></p>

]]></content>
  </entry>
  
</feed>
