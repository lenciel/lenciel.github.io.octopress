<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@Lenciel]]></title>
  <link href="http://lenciel.com/atom.xml" rel="self"/>
  <link href="http://lenciel.com/"/>
  <updated>2016-09-22T16:55:54+08:00</updated>
  <id>http://lenciel.com/</id>
  <author>
    <name><![CDATA[Lenciel Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[编程语言里的类型系统]]></title>
    <link href="http://lenciel.com/2016/09/types-in-programming-languages/"/>
    <updated>2016-09-22T15:53:18+08:00</updated>
    <id>http://lenciel.com/2016/09/types-in-programming-languages</id>
    <content type="html"><![CDATA[<p>这两天正好看到了“<a href="http://www.amazon.com/Functional-Programming-Scala-Paul-Chiusano/dp/1617290653">FP in Scala</a>”的作者Paul Chiusano关于静态类型语言的优点的一篇<a href="https://pchiusano.github.io/2016-09-15/static-vs-dynamic.html">blog</a>，刚好最近在看很多Scala写的代码，再参考下面这些之前看过的文章(<a href="https://github.com/tel/old-blog/blob/master/_posts/2014-07-08-all_you_wanted_to_know_about_types_but_were_afraid_to_ask.md">1</a>, <a href="https://github.com/tel/old-blog/blob/master/_posts/2014-08-08-six_points_about_type_safety.md">2</a>, <a href="https://danluu.com/empirical-pl/">3</a>, <a href="https://gist.github.com/garybernhardt/122909856b570c5c457a6cd674795a9c">4</a>)，对类型系统打个总结。</p>

<a name="L......"></a>
<h3>类型</h3>

<p>“类型”，顾名思义就是一组可能的值的集合。比如整型，那么它可能的值是整数的集合；布尔型，它可能的值是true或者false。我们可以定义任何的“type”，比如一个叫“ISO9001”的type，它可能的值如果不是ISO就是9001：这不是个整型，也不是个字符串型，它就是一个专门的特殊的类型。</p>

<p>静态类型语言里，变量的类型是确定好的：如果x是整型，那么如果你写了<code>x=true</code>这样的赋值，编译器在编译时就会报错。不同的静态类型语言有不同程度的表达能力，但是它们支持的类型是确定的。</p>

<p>动态类型语言里，对值进行了类型的划分：它知道1就是整型，true就是布尔型。但是变量是什么类型却是不确定（动态）的。</p>

<a name="L.................."></a>
<h4>静态类型语言</h4>

<p>大多数静态类型语言需要做类型声明。比如java里面<code>public int add(int x, int y)</code>这样，对参数和返回值都需要声明类型。</p>

<p>也有一些静态类型语言不这么做，比如Haskell里面同样的函数写法是<code>add x y = x + y</code>。虽然没有显式地声明它类型，但是因为在这门语言里面，<code>+</code>操作符只能用在数值类型上面，所以x和y就都是数值类型的。需要理解的是，这种省略并不意味着静态特质的降低，相反，Haskell的类型比Java要严格和强大得多。</p>

<p>声明了类型，在编译期就进行类型检查，如果不满足就报错，是静态类型语言一个很大的优点。比如大多数静态类型语言都不允许<code>"a"+2</code>这样的写法（C语言很特立独行地支持了），每个静态类型语言里面的表达式，都在执行前就有一个确定的返回类型。</p>

<a name="L.................."></a>
<h4>动态类型语言</h4>

<p>像前面说的动态类型不需要声明类型，编译器也不会做推测，只在运行时才知道变量确切的值（这也是动态的意思所在）。</p>

<p>比如一个python函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span></code></pre></td></tr></table></div></figure>


<p>它可以被用来做两个数相加，可以是字符串连接，甚至可以是list的合并。在运行时程序会检查x和y是什么类型的值。如果都是整型，就把数值加起来，如果是字符串，就把字符串粘起来，如果是一个整型一个字符串，那么很可能就要报错。</p>

<p>大多数动态语言，都会像Python一样，在运行时报出类型错误（JS是个例外，它对任何表达式都会返回一个值，而不是报错），因此，使用动态语言，<code>"a"+1</code>这样的错误也需要在实际运行时才会被检查出来。</p>

<a name="L....................."></a>
<h4>强类型和弱类型</h4>

<p>术语“强类型(strong typing)”和“弱类型(weak typing)”是用得非常模糊的：</p>

<ul>
<li>有些时候，“强”表示静态类型。如果你在讨论或者是写东西的时候，要说的是静态类型语言，那就直接说，不要用<code>强类型语言</code>这样的术语</li>
<li>有些时候，“强”表示不会做隐式的类型转换。比如JS里面允许<code>"a"+1</code>，其实内部是做了隐式的类型转换，这个时候人们说它是<code>weak typing</code>的，而不是强的。但是几乎所有的语言都会允许整型和浮点型相加，允许这个的语言是强还是弱呢？没有标准。人们这样说的时候，一般的意思是，如果这样的转换是不可接受的（会造成自己觉得很低级的类型错误在生产环境上运行时才被发现），就认为它是“弱类型”，相反，就觉得是“强类型”</li>
<li>有些时候，“强”表示我们不能做这个语言规则不允许的类型转换</li>
<li>有些时候，“强”表示是memory-safe的。C就是典型的虽然是静态类型，但是不是memory-safe的语言。</li>
</ul>


<p>下面这个表可以说明常见的一些语言是如何被带入一团迷雾的：</p>

<table>
<thead>
<tr>
<th> 语言  </th>
<th> 类型? </th>
<th>隐式转换? </th>
<th> 有类型转换规则? </th>
<th> 内存安全? </th>
</tr>
</thead>
<tbody>
<tr>
<td> C          </td>
<td> Strong  </td>
<td> Depends               </td>
<td> Weak            </td>
<td> Weak         </td>
</tr>
<tr>
<td> Java       </td>
<td> Strong  </td>
<td> Depends               </td>
<td> Strong          </td>
<td> Strong       </td>
</tr>
<tr>
<td> Haskell    </td>
<td> Strong  </td>
<td> Strong                </td>
<td> Strong          </td>
<td> Strong       </td>
</tr>
<tr>
<td> Python     </td>
<td> Weak    </td>
<td> Depends               </td>
<td> Strong          </td>
<td> Strong       </td>
</tr>
<tr>
<td> JavaScript </td>
<td> Weak    </td>
<td> Weak                  </td>
<td> Weak            </td>
<td> Strong       </td>
</tr>
</tbody>
</table>


<p>由于“强”和“弱”的使用是如此的上下文相关又如此的混乱，所以最好不要使用这些术语，而是描述具体的问题：“JS在我们把字符串和整型相加的时候会正常返回，而Python会报错”比“JS是弱类型的，而Python是强类型的”有意义得多。这样我们在讨论中就不会花时间去纠缠在本来就不是很清晰的术语上了。</p>

<p>就像Chris Smith<a href="https://cdsmith.wordpress.com/2011/01/09/an-old-article-i-wrote/">写过的那样</a>:</p>

<blockquote><p>Strong typing: A type system that I like and feel comfortable with<br/>Weak typing: A type system that worries me, or makes me feel uncomfortable</p></blockquote>


<a name="L.....................Gradual.Typing..."></a>
<h4>渐进的类型化（Gradual Typing）</h4>

<p>我们能不能给动态语言添加静态类型呢？在有些情况下，我们可以；在其他情况下，这非常难，甚至是不可能的。</p>

<p>最明显的问题就是<code>eval</code>或者别的动态语言里面的类似的功能。<code>1+eval("2")</code>在Python里面会返回3，但是<code>1+eval(read_from_network())</code>会返回什么？这要看read_from_network()返回的是什么了。这种只有在运行时才知道结果的语句，是没有办法添加静态类型的支持的。</p>

<p>为了使<code>eval()</code>被合法使用，有个不太让人满意的做法就是把返回值设成Any这个type，就好像很多OO语言里面返回Object，或者是Go语言里面返回<code>interface{}</code>。之所以这不太让人满意是因为，这样一来，类型系统的功能也就被去掉了。所以如果一个语言有<code>eval</code>语法，同时又有类型系统，那么当你使用<code>eval</code>语句的时候，类型安全就不能被保证了。</p>

<p>有些语言允许所谓的optional或者是gradual typing：在默认情况下，类型是动态的，但是你可以声明静态的annotation。Python最近添加了这个功能；Typescript作为Javascript的superscript也有optional types；Flow会对普通的javascript代码做静态类型分析。这些语言之所以提供这些，是希望拥有一些静态类型语言的优势，但是和静态语言提供的类型保证相比，其实是很弱的：因为有些方法是动态类型的，有些方法又是静态类型的，程序员还需要自己来管理其中的差异化的东西。</p>

<a name="L................................."></a>
<h4>静态类型语言代码的编译</h4>

<p>静态类型的语言写的代码在编译的时候，编译器会先检查语法，然后检查类型。因此，有时候你修复了一个语法的错误，可能会看到一堆的类型的错误。这些错误并不是修复语法错误带来的，而是之前就有的，只是编译器没法在语法正确之前，去找出类型的错误。</p>

<p>一旦语法和类型都正确了之后，编译器就可以生成可执行的代码。静态类型的语言生成的代码执行起来通常比动态类型快：当你知道被加的是整数，你就可以使用CPU内置的ADD命令。如果需要动态的评估操作的是什么类型，要怎么返回或者是报错，都会花掉额外的时间。虽然有很多技术，比如JIT（Just-In-Time）编译器可以在运行时收集到需要的信息后recompile一次生成比完全动态更快的代码，但是和静态语言比如Rust写出来的程序比，运行起来还是要慢一些的。</p>

<a name="L.........................................."></a>
<h4>关于静态类型和动态类型的争论</h4>

<p>静态类型语言的推崇者指出，如果没有一个严格的类型系统，那么一个微小的类型错误就可能导致生产环境崩掉。这当然是真的，所有使用过动态类型语言的同学肯定都遇见过。</p>

<p>动态语言的推崇者认为，动态语言写起来要容易一些。视你写的代码究竟用来干嘛而言，这可能是对的，也可能是错的。Rich Hickey关于“easy”有个<a href="https://www.infoq.com/presentations/Simple-Made-Easy">很经典的讲座</a>，特别清楚的阐明了“easy”和“simple”的关系，以及你为什么要小心“easy”。不同的动态语言的设计者，对类型系统的考虑也就视他们想开放多少控制权给开发者自己控制，实现得非常不同。</p>

<p>比如，Javascript的策略是尽量继续执行，即使<code>"a"+1</code>这样的语句明显不是很合理了，它也会返回<code>a1</code>。Python则倾向于尽可能的报错。所以虽然都是动态语言，设计上的思路是非常不同的。</p>

<p>比如，C允许你从内存的任意地址读取，也允许你把一个类型的值当成任意别的类型来操作，即便这样会造成crash。Haskell，则要求哪怕是整型和浮点型相加，也需要显式的做一次类型转换。所以虽然都是静态语言，设计上的思路也是非常不同的。</p>

<p>因此，任何类似于“静态语言比动态语言在某个方面好”的论断都是没有意义的。只有具体到语言，才可以进行这样的讨论，比如：“Haskell在某个方面比Python做得好”。</p>

<a name="L.............................."></a>
<h4>静态类型系统的多样性</h4>

<p>我们再来仔细看看两个著名的静态类型语言：Go和Haskell。</p>

<p>Go的类型里面没有generic类型：就是由其他类型来构成的类型。比如我们可能想自己构建一个MyList类型，可以保存任何类型的数据列表，可以是整数的列表，也可以是字符串的列表等等。编译器自己需要来处理对类型的限制：如果我们往一个用来放整数的MyList里面放了字符串，编译器需要拒绝程序。</p>

<p>Go在设计上就故意没有支持MyList这种generic的类型。要实现类似的功能，你只能定义一个“empty interface”：这样MyList可以用来放任何类型，但是compiler没有办法知道究竟是什么类型。当我们从MyList里面获取对象的时候，我们需要自己来告诉compiler对象的类型。如果你说你获取的是个字符串，但是拿到的是个整型值，就会发生运行时的错误：这很像动态语言。</p>

<p>Go还缺乏很多现代静态语言的功能，甚至连很多70年代的静态语言就支持的功能也没有。它的设计者做这样的决定自然有自己的考虑，但是使用者里面对这些功能的呼声是很高的。</p>

<p>再来看看拥有强大的类型系统的Haskell。如果我们要定义一个整型的MyList，只需要这么写“MyList Integer”。在声明之后，Haskell就会让这个列表里面只能放整数而不是字符串了。</p>

<p>Haskell还能表达更复杂的语义。比如<code>Num a =&gt; MyList a</code>表示，一个数值类型的列表：可以是整数，或者浮点数等，但不会是一个字符串。</p>

<p>用Haskell你很容易编写适合于多个类型的函数。比如<code>Num a =&gt; (a -&gt; a -&gt; a)</code>表示：</p>

<p>这是个数值类型的函数（Num a =>)
这是函数有两个类型为a的输入参数，然后返回一个类型为a的值（a -> a -> a）</p>

<p>再看一个可能更夸张的例子：<code>String -&gt; String</code>表示函数的参数是字符串，返回也是字符串；而 <code>String -&gt; IO String</code>表示，函数参数是字符串，然后要做一些IO操作（可能是磁盘的IO，也可能是网络的IO等等），然后返回字符串。</p>

<p>这样精细的类型定义有什么好处呢？</p>

<p>比如，在写一个Web应用的时候，我们就可以一眼看出这个函数会不会动数据库。这是大多数语言没有办法提供的便利，即使大多数静态类型语言也没有办法提供：绝大多数语言需要我们一行行去检查它有没有IO的操作，这个过程既麻烦又容易出错。</p>

<p>和Go比一下，前者连MyList那样简单的概念都没有办法很好的表示，更不用提“一个有两个数值型参数的，会做一些IO操作后，返回一个数值类型参数”这样复杂的语义了。</p>

<p>Go的设计思路毫无疑问可以让使用它编写适合用它编写的程序变得容易（首先，设计Go的compiler就要容易很多），同时也使得学习Go变得容易。这些优势，与Go的显而易见的限制，究竟会给你的开发工作带来正面还是负面的影响，很多时候是跟问题域相关的，非常主观的事情。</p>

<p>Go和Haskell如此的不同，也使得把它们统称为“静态类型语言”表达的意思非常模糊：虽然这样说确实是没有错的。所以再次提醒，把动态类型语言和静态类型语言分成两组来比较一些东西的时候，一定要记得语言的多样性。比如我们说运行起来的安全系数（不发生类型错误导致runtime erro的系数），那么Go和C，甚至比Python这样的动态语言问题还大。</p>

<a name="L.........................................."></a>
<h4>不同的类型系统表达能力的实例</h4>

<p>编程语言的类型系统越强大，我们表达的粒度就可以越精细。</p>

<p>比如写一个求和的函数，在Go里面，我们只能表达“函数有两个整数类型参数，并且返回一个整数类型”：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">fuc</span> <span class="n">add</span><span class="p">(</span><span class="n">x</span> <span class="nb">int</span><span class="p">,</span> <span class="n">y</span> <span class="nb">int</span><span class="p">)</span> <span class="nb">int</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对浮点类型，我们可能就需要再写一个。</p>

<p>在Haskell里面，我们可以定义“函数有两个数值类型的参数，并且返回一个和输入参数类型相同的类型”：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">add</span> <span class="p">::</span> <span class="n">Num</span> <span class="n">a</span> <span class="o">=&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span>
</span><span class='line'><span class="n">add</span> <span class="n">x</span> <span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="o">+</span><span class="n">y</span>
</span></code></pre></td></tr></table></div></figure>


<p>而在Idris里面，我们可以定义“函数有两个整数类型参数，但是第一个必须比第二个小”</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">add</span> <span class="p">:</span> <span class="p">(</span><span class="n">x</span> <span class="p">:</span> <span class="n">Nat</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">y</span> <span class="p">:</span> <span class="n">Nat</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">auto</span> <span class="n">smaller</span> <span class="p">:</span> <span class="n">LT</span> <span class="n">x</span> <span class="n">y</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="n">Nat</span>
</span><span class='line'><span class="n">add</span> <span class="n">x</span> <span class="n">y</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们如果在调用的时候写了<code>add 2 1</code>，那么编译器就会直接报错。非常少语言有这样的表达能力，大多数时候我们要做类似的check只能在runtime，所以我们只能写类似于<code>if x&gt;=y : raise SomeError()</code>的语句。</p>

<p>所以，越强的类型系统，表达能力就越强，但是也要注意的是这样语言的复杂度也上去了。</p>

<p>我们可以看看按类型系统由弱到强排列的一些常见的编程语言：</p>

<ul>
<li>C (1972), Go (2009): 类型系统很弱，甚至连generic的类型都不支持</li>
<li>Java (1995), C# (2000): 支持generic的类型</li>
<li>Haskell (1990), Rust (2010), Swift (2014): 提供了更强大的类型系统</li>
<li>Agda (2007), Idris (2011): 类型系统更加强大，但是学习的人还很少（虽然学了的人都表示亢奋）</li>
</ul>


<p>随着时间推移，具备更强大的类型系统的语言有着越来越流行的趋势（这个趋势从很多动态语言里面被加入了gradual typing的功能也能感受到）。而火爆的Go应该是一个蛮特别的反例，它也被很多推崇更强大类型系统的静态语言用户者批判它的设计者在开倒车。第二组里面的Java和C#是目前被广泛使用的，有成熟生态系统的语言。第三组是目前有了进入主流趋势的，有着大公司在背后支持的（比如Mozilla的Rust或者是Apple的Swift）。第四组看起来还离主流很远，但是究竟后面会不会有凶猛的发展势头也很难说清：就像第三组里面的这些语言十年前也没人知晓一样。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何带娃]]></title>
    <link href="http://lenciel.com/2016/09/how-to-raise-my-kids/"/>
    <updated>2016-09-18T21:30:41+08:00</updated>
    <id>http://lenciel.com/2016/09/how-to-raise-my-kids</id>
    <content type="html"><![CDATA[<p>是一个全世界人民，特别是苦逼的中间阶层人民，亘古不变的热闹话题。</p>

<p>昨天，远在LA的陈明同学分享了一个关于<a href="http://www.ted.com/talks/julie_lythcott_haims_how_to_raise_successful_kids_without_over_parenting?utm_source=newsletter_weekly_2016-09-17&amp;utm_campaign=newsletter_weekly&amp;utm_medium=email&amp;utm_content=talk_of_the_week_button&amp;from=timeline&amp;isappinstalled=0#t-318006">如何带娃的TED讲座</a>。</p>

<p>讲座里面酷似乌比·戈德堡的阿姨把那种生活在完成家长制定的无穷无尽的计划中的小孩，叫做checklist children。她认为这些家长进行的是过度抚养（不知道这么翻译over-parenting是不是正确），并对有此遭遇的小孩致以了深切的同情：因为总是被安排，没有自己成长的空间，这些小朋友们感受不到父母对自己的爱，从而也就没有办法正确地认识自己和爱自己，于是更加没有办法好好对待别人和爱别人。</p>

<p>这时候下面的观众应者寥寥，大概跟本座的心情是一样的：“这很有道理，然而社会竞争如此激烈，讲爱啊什么的并没有卵用。”</p>

<p>然而她给出的解决方案还是靠爱：“用无条件的爱，而不是checklist，来对待自己的孩子。”</p>

<p>其中有句话很动人：“我们每个人对待自己的小孩，不要想着他们应该读什么声名显赫的大学才争气，而是像他们刚刚出现在你的生活里面的最初那几秒或者那几分钟一样纯粹就好了。”</p>

<p>大概是很多人都想起来了这最初的奇妙心情，从这句话开始，大呼小叫的支持声就一直不断了。</p>

<p>但我很怀疑这样的讲座对美帝中产社区里面拼得头破血流的家长们能有多少实际意义。</p>

<p>更不用说我大天朝的苦逼家长们。</p>

<p>本着治病救人要连根拔起的精神，不如本座来给大家开一铺权威猛药。</p>

<p>上周在nature网站上，我看到了<a href="http://www.nature.com/news/how-to-raise-a-genius-lessons-from-a-45-year-study-of-super-smart-children-1.20537">一篇文章</a>，讲述一个长达45年的天才少年跟踪计划<a href="https://my.vanderbilt.edu/smpy">SMPY</a>，以及这个计划得出的结论。</p>

<p>这个计划的创办其实也挺偶然的：1968年的一个夏日，Julian Stanley接手了计算机系的一名神童Joseph Bates。这个来自美国巴尔的摩的学生在数学等方面遥遥领先于同龄人，于是他的父母送他到Johns Hopkins University学习大学计算机课程。结果他的水平超越了班上绝大多数成年人，在成为了他们的Fortran语言助教之后，表示课程有些无聊。</p>

<p>不知道该拿Bates怎么办的计算机系，就只好把他介绍给了因为在心理测量学方面的工作而享有盛誉的Stanley。为了了解这个小神童点了什么天赋，Stanley让Bates接受了一系列测试，包括美帝高考SAT考试。</p>

<p>测试的结果是，Bates的SAT得分远超Johns Hopkins University的录取门槛。这一方面让Bates得以在13岁作为本科生正式进入这所大学；同时，他也成为了Stanley的“数学早慧少年研究”(Study of Mathematically Precocious Youth, SMPY）的“student zero”（跟EVA一样，都有零号机啊有没有）。</p>

<p>Stanley开启这项研究，很大程度上是因为心理学领域最著名的纵向调查之一——Lewis Terman的“<a href="http://www.nature.com/news/long-term-research-slow-science-1.12623">天才遗传学研究</a>”（从1921年开始，Terman基于IQ测试得分选择了一批青少年受试者，然后追踪并为他们的事业提供鼓励）仅产生了为数不多的德高望重的科学家。而年少时因IQ得分过低而被淘汰的候选者里面，却涌现了包括晶体管的共同发明者、诺奖得主William Shockley，物理学家、诺奖得主Luis Alvarez这样的选手。</p>

<p>Stanley于是想找出更加科学的筛选和培养方式，用他的话说就是：“no more dry bones methodology”（拒绝血统论？呵呵&hellip;）。</p>

<p>这项随后持续长达45年的研究，也确实改变了天才儿童在美国被筛选和培养的方式。约5000多人在该计划中被持续跟踪，其中就包括了数学家陶哲轩和Lenhard Ng，Facebook创始人Mark Zuckerberg，Google的联合创始人Sergey Brin，以及音乐家Stefani Germanotta(我们都知道的Lady Gaga)等等成就卓越的人。</p>

<p>Nature的那篇文章本身挺精彩的，<strong>有志于培养天才儿童，和有志于不培养天才儿童的家长，都可以仔细读一下</strong>。这里只摘大概是家长们最关心的。</p>

<p>它最主要（大概也是最有争议）的结论非常简明：</p>

<blockquote><p>Such results contradict long-established ideas suggesting that expert performance is built mainly through practice — that anyone can get to the top with enough focused effort of the right kind. SMPY, by contrast, suggests that early cognitive ability has more effect on achievement than either deliberate practice or environmental factors such as socio-economic status.</p></blockquote>


<p>也就是说，虽然长期以来人们坚信要在某方面有卓越表现，主要是靠后天不断努力练习。但这些数据却说明，<strong>天赋比努力和环境都重要</strong>：就像有些人并不需要练习就可以在某项运动中轻松取胜一样，有些人其实不需要特别努力就在某些学术领域非常厉害。</p>

<p>以此为基调，研究还提出了“有天赋的小孩就要特殊培养，和普通教育分开，不然就出不了成绩”这个同样充满争议的论断。为了应对诸如“跳级会让孩子心理出问题”这样的论断，他们甚至专门对跳过一级的儿童和同样聪明但未跳级的对照组进行了比较，并指出前者获得博士学位或专利的可能性比后者高出60%，而且在取得成就之后活得非常健康。</p>

<blockquote><p>这些孩子通常并不需要任何有创新性或者新奇的东西。他们只需要尽早获取年龄较大的孩子已经接触到的内容。</p></blockquote>


<p>文章后面花了不少篇幅去讨论当“天才是可以被挑选，被培养，并取得成效”这件事情被证实之后，不同社会，特别是不同社会的教育界相应的反应。比如中东和亚洲就更愿意把所有资源向前面这1%的孩子倾斜，成绩不好的小孩儿没人理；而欧美就有些反过来，为了班上最慢的孩子跟上，老师可以调整节奏来让全班适应他一个人:</p>

<blockquote><p>“the focus has moved more towards inclusion”</p></blockquote>


<p>这里的<code>inclusion</code>用得很妙，杰出的孩子是<code>exclusive</code>没错，但作为普通人的学校，任务是要带上大家。</p>

<a name="L................................."></a>
<h3>今天我们要怎样做家长？</h3>

<p>社会要怎么对待不同能力的小孩是教育界的话题。我们自己要怎么做家长呢？</p>

<p>个人觉得，在接受天赋比努力、比环境还重要之后，家长可以做的最主要的转换就是，从让孩子“练出一身特长”，到“找到特长所在”。</p>

<p>不要觉得你的小孩不是那顶尖的1%，SMPY的研究者也说， 他们找STEM栈（Science, Technology, Engineering, Mathematics)厉害而已，其实很多别的小孩有别的天赋。</p>

<p>生产力发展到今天，特别是拜互联网所赐，现在要体验某个领域，比以前的门槛低了很多很多。有了VR，AR等技术之后，低成本的沉浸式的体验也会走入千家万户。</p>

<p>与此同时，要学习某个技能的门槛比以前低了更多。一方面，获取信息极为便利，大多数领域的基础学习都可以免费完成；另一方面，检索和调取信息非常高效，花在“背”这部分的时间大幅度缩减。</p>

<p>因此，找到你的小孩适合学什么大概成了整个作为家长在教育里面要解决的最重要的问题。</p>

<p>所以，过去的家长大概养小孩儿是跟样盆景差不多的：按照自己的科属、盆子的大小和见过的实例，家长对自己的孩子不断施肥、除虫、修枝剪枝。这当然很容易就会有TED讲座里面说的over-parenting的问题：毕竟这盆景再好看，究竟是家长觉得拿出去风光，还是小孩子自己觉得舒服，很难讲。</p>

<p>今后就更应该像养野花&hellip;先呼啦啦长得满坑满谷&hellip;然后再去收拾。</p>

<p>要做到这样，略不容易。</p>

<p>不过nature那篇文章里面正好给出了八项让“聪明的小孩既快乐又有成就”的具体建议：</p>

<ol>
<li>让孩子体验各种不同的事物</li>
<li>当孩子表现出强烈的兴趣或天分时为他提供发展兴趣和天分的机会</li>
<li>除开关注孩子智力发展，也要关注他精神方面的需求。</li>
<li>通过赞扬他的努力，而不是能力，来帮助孩子形成成长性的思维模式。</li>
<li>鼓励孩子进行智力上的冒险，并放宽心态对待，让他们学会吸取失败的经验。</li>
<li>切忌贴标签，被贴上神童的标签可能造成精神上的负担。</li>
<li>和老师合作满足孩子的需求，聪明学生通常需要更难的学习、更多的支持或能按自己的节奏学习的自由。</li>
<li>检验孩子的能力，这可以作为要求超前学习的佐证，也有助于及时发现失读症、过动儿之类的问题，或者社交和精神上的困难。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[英文的形容词排序]]></title>
    <link href="http://lenciel.com/2016/09/adjective-word-order/"/>
    <updated>2016-09-09T10:13:32+08:00</updated>
    <id>http://lenciel.com/2016/09/adjective-word-order</id>
    <content type="html"><![CDATA[<p>其实也是中学的时候很困扰我的事情。当时是背老师说的口诀：“限描大形新，色地材用名”，也就是“限制性形容词>描述性形容词->大小->形状->新旧->颜色->地域->材料->用途”。</p>

<p>后来在大学里面听其他省的同学说，他们老师讲的是“限数描大形，新色国材名”或者是“总限观，大形令，色国才”什么的。</p>

<p>但其实做题的时候，硬背这些用处不大：一般读起来顺口的就是对的，所谓“语感”。</p>

<p>今天才知道，原来对于真正的英语国家的人，他们也是凭感觉在说的。《剑桥词典》是<a href="http://dictionary.cambridge.org/us/grammar/british-grammar/adjectives-order">这样说的</a>。
Mark Forsyth在<a href="https://www.amazon.com/exec/obidos/ASIN/1848316216/ref=nosim/0sil8">The Elements of Eloquence</a>里面却讲了另外一个顺序。</p>

<p>他说《魔戒》作者托尔金在7岁就写了自己人生第一个故事《a green great dragon》（绿色大龙），拿给他妈妈看。妈妈告诉他说：“绝不可以说green great drgon，只能说great green dragon（大的绿龙）。”</p>

<p>托尔金因为妈妈的话受了很大的打击，好些年都没有再写东西。</p>

<p>于是他接着写到：</p>

<blockquote><p>&#8230;adjectives in English absolutely have to be in this order: opinion-size-age-shape-colour-origin-material-purpose Noun. So you can have a lovely little old rectangular green French silver whittling knife. But if you mess with that word order in the slightest you&#8217;ll sound like a maniac.</p></blockquote>


<p>但很快就有人向作者质疑，比如虽然“lovely little boy”是对的而“little lovely boy”是错的，但“big bad wolf”却是对的而“bad big wolf”是错的。比如虽然“big old oak”一般是对的， 但Yosemite国家公园里面可就有一条路就叫“the Old Big Oak Flat Road”。</p>

<p>一路搜索很快就被导到Language Log的<a href="http://languagelog.ldc.upenn.edu/nll/?p=27890">这篇文章</a>，它列了好几个有趣的paper：</p>

<p>Richard Sproat和Chi-lin Shih合作的“<a href="http://link.springer.com/chapter/10.1007/978-94-011-3818-5_30">The Cross-Linguistic Distribution of Adjective Ordering Restrictions</a>”</p>

<p>Alexandra Teodorescu写的“<a href="http://www.lingref.com/cpp/wccfl/25/paper1473.pdf">Adjective Ordering Restrictions Revisited</a>”</p>

<p>Stefanie Wulff写的“<a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.90.2790&amp;rep=rep1&amp;type=pdf">A multifactorial corpus analysis of adjective order in English</a>”</p>

<p>其中燕姿（燕姿是叫Stefanie么）的结论特别有意思：</p>

<blockquote><p>This paper is concerned with the question of which factors govern prenominal adjective order (AO) in English. In particular, the analysis aims to overcome shortfalls of previous analyses by, firstly, adopting a multifactorial approach integrating all variables postulated in the literature, thereby doing justice to the well-established fact that cognitive and psychological processes are multivariate and complex. Secondly, the phenomenon is investigated on the basis of a large corpus, rendering the results obtained more representative and valid of naturally occurring language than those of previous studies. To this end, corpus-linguistic operationalizations of phonological, syntactic, semantic and pragmatic determinants of AO are devised and entered into a Linear Discriminant Analysis, which determines the relative influence of all variables (semantic variables being most important) and yields a classification accuracy of 78%. Moreover, by means of the operationalizations developed in this analysis, the ordering of yet unanalyzed adjective strings can be predicted with about equal accuracy (73.5%).</p></blockquote>


<p>也就是说，在分析了大量的文本之后发现，两个相邻形容词符合固定排序（可以被算法命中）的概率只有73.5%：考虑到两个东西的顺序，随便定一个去猜也是50%的命中率，这基本上就说明没有什么固定的顺序嘛。</p>

<p>那为什么有些形容词的组合确实是固定的顺序呢？比如&#8221;bigger and better&#8221;，比如&#8221;back and forth&#8221;。Copper和Ross写的&#8221;<a href="http://www-personal.umich.edu/~jlawler/haj/worldorder.pdf">World Order</a>&ldquo;里面说：</p>

<blockquote><p>In each of these cases, and in numerous others, the ordering of the two conjuncts is rigidly fixed in normal speech. We will refer to such cases as &#8220;freezes&#8221;. Abraham (1950) and Malkiel (1959) have treated various aspects of this phenomenon. Our own study in this area has focused on two related problems: (1) the problem of trying to specify the types of linguistic environments in which freezes are apt to occur; and (2) the problem of specifying the rules that determine the linear order of two or more fixed conjuncts in particular frozen environments. Although our goal of solving these problems seemed manageable enough at first glance, we have been continually smitten since our initial attempts to tackle these questions by the enormity of the freezing phenomenon itself. Currently, we believe that the study of freezing touches rather directly on matters that extend to a variety of both linguistic and psychological issues. We report below our preliminary progress on this seemingly endless journey. which we hope will eventually culminate in a fairly explicit theory of freezing and its relation to the variety of mental factors we explore here.</p></blockquote>


<p>啊哈，所以他们研究了半天是说：“本来各种顺序都在被使用，但是突然其中一种顺序就被freeze下来了。我们也不知道为什么有些组合固定下来了，这个跟语法没关系，也许是心理学范畴，希望有天我们会懂。”</p>

<p>本座觉得其实也不难懂。语言就是被用的多的就有生命力。本来哪种顺序都可以，因为一些有影响力的人或者地方用了其中的一种顺序，这种顺序就流行起来，别的顺序就渐渐消亡。就好像“喜庆祥和”和“祥和喜庆”估计都是可以的，但是你看了二十年春晚，当然就会觉得“祥和喜庆的夜晚”有些怪怪的。</p>

<p>现在有了互联网，这种现象应该会更厉害了吧。</p>

<p>也多亏了互联网，我们今天要弄明白一个东西，实在是比以前容易太多了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记一碗滚烫的鸡汤]]></title>
    <link href="http://lenciel.com/2016/09/what-you-want/"/>
    <updated>2016-09-08T20:03:03+08:00</updated>
    <id>http://lenciel.com/2016/09/what-you-want</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.com/downloads/images/2016_09/the_player_choose_to_die.jpg" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>费福尔特，37岁的比利时名将，上届伦敦残奥会T52级女子轮椅短跑100米冠军和200米的亚军，一边积极备战即将到来的奥运会，一边在准备葬礼：她宣布在比赛后会安乐死结束自己的生命。</p>

<p>不知道到时候我们会以怎样的心情来观看这样一场比赛。</p>

<p>人很多时候是受欲念牵引的，没有那一念了，什么都失去了意义，包括生命。</p>

<p>对有的人来说这一念是钱，对有的人来说是权，对有的人来说是名。</p>

<p>对有的人来说是学习，对有的人来说是创造，对有的人来说是给予。</p>

<p>对有的人来说是一家人开开心心，对有的人来说是自由自在不受束缚。</p>

<p>更多的时候，它究竟是什么，人们自己也不知道。</p>

<p>因为社会生活对人们造成的影响是巨大的。</p>

<p>大到各种制度法规道德戒律，小到那些我们觉得是鸡汤的文章、书籍、视频，都潜移默化地影响着你，说服了你，按照它们推崇的规矩去思考和生活。</p>

<p>你如果看了<a href="http://www.goodbyewarden.com/">足够多的遗言</a>，会发现很少会有人为那些做过的事后悔。在生命的尽头，大家都为自己没有去做的事后悔。</p>

<p>因为我们循规蹈矩惯了，就会意识不到现在正在做的事情，对于整个生命是否有意义的重要性。</p>

<p>那么我们现在做什么？</p>

<p>我觉得首先要直面自己的欲念。</p>

<p>不管是你想赚钱，还是你想变得很有名。</p>

<p>不管是你想变得很自由，还是你想闭门钻研知识。</p>

<p>不管是你想创造一个平台广泛地影响很多人，还是你要倾注心血好好地疼爱一个人。</p>

<p>人的精力有限，如果每个方面都要去求个平衡，你就会有很多内心冲突。</p>

<p>所以不妨对自己和对别人都先承认，此时此刻，这就是你生命中最重要的事情。</p>

<p>你可能会听到别人说你贪婪，或者任性，或者自私。</p>

<p>这样说的人可能很多，或者这人对你很重要，让你怀疑起自己来。</p>

<p>但要记住其实你选什么都会有人说你是错的，你才对自己的生命有选择和改变选择的权力。</p>

<p>大大方方地承认之后，就全力以赴地去追求就好。</p>

<p>真正的“全力以赴”很多时候是反直觉的。比如你本来年薪百万，但突然意识到你觉得让自己生命有意义的事情，是让贵州小学的孩子们能够有热菜热饭吃。那么真正的“全力以赴”，不是辞职跑去贵州的小学里面做饭，而是赚更多的钱，给孩子们修很好的食堂（除非实际上让你觉得自己的生命更意义的事情，是你拥有更好听的名声，那也承认它就好，追求这个的很多人其实也不错）。</p>

<p>我觉得这个世界，就是大大方方承认自己要什么，并且全力以赴去追求的人太少了，反而给了不择手段偷鸡摸狗的岳不群们很多空间。</p>

<p>来，干了这碗鸡汤。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记一次突然的旅行]]></title>
    <link href="http://lenciel.com/2016/08/qin-hai-lake/"/>
    <updated>2016-08-29T03:59:07+08:00</updated>
    <id>http://lenciel.com/2016/08/qin-hai-lake</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.com/downloads/images/2016_08/qin_hai_lake.jpg" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>七夕刚过的周末，飞到了西宁。出机场天色虽晚，但干燥凉爽，让人忘了一个小时前的闷热不堪。</p>

<p>空气也好，一抬头，织女星当空皎皎，宣告着秋天要来了。“七月流火，九月授衣”，八月本是织布缝衣的忙月，也没计划要旅行，所以来得既突然又任性，不过也是好事一桩：去国外旅行，做攻略是为了更好的享受；在国内旅行，做攻略是为了更好的防范。这个要当心，那个不能买，做完攻略就已经没了玩耍的好心情。</p>

<p>倒不如说走就走，反正旅行最主要的目的就是让人可以滚回来好好上班。</p>

<p>第一站是茶卡盐湖。晒盐和打铁类似，是古代底层人民用来恐吓顽皮小孩儿的苦行当。如今的盐场前面接待游客后面规模生产，早就完成了机械化，已经看不到露天劳作的盐工。</p>

<p><img src="http://lenciel.com/downloads/images/2016_08/day1_chaka_2.jpg" title="Don't touch me..." alt="" /></p>

<p>从布满脏兮兮脚印的湖边走到湖心，“天空之镜”总算被本座召唤出来：刚刚可以淹没脚背的盐湖水，在湖底白色结晶的帮衬下恰好变成了反光镜。头上低垂的黑云，远处巍峨的碧山，被这一望无际到天尽处白茫茫明晃晃的盐湖连了起来。专程来照相的人都穿了红的绿的对比强烈的衣服，三五成群叽叽喳喳地雀跃着，双脚黏黏糊糊的置身于这热闹的镜面，让人很容易感觉到空寂。</p>

<p><img src="http://lenciel.com/downloads/images/2016_08/day1_chaka.jpg" title="Don't touch me..." alt="" /></p>

<p>于是围着盐田乱走，发现盐雕边还有个“卤水体验池”。以前看书讲台湾盐工验卤水，舀出一勺，放几粒莲子，三浮五沉的是淡卤，七八浮起的就是淳卤：这地方却是一堆人在里面泡着，不知道体验的项目是做浮标还是卤肉。</p>

<p>池边还有些人，拿着各色的容器在挖盐。原盐偏黑，并不是非常好看，但是比较大颗粒的结晶却非常有味道。于是我也拿出个瓶子，找特别大颗的捡了一些。边捡边发现旁边的同学取量巨大，完全不像是出于纪念意义，忍不住问了一个大叔：结果他们真的在挖盐，说青海人做泡菜，喜欢用这里的，“那效果市场上买的盐，没，得，比”。</p>

<p>不觉天就暗下来，赶紧回程，投宿在黑水河的蒙古包。条件很差，还是旱厕，沸点70度的地方，用高压锅做出来的饭菜也相当感人。问老板吃过湟鱼没有，结果老板说自己印象不深，但肯定吃了不少。因为妈妈说闹饥荒的时候全靠青海湖里有鱼，不光湟鱼，各种鱼。“后面这几十年，妈妈再也不愿意吃鱼了，看都不想看。”</p>

<p>甲之蜜糖，乙之砒霜。</p>

<p>好处是离青海湖只有几步路，站在帐篷口望过去，半个月亮斜在水上，波光涌动，当真有“河汉清且浅，相去复几许”的意味。</p>

<p>不多久黑云就遮了月光，冷风刺骨。跑到篝火边坐着，却来了一群兴致盎然的大龄美少女，锅庄荡气，歌声回肠，一颦一笑都在取我性命，只好躲进帐篷。</p>

<p>夜里电闪雷鸣，狂风暴雨，我知道第二天这日出是看不了了。醒来果然没有太阳，吃了早饭继续出发，眼看着路两边很多地方河水暴涨漫过了河堤，有些河滩地里比我腰还粗的大树也被连根拔起。青海这边大概很少见这样的大水，于是大家纷纷停车合影留念。</p>

<p><img src="http://lenciel.com/downloads/images/2016_08/day2_qilian_1.jpg" title="Don't touch me..." alt="" /></p>

<p>到了下午，总算是来到了祁连山下，所谓的“东方瑞士小镇”卓尔山。却是非常不巧，<a href="http://baike.baidu.com/item/8%C2%B79%E5%8D%93%E5%B0%94%E5%B1%B1%E6%99%AF%E5%8C%BA%E8%A7%82%E5%85%89%E8%BD%A6%E4%BE%A7%E7%BF%BB%E4%BA%8B%E6%95%85">景区大巴出了事情景区封闭</a>。问酒店老板，原来是景区为了创收，把大门从山上移到山脚，让所有人都必须坐摆渡车上山（这也是国内景区的设计模式）。结果车没有年检，司机驾照只能开小车，上班前还喝了酒，就成了索命阎王。</p>

<p>最近的下一站也还有还几百公里，只好住下，走到景区后面的田里面，搓一把青稞吃了，感谢卓尔山不收之恩。</p>

<p><img src="http://lenciel.com/downloads/images/2016_08/day2_qilian_2.jpg" title="Don't touch me..." alt="" /></p>

<p>第三天就是回程。一路上绵延不尽的祁连山脉，低处是绿油油的牧场，万仞之上却终年覆盖着薄雪，风光比青海湖两边起了癞子一般的草地要好看得多。下车来到一个山腰上规模颇大的藏传寺庙，站在主殿向外望去，背后是威严法相当头棒喝，远方是漫漫天地滚滚红尘，突然想到，陈家洛手托短剑，呆呆地望着霍青桐追上族人，身影渐渐消失草地与蓝天相接之处，应该就是这场面吧。</p>

<p><img src="http://lenciel.com/downloads/images/2016_08/day3_datong_1.jpg" title="Don't touch me..." alt="" /></p>

<p>正在走神，突然呼啦啦来了一帮喇嘛，一言不合就脱了靴子开始唱经。他们年纪都挺小，唱起来还不算熟练，却很鲜活。</p>

<p>好像是得道后的一场兴奋莫名的狂欢。</p>

<p>人生在世，要思考就很难狂欢，要狂欢就难有思考。大概除开修成正果，很难有机会体会狂欢与思想一起流走那份没有杂念的泠然动人。</p>

<p>但得道终归是难事。佛敲打世人，强调过往一切之尘埃落定。但人的难，在于生涯难测，突如其来的变故，无论表面上是轻描淡写、嬉皮笑脸还是折柳阳关，背后往往是暗流涌动，不是那么容易放下。</p>

<p>就像祁连山粗糙山壁上那些灰白色的碱渍，虽一闪而过，却触目惊心。</p>

<p>下山不久，车就进了大通地界。海拔一低，地貌马上就变了。东亚季风到了这里，基本上就到了尽头，再过去不远，就是一片黄土。</p>

<p>那么这次突然的旅行，也就到这里。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记一次快乐的生日]]></title>
    <link href="http://lenciel.com/2016/06/work-for-10-years/"/>
    <updated>2016-06-24T22:12:13+08:00</updated>
    <id>http://lenciel.com/2016/06/work-for-10-years</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.com/downloads/images/2016_06/birthday-0x32.jpg" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>今天收到很多“生日快乐”的祝福。</p>

<p>蓼虫不知辛，容易有快乐时光。</p>

<p>但作为人类，能把生日完全过得快乐，要么是小孩儿，要么就是在过别人的。毕竟二十五岁之后，生日就像个没法取消的闹钟，响起时只让你觉得人生在途，白驹过隙。</p>

<p>这道理中国人其实最懂：所以主要负责祝寿的八仙，看着个个喜庆，其实都很惆怅。项目经理吕洞宾和何仙姑的失败恋情开了个坏头。“能开顷刻花”的韩湘子，“春风一拐”的铁拐李，他们的快乐也是转瞬即逝。边走边唱的蓝采和，算是最逍遥的，一开口也是“红颜一春树，流年一掷梭”，歌词再美，也是令人心灰的消极意味。</p>

<p>谁无痼疾难相笑，各有风流两不知。</p>

<p>所以看了很多书睡了很多姑娘的伍迪.艾伦说，变老没好处。“岁月流逝，你也不会变得更聪明，只会渐渐崩裂。人们总会说得很好听，你成熟了，你开始了解到生命的意义，也学着接受了。但若给你一个变回年轻的机会，这些你都可以不要。”</p>

<p>你看，得道仙人也好风流才子也罢，大都看起来清狂奇峻，骨子里敏感沉郁。书读得更好，才智更高的，一般都凋残得快。不然为什么是沈周常笑笑，而伯虎总怅怅。</p>

<p>毕竟人生忧患识字始，要承受世界被扩大的痛苦，难免寂寞。</p>

<p>所以钱钟书说，快乐在这狗屁倒灶的生活里，就好比诱引小孩吃药的方糖。</p>

<p>这样算起来，我很幸运。</p>

<p>作为一名创业中的大龄程序员，和一群志趣相投的伙伴混在一起，每天都在学习新的东西，处理新的问题。我们很多人都已经工作超过十年了，还是对技术有好奇心，绝大多数人都还在写代码。</p>

<p>在编程这个行当里面，大家好像都觉得到年纪了就不该“亲自上阵”了。说白了，就算打算一辈子做技术的人，也是把“做更好的Engineer”当成目标的多，把“做更好的Programmer当成目标”的很少。</p>

<p>这大概是Thorstein Veblen在<a href="https://book.douban.com/subject/6428903/">《有闲阶级论》</a>里面讲的那个道理：脱离与谋生直接相关的工作，成为掌握着世界的主动权，控制着别人的节奏和命运，指挥别人去从事具体生产工作的“有闲阶级”，是从狩猎时代开始，人类社会普遍的奋斗目标。</p>

<p>用他的原话说，很多时候我们追逐的往往不是utility（功用）而是prestige（声望），这是一种心理上根深蒂固的需求：人类解决欲望的方式，就是不断地从各个层面满足它，而不是克服它。</p>

<p>因为克服起来太难了。</p>

<p>这态度本身也没有问题，但总是有些人选择比较忙碌的生活的。</p>

<p>这就好比有的人用自杀对抗命运，有的人用活着对抗命运。</p>

<p>于是有的人用闲适对抗命运，有的人用忙碌对抗命运。</p>

<p>我很喜欢的<a href="https://en.wikipedia.org/wiki/Donald_Knuth">Knuth</a>大叔是站在活到老写到老这边的，他说过：</p>

<blockquote><p>People who discover the power and beauty of high-level, abstract ideas often make the mistake of believing that concrete ideas at lower levels are relatively worthless and might as well be forgotten. (…) on the contrary, the best computer scientists are thoroughly grounded in basic concepts of how computers actually work, and indeed that the essence of computer science is an ability to understand many levels of abstraction simultaneously.</p></blockquote>


<p>当然，软件开发这职场里面，大多数人每天都很忙。有的是忙着开虚头巴脑的会；有的人是忙着混各种论坛、讲座和圈子；有的是忙着假装加班好不用回家带孩子，在公司里面看会儿视频打会儿游戏。</p>

<p>这些忙，既骗别人，也骗自己。</p>

<p>与之相反，年轻的时候，找到值得自己投入的方向，干一些真正在创造价值的事情，就不妨好好忙一下。</p>

<p>这是不是就算，但行好事，莫问前程。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简单验证码的快速识别]]></title>
    <link href="http://lenciel.com/2016/06/python-captcha-solution/"/>
    <updated>2016-06-16T18:48:14+08:00</updated>
    <id>http://lenciel.com/2016/06/python-captcha-solution</id>
    <content type="html"><![CDATA[<p>昨天饭局上聊起来自动化测试或者是别的奇怪事业里经常需要面对的一个问题：验证码识别。</p>

<p>其实验证码的识别，技术上来说可以作为古老的OCR（Optical Character Recognition）问题的一个子集：因为OCR其实就是从图片上把文字认出来嘛。</p>

<p>但它的有趣之处在于，验证码，也就是CAPTCHA，本身就是&#8217;Completely Automated Public Turing test to tell Computers and Humans Apart&#8217;的缩写，也就是说在设计上它的目的就是要：</p>

<ol>
<li>让人很容易认识出来</li>
<li>让机器很难认识出来</li>
</ol>


<p>所以如果你电脑识别出来了验证码，要么就是它特别容易不符合#2的要求，要么就是你实现了很不错的人工智能算法，这篇文章是讲第一种情况。</p>

<p>传统的做法来识别OCR，主要需要处理的是下面三个环节：</p>

<ol>
<li>图片二值化</li>
<li>字符的分割</li>
<li>字符的识别</li>
</ol>


<a name="L.................."></a>
<h3>二值化怎么做</h3>

<p>所谓的“二值化”，就是图片上的像素要么灰度是255（白），要么是0（黑）。大致的思路就是把灰度大于或等于阈值的像素判为属于你关注的文字，置成0；其他的像素点灰度置为255。</p>

<p>具体的操作，我一般使用下面几种方式：</p>

<ol>
<li>如果是特别简单地处理，用PIL库</li>
<li>如果是比较复杂的但是不需要很细致的控制，用<a href="http://imagemagick.sourceforge.net/">ImageMagick</a>的<code>convert</code>命令</li>
<li>如果是特别复杂，需要反复试验各种算法的，用OpenCV</li>
</ol>


<p>所以下面这两个验证码，哪个的难度大一些？</p>

<p style="font-size: 0.8em;
"><img src="http://lenciel.com/downloads/images/2016_06/orig_code.png" title="Don't touch me..." alt="Vhost threshold" data-pin-nopin="true"><br/>
图1. 微林的验证码</p>




<p style="font-size: 0.8em;
"><img src="http://lenciel.com/downloads/images/2016_06/orig_code_2.jpg" title="Don't touch me..." alt="Vhost threshold" data-pin-nopin="true"><br/>
图2. 饭局后J.Snow提供的验证码</p>


<p>如果你脑子里面没有二值化的概念大概会觉得第一个难度大一些，因为以人眼的视线去考虑，好像第一张要“难分辨”一些。</p>

<p>但其实第一张图所有的噪声都是花花绿绿的颜色，而验证码本身是纯粹的黑色，这种图片处理起来是相对容易的。只需要找到验证码像素点的颜色，用这种颜色选取这些像素点，拷贝到一张全白的图片上面即可。</p>

<p>要获取验证码的像素颜色可以<a href="http://www.boyter.org/decoding-captchas/">参考这里</a>的思路，把图片转成256色的，然后对所有的像素做一个统计然后标出它们在整个图片里面出现的频率。因为觉得原文里面的代码写得比较啰嗦（要学会写lamda啊）就做了一些修改：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_top_pixels</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="n">min_pt_num</span><span class="p">):</span>
</span><span class='line'>    <span class="n">im</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>
</span><span class='line'>    <span class="n">im</span> <span class="o">=</span> <span class="n">im</span><span class="o">.</span><span class="n">convert</span><span class="p">(</span><span class="s">&quot;P&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">top_pixels</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">index</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">im</span><span class="o">.</span><span class="n">histogram</span><span class="p">()):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">index</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nb">int</span><span class="p">(</span><span class="n">min_pt_num</span><span class="p">):</span>
</span><span class='line'>            <span class="n">top_pixels</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">top_pixels</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">get_top_pixels</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个程序运行的结果如下：</p>

<blockquote><p>$ python get_histdata.py regcode.png 30</p><p>[(0, 1471), (1, 214), (10, 110), (11, 97), (2, 85), (9, 83), (6, 66), (8, 58), (7, 49), (5, 37)]</p></blockquote>


<p>拿到了颜色，就可以写一个简单的程序从图片里面拷贝这些像素到一张干净的图：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">clean_image</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="n">key_pix</span><span class="p">):</span>
</span><span class='line'>    <span class="n">im</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>
</span><span class='line'>    <span class="n">im</span> <span class="o">=</span> <span class="n">im</span><span class="o">.</span><span class="n">convert</span><span class="p">(</span><span class="s">&quot;P&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">im2</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s">&quot;P&quot;</span><span class="p">,</span> <span class="n">im</span><span class="o">.</span><span class="n">size</span><span class="p">,</span> <span class="mi">255</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">im</span><span class="o">.</span><span class="n">size</span><span class="p">[</span><span class="mi">1</span><span class="p">]):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">im</span><span class="o">.</span><span class="n">size</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
</span><span class='line'>            <span class="n">pix</span> <span class="o">=</span> <span class="n">im</span><span class="o">.</span><span class="n">getpixel</span><span class="p">((</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">))</span>
</span><span class='line'>            <span class="c"># color of pixel to get</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">pix</span> <span class="o">==</span> <span class="n">key_pix</span><span class="p">:</span>
</span><span class='line'>                <span class="n">im2</span><span class="o">.</span><span class="n">putpixel</span><span class="p">((</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">im2</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s">&quot;convert_</span><span class="si">%s</span><span class="s">.png&quot;</span> <span class="o">%</span> <span class="n">key_pix</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">clean_image</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>出现的最多的<code>0</code>显然是背景色，所以对<code>1</code>和<code>10</code>运行脚本：</p>

<blockquote><p>$ python convert_grayscale.py regcode.png 1<br/>$ python convert_grayscale.py regcode.png 10</p></blockquote>


<p>结果如下：</p>

<p><img src="http://lenciel.com/downloads/images/2016_06/convert_1.png" title="Don't touch me..." alt="Vhost threshold" data-pin-nopin="true">&nbsp;&nbsp;&nbsp;&nbsp;<img src="http://lenciel.com/downloads/images/2016_06/convert_10.png" title="Don't touch me..." alt="Vhost threshold" data-pin-nopin="true"></p>


<p>很明显目标像素是1而不是10。</p>

<p>而J. Snow的这张图，首先验证码本身就是幻彩的而不是均匀一致的颜色，然后噪声又都是用这些幻彩颜色来生成的，所以如果只是简单的对颜色排序，会得到下面的结果：</p>

<blockquote><p>[(225, 349), (139, 170), (182, 161), (219, 95), (224, 64), (189, 54), (175, 47), (218, 40), (90, 36), (96, 33)]</p></blockquote>


<p>然后我们对排名靠前的像素进行提取会得到下面的结果：</p>

<p><img src="http://lenciel.com/downloads/images/2016_06/convert_225.png" title="Don't touch me..." alt="Vhost threshold" data-pin-nopin="true"><img src="http://lenciel.com/downloads/images/2016_06/convert_139.png" title="Don't touch me..." alt="Vhost threshold" data-pin-nopin="true"><img src="http://lenciel.com/downloads/images/2016_06/convert_182.png" title="Don't touch me..." alt="Vhost threshold" data-pin-nopin="true"><img src="http://lenciel.com/downloads/images/2016_06/convert_219.png" title="Don't touch me..." alt="Vhost threshold" data-pin-nopin="true"></p>


<p>这种情况下怎么办？直观观察一下验证码，会发现背景噪声点相比验证码像素点来说很少（这也正常，都是一个颜色如果太多就没法看了）， 很适合先做一些切割，然后进行模糊匹配（因为验证码的像素是幻彩的不是单一的，需要匹配相近像素点），然后再做二值化。</p>

<p>直接用IM的convert来处理比写代码简单：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>convert 1.pic.jpg -gravity Center -crop 48x16+0+0  +repage -fuzz 50% -fill white -opaque white -fill black +opaque white resultimage.jpg
</span></code></pre></td></tr></table></div></figure>


<p>效果如下：</p>

<p><img src="http://lenciel.com/downloads/images/2016_06/orig_code_2.jpg" title="Don't touch me..." alt="Vhost threshold" data-pin-nopin="true">&nbsp;&nbsp;&nbsp;&nbsp;<img src="http://lenciel.com/downloads/images/2016_06/convert_im.jpg" title="Don't touch me..." alt="Vhost threshold" data-pin-nopin="true"></p>


<a name="L.................."></a>
<h3>字符怎么分割</h3>

<p>其实整个验证码的识别里面，最难的是分割。特别是很多严肃的验证码，字体不是标准字体或者会变形，互相还可能粘连或者重叠，分割起来是非常难的。</p>

<p>但这里拿到的验证码相对简单，这部分不是问题就不展开了。</p>

<a name="L..............."></a>
<h3>字符的识别</h3>

<p>对于这里拿到的验证码而言，因为都是标准字体，可以直接使用OCR的开源工具读取，比如<a href="https://github.com/tesseract-ocr/tesseract/wiki">tesseract</a>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tesseract resultimage.jpg -psm <span class="m">7</span> output <span class="o">&amp;&amp;</span> cat output.txt
</span><span class='line'>
</span><span class='line'>Tesseract Open Source OCR Engine v3.04.01 with Leptonica
</span><span class='line'>Warning in pixReadMemJpeg: work-around: writing to a temp file
</span><span class='line'>
</span><span class='line'>YLNU
</span></code></pre></td></tr></table></div></figure>


<p>如果不是标准字体的，因为分割完毕了就拿到了独立的字符，要识别就可以建一个模型，不断的训练它，来识别每个字符。</p>

<a name="L..........................."></a>
<h3>如果是更困难的呢？</h3>

<p>可能你会觉得围棋电脑都会下了，那么认识验证码为什么还是比较难？</p>

<p>其实<a href="https://www.google.com.hk/search?safe=off&amp;q=CNN+captcha&amp;oq=CNN+captcha&amp;gs_l=serp.3...1563.1932.0.2169.3.3.0.0.0.0.0.0..0.0....0...1c.1.64.serp..3.0.0.q4EdDQLrqyk">随便搜一下</a>就会发现有很多人在做这方面的实验，主要的思路就是把n个字符组成的验证码当成有n个标签的图片来用CNN来解决。加上最近很多大公司开放了自己的人工智能平台，比如Google的Tensorflow，我们这些没有大量计算资源的普通人也可以用它们实现自己的想法了。</p>

<p>推荐参考链接：</p>

<ol>
<li><a href="https://matthewearl.github.io/2016/05/06/cnn-anpr/">CNN辨认车牌</a></li>
<li><a href="http://www.cs.sjsu.edu/faculty/pollett/masters/Semesters/Spring15/geetika/CS298%20Slides%20-%20PDF">CNN验证码识别</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starry Starry Night]]></title>
    <link href="http://lenciel.com/2016/05/starry-starry-night/"/>
    <updated>2016-05-19T13:57:30+08:00</updated>
    <id>http://lenciel.com/2016/05/starry-starry-night</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.com/downloads/images/2016_05/essay_harry_potter.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>看paper是不是比较无聊的事情？</p>

<p>我试着在自己看的每篇论文标题前面加上“Harry Potter and The”，要不你也试试？</p>

<p>当然，更好的状态是，其实你不是因为要做某个事情在看paper，而是出于好玩。</p>

<p>比如最近我看了一篇<a href="http://lenciel.com/downloads/code/2016JAHH_19_18C.pdf">paper</a>，名字叫“Seasonal Dating of Sappho’s ‘Midnight Poem’ Revisited”。</p>

<p><a href="https://zh.wikipedia.org/wiki/%E8%8E%8E%E5%AD%9A">Sappho</a>作为古希腊&#8221;第十繆斯&#8221;，在国内没有多显赫的名声，能找到的只有豆瓣上一篇和她相关艺术品的<a href="https://site.douban.com/109824/widget/notes/245567/note/208098917/">介绍文章</a>。其实她的腕儿相当大，女同的称呼“lesbian”就取自她的居住地“Lesbos”。</p>

<p>而这篇论文是说，如何根据Sappho下面这首诗里面的描述，来判断这首诗写作于一年里面的什么时节。</p>

<blockquote><p>The Moon hath left the sky;<br/>Lost is the Pleiads&#8217; light;<br/>It is midnight<br/>And time slips by;<br/>But on my couch alone I lie.</p></blockquote>


<p>其中<a href="http://earthsky.org/favorite-star-patterns/pleiades-star-cluster-enjoys-worldwide-renown">Pleiasds</a>，如果你喜欢科幻的话肯定不会陌生，就是著名的金牛座七姐妹星团：昴宿星团（阿根廷一直有一帮人号称自己是来自这个星球，但其实这个星团有数不清的恒星组成）。</p>

<p>所以，Sappho她：</p>

<ol>
<li>住在Lesbos</li>
<li>在午夜之前看到昴宿星团消失在地平线</li>
</ol>


<p>在这些信息的帮助下，天文学家通过<a href="http://astronomy.starrynight.com/">软件</a>重建当时的星图，来得出了以下的结论：</p>

<blockquote><p>Assuming that Sappho observed from Mytilene on the island of Lesbos, we determined that in 570 BC the Pleiades set before midnight from 25 January on, and were lost to the evening twilight completely by 6 April.</p></blockquote>


<p>发了paper之后，作者还<a href="http://www.eurekalert.org/pub_releases/2016-05/uota-usu051316.php">嘚瑟</a>了一下，大概是说“这种准确描述星象和时间的作品实在是少，被我们抓到（发了篇有趣的paper）哇哈哈哈”。</p>

<p>的确，要比较明确地描述，你首先得认识，能做到这点的诗人可不多。比如我<a href="https://movie.douban.com/subject/2373195/">Walt H. White</a>枕边放的Walt Whitman是搞清楚了的：</p>

<blockquote><p>Up through the darkness,<br/>While ravening clouds, the burial clouds, in black masses spreading,<br/>Lower sullen and fast athwart and down the sky,<br/>Amid a transparent clear belt of ether yet left in the east,<br/>Ascends large and calm the lord-star Jupiter,<br/>And nigh at hand, only a very little above,<br/>Swim the delicate sisters the Pleiades.</p></blockquote>


<p>再比如我大杜甫是搞清楚了的：</p>

<blockquote><p>人生不相见，动如参与商。<br/>今夕复何夕，共此灯烛光。</p></blockquote>


<p>参和商两个星，没法同时出现，用来形容人生不相见算是恰如其分。</p>

<p>还有流行歌选集《诗经》那些写词的是搞清楚了的：</p>

<blockquote><p>七月流火，九月授衣。</p></blockquote>


<p>“火”是指<a href="http://www.bud.org.tw/chen/chen0008.htm">心宿二</a>，所以“七月流火”是说这颗星逐渐<a href="http://iask.sina.com.cn/b/10608508.html">从天空中消失</a>。</p>

<p>至于什么“七月流火，酷暑难耐”的用法，倒是现代人自己没有搞清楚了。</p>

<div id="player1" class="aplayer"></div>


<p><link rel="stylesheet" href="http://lenciel.com/downloads/static/css/APlayer.min.css"></p>

<script src="http://lenciel.com/downloads/static/js/APlayer.min.js"></script>


<script>
var ap1 = new APlayer ({
element: document.getElementById ('player1'),
narrow: false,
autoplay: true,
showlrc: 1,
mutex: true,
theme: '#615754',
music: {
   title: 'Vincent',
   author: 'Don Mclean',
   url: 'http://7rflrq.com1.z0.glb.clouddn.com/vincent.mp3',
   pic: 'http://7rflrq.com1.z0.glb.clouddn.com/vincent.jpeg',
   lrc: "[ar:Declan Galbraith]\n [al:Thank You]\n [00:00.00]Declan Galbraith - Vincent (Starry, Starry Night)\n [00:00.25]Starry, starry night.\n [00:05.03]Paint your palette blue and grey,\n [00:09.75]Look out on a summer's day,\n [00:13.04]With eyes that know the darkness in my soul.\n [00:17.45]Shadows on the hills,\n [00:21.92]Sketch the trees and the daffodils,\n [00:27.02]Catch the breeze and the winter chills,\n [00:30.48]In colors on the snowy linen land.\n [00:37.20]Now I understand what you tried to say to me,\n [00:46.42]How you suffered for your sanity,\n [00:51.51]How you tried to set them free.\n [00:54.58]They would not listen, they did not know how.\n [01:00.45]Perhaps they'll listen now.\n [01:05.80]Starry, starry night.\n [01:10.64]Flaming flowers that brightly blaze,\n [01:15.33]Swirling clouds in violet haze,\n [01:19.24]Reflect in Vincent's eyes of china blue.\n [01:23.71]Colors changing hue,\n [01:28.59]morning field of amber grain,\n [01:33.52]Weathered faces lined in pain,\n [01:37.15]Are soothed beneath the artist's loving hand.\n [01:42.27]Now I understand what you tried to say to me,\n [01:51.70]How you suffered for your sanity,\n [01:56.30]How you tried to set them free.\n [01:59.49]They would not listen, they did not know how.\n [02:05.17]Perhaps they'll listen now.\n [02:07.62]For they could not love you,\n [02:12.65]But still your love was true.\n [02:17.37]And when no hope was left in sight\n [02:20.99]On that starry, starry night,\n [02:24.18]You took your life, as lovers often do.\n [02:29.65]But I could have told you, Vincent,\n [02:33.61]This world was never meant for one\n [02:36.20]As beautiful as you.\n [02:42.70]Starry, starry night.\n [02:47.85]Portraits hung in empty halls,\n\n [02:52.28]Frameless head on nameless walls,\n [02:56.35]With eyes that watch the world and can't forget.\n [03:00.72]Like the strangers that you've met,\n [03:04.42]All the ragged men in the ragged clothes,\n [03:09.85]The silver thorn of bloody rose,\n [03:13.78]Lie crushed and broken on the virgin snow.\n [03:18.97]Now I think I know what you tried to say to me,\n [03:29.16]How you suffered for your sanity,\n [03:34.07]How you tried to set them free.\n [03:37.88]They would not listen, they're not listening still.\n [03:43.51]Perhaps they never will...\n"
    }
});
ap1.init();
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一天很长，十年很短]]></title>
    <link href="http://lenciel.com/2016/05/but-does-it-float/"/>
    <updated>2016-05-18T20:50:55+08:00</updated>
    <id>http://lenciel.com/2016/05/but-does-it-float</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.com/downloads/images/2016_05/ppl_5.jpg" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>夏天来了。</p>

<p>经常让我读他的文章忍不住点头称是的Sam，在他的<a href="http://36kr.com/p/532396.html">36条人生建议</a>里面略无厘头的插了一句：“夏天是最棒的”。</p>

<p>和他结尾的那句“The days are long but the decades are short”一样，充满了玄机。</p>

<p>那么夏天究竟好在哪里？本座感觉，有一半要归于可以吃冰过的西瓜。</p>

<p>现如今的西瓜，要不就是你挑它的时候，已经被切开了用保鲜膜封好等着你；要不就是你随随便便挑一只，小贩三下五除二切好让你拎走。</p>

<p>小时候挑瓜，并不是这么着急。不管是跟大人去买，还是自己去买，都要装模作样的拍拍这个，听听那个，然后在卖瓜人的建议下庄严地选中一个，由他在那瓜皮上划出个不深不浅的三角形，挖出来看过，再把那挖出来的一块塞回去，才付钱装好带走。</p>

<p>那会儿本座吃西瓜还有两个特别之处。第一是不吐籽：总有人说这样会长出点儿什么，就很不服气的想看看究竟会不会长出什么。第二是吃完一定会用瓜皮反复揉搓手背：因为那时候冬天总是满手冻疮，老妈就说了这个偏方。</p>

<p>虽然弄了之后每年还是长冻疮，但这实在是世界上最舒适宜人的偏方了，所以现在吃瓜还经常要玩玩。</p>

<p>夏天好在有冰西瓜，那为什么“一天很长，十年很短”？</p>

<p>我觉得你到了一定年纪，又没有变得太伶俐，就总会明白。</p>

<p>比如本座的今天，有收到公司签了成立以来最大一单的喜讯，也有接到长辈辞世的电话。本来就腰酸背痛，伴随着心绪不宁，还得吭哧吭哧地搞一坨坨奇葩的问题，就觉得日头好长。</p>

<p>那么十年短不短呢？这两天应景在床头又读了一遍高尔泰的《寻找家园》，再想起最近和人聊起的胡适和陈衡哲，杨宪益和戴乃迭，觉得别说十年，五十年、一百年也不过弹指一挥间。</p>

<p>所以说《后汉书•襄楷传》里面有一段说延熹九年楷上疏极谏：</p>

<blockquote><p>有云：“或言老子入夷狄为浮屠，浮屠不三宿桑下，不欲久生恩爱，精之至也。”章怀太子注曰：“言浮屠之人寄桑下者不经三宿，便即移去，示无爱恋之心也。”</p></blockquote>


<p></p>

<p>周作人读了之后大概是对这种<code>不经三宿，便即移去，示无爱恋之心</code>颇为不满，所以把自己的集子取名叫《桑下谈》，还在序中说道：</p>

<blockquote><p>浮屠应当那样做，我们凡人是不可能亦并无须，但他们怕久生恩爱，这里边很有人情，凡不是修道的人当从反面应用，即宿于桑下便宜有爱恋是也。本来所谓恩爱并不一定要是怎么急迫的关系，实在也还是一点情分罢了。住世多苦辛，熟习了亦不无可留连处，水与石可，桑与梓亦可，即鸟兽亦可也，或薄今人则古人之言与行亦复可凭吊，此未必是怀旧，盖正是常情耳。语云，一树之荫亦是缘分。若三宿而起，掉头迳去，此不但为俗语所讥，即在浮屠亦复不情，他们不欲生情以损道心。正因不能乃尔薄情也。</p></blockquote>


<p></p>

<p>的确，世界上到处是荒谬和残酷，丑多于美，苦多于乐，并且今天这样，明天还会继续这样。但即使如此，对人生际遇动不动就消极对待怨天尤人，或者动不动就斩钉截铁地要诀别的人，总是让人觉得活得目的性强了一些。</p>

<p>当然，宿于桑下便宜有爱恋，确实不是人人都需要的生活态度。就好像《西游记》里面最后一回：</p>

<blockquote><p>说八大金刚使了第二阵香风，把三藏师徒四人，送到了东土，渐渐望见长安。金刚停在空中，叫道：“圣僧，此间乃长安城了。我们不好下去，这里人伶俐……”</p></blockquote>


<p></p>

<p>圣僧面对伴着自己走过一场荒凉旅程，如此谦卑的金刚，既没有拱手，也没有敛身，更别说道声谢谢。如果是“悄悄问圣僧，女儿美不美”的局面，师傅你大概不会这么没有EOF。</p>

<p>你们大多数人类，还是太伶俐了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一颗赛艇]]></title>
    <link href="http://lenciel.com/2016/05/the-exciting-writings/"/>
    <updated>2016-05-06T04:26:09+08:00</updated>
    <id>http://lenciel.com/2016/05/the-exciting-writings</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.com/downloads/images/2016_05/jpm.jpg" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>昨天立夏，闷热异常，晚上终于来了几声雷，却是雷声大雨点小。</p>

<p>到了半夜，突然热闹起来。大雨不懈，夜风也疾，白筋鞭窗，噼啪不止。</p>

<p>我在客厅里伴着这电闪雷鸣写程序，场面看起来应该多少有些一颗赛艇。</p>

<p>如果不是键盘敲得太响，有绰约的女鬼来袭也说不定。</p>

<p>社会主义国家家长们都不怎么讲鬼故事，本座对鬼的印象一开始来自书：虽然《西游记》连续剧里面各式各样的鬼怪很多，但因为形象太具体，反而不会觉得他们有多鬼，看过就不会去想。而书里面要精彩很多：子路和孔子除开创办Subway，还讨论怪力乱神；迅哥儿说起保姆跟《山海经》，头头是道；《聊斋》里面的狐狸系最丰富多彩，特别是在表哥还是表姐家里找到的那本未删节的，多少个夜晚，一颗赛艇。</p>

<p>到了王祖贤的小倩和张曼玉的青蛇出现，女鬼可爱程度突然达到了顶峰，同时也让人明白之前电视里的鬼不招人惦记，并不是因为形象太具体了。可惜好景不长，日韩女鬼不远万里来袭：这些女鬼，就真的有些吓人了。</p>

<p>再到了大学，鬼的来源又丰富了些。贾平凹的各种鬼，莫言的各种鬼，张爱玲的小红人，但这些鬼虽然生动，却不那么浪漫了。</p>

<p>一颗赛艇的内容，还是跟鬼没有关系的书里面多一些。</p>

<p>而作为一名还算看过些书的同学，本座得说，大概是因为古往今来大多数中国人这方面比较压抑，写作水平整体偏低（这方面不压抑的都不会沦为作家吧）。表现在白描太多，暗示太少，偶尔臆想一下，鲁莽粗俗，一点儿幽默感都没有。相比之下，大概神仙们就比较乱来，西方文学作品里咸湿的地方一直相当咸湿（有人专门研究莎士比亚的这方面还写了《<a href="https://www.amazon.com/Filthy-Shakespeare-Shakespeares-Outrageous-Sexual-ebook/dp/B002XW28D0?ie=UTF8&amp;btkr=1&amp;ref_=dp-kindle-redirect">Filthy Shakespeare</a>》），不说男女之情，连同性的爱情也写得相当感人。当然，你只要看过电影《莎翁情史》（这部电影给本座的另外一个感受就是Gwyneth Paltrow确实不是Chris Martin能hold住的）就会明白这主要还是日子过得不一样。</p>

<p>比如说到这方面绕不过去的《金瓶梅》，连太祖这样的“仙人洞，在险峰”路数的选手都批评作者<a href="http://history.sohu.com/20150911/n420836423.shtml">对女性角色缺乏善意</a>。但是你要明白，《金瓶梅》就算非常不错的水准了，太祖可是翻来覆去地看，如果有豆瓣，书评至少提交五次。而不幸出生在南京传教士家庭的《金瓶梅》英译版作者芮效卫一翻就是40年，按<a href="http://news.inewsweek.cn/detail-634.html">介绍里面</a>说，从17岁拿起《金瓶梅》就再也没放下：如果是在国外，大概并不需要放不下它吧。</p>

<p>再比如说到这方面绕不过去的贾平凹老师，一部小说至少十来句“下面湿了”，湿是湿了，还不如树新风足球队“最近下面有点儿咸你要不要吃”好玩。</p>

<p>因为这方面很残，中国的故事里面很少有被爱一方可以好好欣赏对方可爱之处的设定：无论是西门庆潘金莲，还是白娘子祝英台，爱恋的对象要么异常淫荡，要么非常无趣。</p>

<p>但咱们也有例外。</p>

<p>比如汤显祖老师的《牡丹亭》。</p>

<p>有掉书袋的：</p>

<blockquote><p>“他倚太湖石，立着咱玉婵娟。待把俺玉山推倒，便日暖玉生烟。捱过雕栏，转过秋千，掯着裙花展。敢席着地，怕天瞧见。好一会，分明美满，幽香不可言！”</p></blockquote>


<p>有很市井的：</p>

<blockquote><p>“见了你紧相偎，慢厮连，恨不得和你肉儿般团成片也，逗的个日下胭脂雨上鲜。”</p></blockquote>


<p>有非常直白的：</p>

<blockquote><p>“无多，花影阿那。劝奴奴睡也，睡也奴哥。春宵美满，一霎暮钟敲破。娇娥，似前宵云雨羞怯讹，敢今夜翠颦轻可。睡则那，把腻乳微搓，酥胸汗帖，细腰春锁。”</p></blockquote>


<p>也有非常暗示的：</p>

<blockquote><p>“他兴心儿紧咽咽，呜着咱香肩；俺可也慢掂掂做意儿周旋，周旋。等闲间把一个照人儿昏善。这般形现，那般软绵，忒见一片撒花心的红叶儿吊将来半天，吊将来半天。敢是咱梦魂儿厮纒？”</p></blockquote>


<p>是不是让你觉得“自小孤单，生事微渺，每日情思昏昏”的柳梦梅过得还不错。</p>

<p>咦，女鬼还没来，天就亮了？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[人工智能，奇点及其他(一)]]></title>
    <link href="http://lenciel.com/2016/03/alphago-and-ai/"/>
    <updated>2016-03-15T02:59:42+08:00</updated>
    <id>http://lenciel.com/2016/03/alphago-and-ai</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.com/downloads/images/2016_03/go_ai.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>3月14日，是个很魔性的日子：这天是爱因斯坦的生日，也是卡尔马克思的忌日，还是“π日&#8221;——纪念圆周率弄的“数学节&#8221;，忒魔性。</p>

<p>虽然同一天是巧合，但马克思主义、广义相对论和数学真的有一个共性：它们都在人类社会被广泛地讨论，反复地消费，但真正明白它们的人类非常少。</p>

<p>当然，多年之后回看2016年的这天，大概不会找到关于上面几样东西的太多痕迹：因为AlphaGo和李世乭的对弈，大家都讨论人工智能呢。</p>

<p>在朋友圈或者小网站满天飞的段子里，严肃媒体纷纷跟进匆忙写就的报道里，以及少数科学家对未来的惊世骇俗的预测里，人工智能的进展被<a href="http://chuansong.me/n/1933903">大大神话</a>了。</p>

<p>而在专业圈子里面，不知道是因为看到小白们纷纷讨论科学问题感到不屑一顾，还是对媒体没把自己研究的领域大肆报道感到呼吸不畅，人工智能的进展又被一些人<a href="http://www.yinwang.org/blog-cn/2016/03/09/alpha-go">大大地</a><a href="http://hunch.net/?p=3692542">低估</a>了。</p>

<p>而本座多少也算接触过人工智能：当年导师第一次关怀小弟，就扔我去实现一个基于网格计算的象棋程序。项目虽然失败了，却也激发了本座写代码的兴趣。自动化系的所有课程，优化相关的我还算有点儿兴趣，毕业后一有机会也都喜欢实现算法来玩玩：去年参加基友组织的2048编程比赛，正好还仔细读过台湾道友的一个使用了蒙特卡洛树搜索的实现。</p>

<p>所以虽然并不太懂，也想结合自己知道的，为避免人工智能变成下一个被广泛讨论反复消费，但真正明白的人太少的话题，尽一份普通人的力量。</p>

<a name="L............"></a>
<h3>人工智能</h3>

<p>当我们说人工智能的时候，我们在说什么，对不同的人来说很不一样。</p>

<p>比如这是我的老同学，现在从事无人系统教学和研究的李教授在朋友圈里面的一段话：</p>

<blockquote><p>α狗的表现说明了在深度网络的帮助下，多步策略优化已经可以被数据驱动得很不错了。自从两年前nature 上发表了将深度网络与增强学习结合的工作，就可以预见这一天很快到来。不过，要说这是人工智能的伟大胜利，可能有些牵强。这种有准确问题表示并且规则清晰的搜索任务，算不算人工智能估计还得另说呢。非要说人类能力干不过就算牛，那么在干微分方程数值解等任务上，计算机早就甩我们一百条街了。神话下棋计算机的估计有两类人，一是不太懂行的科普作家，二是准备骗人的商家。当年一个傅立叶变换都能包装成各种包治百病的“x林频谱仪&#8221;，还有什么是不可能的？</p></blockquote>


<p>可以说老李的出发点和本座灌这篇水的意图类似，说的内容我也觉得很赞。唯独“这种有准确问题表示并且规则清晰的搜索任务，算不算人工智能估计还得另说呢&#8221;，让我想起来人工智能奠基人之一麦卡锡当年的娇嗔：</p>

<blockquote><p>As soon as it works, no one calls it AI.</p></blockquote>


<p>也就是说，虽然人工智能相关的技术我们每天都在大量使用，但因为执行端是电脑，而电脑能够执行的仍然是表达算法的代码，所以一个人工智能的问题一旦被解决，就变成了一个算法，没有人认为它是人工智能了。</p>

<p>那么人工智能究竟是什么呢？</p>

<a name="L........................"></a>
<h4>学术界的人工智能</h4>

<p>治学先治史。</p>

<p>人工智能的奠基，公认是在60年前的<a href="https://zh.wikipedia.org/wiki/%E8%BE%BE%E7%89%B9%E7%9F%9B%E6%96%AF%E4%BC%9A%E8%AE%AE">达特茅斯会议</a>，原因之一是会议的正式名字：“人工智能夏季研讨会” (Summer Research Project on Artificial Intelligence)，据考证这是Artificial Intelligence首次被正式公开使用。叫这么玄幻主要是大会的经费需要找洛克菲勒基金会申请：目的并没有完全达到，$13500的预算被批准了$7500。</p>

<p>但这次花销略低于国企普通招待晚宴的会议产生的影响却是深远的，我们只需要看看与会者他们人生轨迹的变化：</p>

<p>香农（C. E. Shannon）：信息论的奠基人不用介绍了，当时已经是贝尔实验室大佬的香农，是因为和图灵交流后对计算机下棋有了兴趣（在1949年和1950年他发表了<a href="https://chessprogramming.wikispaces.com/Claude+Shannon">两篇讲计算机下棋</a>的文章），还是被拉去当腰封的，现在很难弄清了：总之这会议对香老爷产生的影响不大。</p>

<p>但有四个人后来拿了图灵奖：</p>

<ul>
<li><p>明斯基（M. Minsky）：普林斯顿数学系主任塔克（Tucker）的学生（他带Minsky之前带的就是纳什），后来公认的<a href="http://china.caixin.com/2016-03-14/100919927.html">人工智能之父</a>。2013年接替吴恩达，出任Google Brain项目负责人的，奇点理论的宣传者和知名未来学家<a href="https://zh.wikipedia.org/wiki/%E9%9B%B7%E8%92%99%E5%BE%B7%C2%B7%E5%BA%93%E8%8C%A8%E9%AD%8F%E5%B0%94">库兹韦尔</a>(R. Kurzweil)就是他的学生。当时在哈佛大学数学与神经学做初级研究员的他，被麦卡锡拉到MIT的MAC项目里，作为AI实验室的同事。孕育出UNIX的Multics，其中的分时系统的设计就是明斯基和麦卡锡一起捣鼓出来的</p></li>
<li><p>麦卡锡（J. McCarthy）：在普林斯顿数学系博士毕业后，受师兄Kemeny（没错，就是图灵的师弟，费曼的同事，爱因斯坦的数学助理，Basic语言的发明人，后来混进总统智囊团的Kemeny）的提携，去了达特茅斯学院做数学系助教。包括图灵奖在内的奖拿了一堆，离开达特茅斯学院之后，先后领导了MIT和Stanford两个学校的AI实验室，并且让两个实验室友好对战了很多年。不那么公认的<a href="http://tech.sina.com.cn/it/2011-10-25/07446225013.shtml">人工智能之父</a>，但因为是LISP语言的发明者而享誉码农圈数十载。</p></li>
<li><p>纽厄尔（A. Newell）：冯·诺伊曼的合作者、博弈论先驱摩根斯顿的学生。他和塞弗里奇在兰德认识之后，受后者模式识别和神经网络的影响很大，用不同的方法论做了很多相关的工作。被司马贺搞到卡耐基梅隆之后，一起开创了人工智能符号派，弄出了信息处理语言（IPL），并写了该语言最早的两个AI程序，也因此拿了图灵奖。</p></li>
<li><p>司马贺（H. A. Simon）：这位更是奇人。1943年芝加哥大学政治系毕业，1949年被卡耐基梅隆聘了之后研究了认知心理学、计算机科学、公共行政、经济学、管理学和科学哲学等多个方向。和纽厄尔一起拿了图灵奖之后3年，就跨界刷了个诺贝尔经济学奖。1972年作为第一批乒乓外交美方代表访华的时候主讲计算机科学，1980年第二次访华，主讲心理学，起了个中文名字司马贺。70多岁开始学汉语的他，1994年当选了中国科学院外籍院士。</p></li>
</ul>


<p>其他的参会者也非常了得：</p>

<ul>
<li><p>塞弗里奇（O. Selfridge）：名声没有前面这两位大，但其实是公认的模式识别之父，也做过一段时间明斯基的主管。他在MIT时一直和神经网络之父麦卡洛克（W. McCulloch）一起在维纳手下工作。维纳对他非常欣赏，《控制论》的第一个读者就是他，但因为没有写博士论文，所以没有拿到博士学位：这大概跟他出身有关，日不落帝国牛津街上的<a href="http://baike.baidu.com/view/9659397.htm">Selfridges</a>是他们家的</p></li>
<li><p>所罗门诺夫（R. Solomonoff）：1951年在芝加哥大学跟随费米得了物理硕士，就到了MIT的所罗门诺夫，没有大富大贵，但达特茅斯会议时，他受麦卡锡“反向图灵机”和乔姆斯基文法的启发，发明了“归纳推理机”，从而奠基了”算法信息论“。他的另一个观点“无限点”（Infinity Point）后来被未来学家库兹维尔改名“奇点”窃为己有</p></li>
<li><p>罗切斯特（N. Rochester）：IBM信息研究经理，IBM第一台商用计算机701机型设计者。作为一名计算机象棋研究者，他在IBM内部推动了很多人工智能研究，但是在董事会打压当时对这方面研究鼎力支持的主席Watson之后被搁置了。多年以后的今天，我们看到十八摸的救命稻草就是纪念这位主席的同名计算机认知系统<a href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/ecosystem.html">Watson</a></p></li>
<li><p>撒缪尔（A. Samuel）：在IBM工作的真正的编程爱好者。使用701编写的跳棋程序是第一个具有学习能力的下棋程序，使用的就是现在被称为“α-β剪枝”的搜索。从IBM退休后去了Stanford执教，大量的时间都用来和Knuth搞Tex了。据说88岁生日的时候，都还在写程序</p></li>
</ul>


<p>整个人工智能研究的发展历史，其实是很值得国内建高校的人好好看看的。但是作为一名凡夫俗子，这里宛如奥斯卡红毯秀般铺陈星光熠熠的出场阵容，有几个目的：</p>

<ol>
<li><p>首先，可以看到，从人工智能奠基会上，就有三个人都是研究了“计算机下棋“的。下棋实在是一个贯穿人工智能这么多年历史的课题：这方面有个很好的资料网站是<a href="https://chessprogramming.wikispaces.com/">CPW</a></p></li>
<li><p>其次，我们搞不清人工智能研究范畴是很正常的。这次会议上定的七个研究课题是：</p>

<ul>
<li>可编程计算机</li>
<li>如何为计算机编程使其能够使用语言</li>
<li>神经网络</li>
<li>计算规模理论</li>
<li>机器学习</li>
<li>抽象</li>
<li>随机性与创造性</li>
</ul>


<p> 很明显如今看来，它的范围横跨了计算机、自动化、逻辑、数学、心理学等多个学科。实际上，这次会议之后，光是人工智能自己就分化出了”符号派“和”认知派“，两派惊心动魄的相爱相杀可以参考大牛尼克的<a href="http://blog.sina.com.cn/s/blog_71329a960102v1eo.html">神经网络简史</a>，或者是王飞跃老师<a href="http://china.caixin.com/2016-03-14/100919927.html">纪念明斯基的文章</a>（你看，纪念人工智能大佬的文章，是中国科学院自动化研究所的主任写的，足见”贵圈多乱“）</p></li>
<li><p>学术界的顶层圈子一直是很小的，或者说人类的顶层圈子一直是很小的，所以像你我这样的普通选手还是做做工程给下一代创造良好学习生活环境吧。且不说一个人工智能奠基会，台前幕后晃动的罗素、维纳、香农，就拿这次名震四海的DeepMind公司的大脑，神经网络的制霸辛顿来说，人家也是布尔（布尔代数的那个布尔）的后代。布尔一家为地球人哺育了各种人才，其中最邪门的应该是参与了抗战的初代毛粉<a href="http://baike.baidu.com/subview/1495132/13225597.htm">寒春</a>和<a href="http://baike.baidu.com/view/1981935.htm">韩丁</a>兄妹，最有名的应该是小说《牛虻》的作者伏尼契。当然，被《牛虻》的革命爱情感动得不行的几代中国人，可能不知道晚年入不敷出全靠周恩来特批的一笔稿费体面生活的伏尼契，其实生活在纽约</p></li>
<li><p>所有的东西到最后都是数学，学好它吧，孩儿们</p></li>
</ol>


<a name="L........................"></a>
<h4>普通人的人工智能</h4>

<p>都看到这儿了，我有点儿怀疑你到底是不是普通人。</p>

<p>因为普通人接触这个词主要是通过科幻电影和小说，所以大家潜意识里面人工智能是个虚幻的东西，它的载体是各种根本不存在的机器人：《星球大战》里面的，《黑客帝国》里面的，各种飞船的屏幕后面的。包括这几天下棋的新闻配图里面，大部分AlphaGo的形象都是个光头乳白色机器人。</p>

<p>但是也因为这次对弈，看到很多严肃的，人模人样的媒体和嘉宾都在讨论这个东西，看到一堆九段在直播间长吁短叹，大家就开始开玩笑地说：”完了完了，人类这是真的要完了“。</p>

<p>的确，简单地觉得DeepMind这种多层深度神经网络只是计算能力堆上来了而已，肯定是不对的。其实当年深蓝下赢卡斯帕罗夫的时候，当事人卡斯帕罗夫就有过一些好玩的言论：1995年他还在说计算机没有<code>insights</code>，到了1996年他就已经说感觉电脑有悟性了，到了1997年，他就输了，然后他觉得机器表现的智能无法理解，甚至怀疑有人类棋手在背后操作。</p>

<p>其实从1995到1997，深蓝的计算能力只增加了两倍而已。</p>

<p>这次围棋对弈的情况更加有趣：卡斯帕罗夫三年的心路历程，演播厅里面在前三十分钟嘲笑AlphaGo的围棋选手们几个小时就走完了。</p>

<p>所以我想，普通人关心的应该有下面几点：</p>

<ol>
<li>人工智能和人类智慧究竟有没有一点点可比性？</li>
<li>如果有，究竟发展到什么阶段了呢？</li>
<li>既然发展到这里了，奇点到底存不存在？人类要不要完呢？</li>
</ol>


<p>因为前面太啰嗦，这部分我们还是等一年一度的CCTV用消费者权益敲诈日结束之后再来写吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从Markdown列表转换成脑图]]></title>
    <link href="http://lenciel.com/2016/02/markdown-to-mindmap/"/>
    <updated>2016-02-25T21:19:33+08:00</updated>
    <id>http://lenciel.com/2016/02/markdown-to-mindmap</id>
    <content type="html"><![CDATA[<p>去年过年整理了一次<a href="http://lenciel.com/2015/01/p4f-tech-stack-part-1-devops/">p4f的技术栈</a>，最近受<a href="http://www.stuq.org/subject/skill-map/">StuQ</a>和<a href="https://leohxj.gitbooks.io/front-end-database/content/interview/skill-path.html">leohxj</a>的启发又开始整理适合我司的各个研发职位的技能图谱：这类树状的图片其实就是脑图(Mindmap)。</p>

<p>图片形式的文档都有一个麻烦的地方，就是不太好做版本控制和review。比如如果本座来整理Web前端技能图谱，总希望：</p>

<ul>
<li>能够发给前端组的人review</li>
<li>能够放到代码库，让前端组维护起来，根据业界动态不断更新</li>
</ul>


<p>如果是张图片，弄起来就比较麻烦，这个时候就需要Markdown出场了。其实最近这几年，用Markdown写文档大概也算Best Practice的一个了。好处确实很多，最重要的两个：</p>

<ul>
<li>集成到现有的开发流程里面把文档也交叉review、版本化、自动部署</li>
<li>有个三长两短的时候，迁移成本非常低</li>
</ul>


<p>只不过从Markdown生成脑图还是比较偏门，所以分享一下。</p>

<p>其实大多数的脑图软件（ 比如MindNode或者Mindjet MindManager）都支持把缩进好的文本直接导入生成图片。以我在用的MindNode为例，你可以把下面的格式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- 研发团队
</span><span class='line'>  - 前端组
</span><span class='line'>  - 后端组
</span><span class='line'>  - 运维组
</span><span class='line'>  - 测试组
</span><span class='line'>  - 平台组
</span><span class='line'>      - 数据组
</span><span class='line'>      - RIO组</span></code></pre></td></tr></table></div></figure>


<p>这样贴到MindNode里面，就会生成下面的脑图：</p>

<p><img src="http://lenciel.com/downloads/images/2016_02/mindmap_1.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>但是上面的格式，如果是以Markdown的格式放到代码库里面，有略显难看。所以更进一步，你可以先用Markdown的<code>#</code>来标不同层级，使得文档本身可以在网页上显示成规则的列表，<a href="http://lenciel.com/2014/05/web-development-skill-set-and-reading-list/">类似这样</a>，它的原始Markdown文件在<a href="https://gist.github.com/lenciel/637812a7dcbe8341b07b">这里</a>。</p>

<p>然后，通过脚本把文档里面的<code>#</code>转换成<code>\t</code>，就可以得到能够直接粘贴到MindNode里面生成脑图的文本了。如果你是使用Mac，还可以直接把转换脚本创建成一个<code>service</code>通过<code>Automator</code>安装，这样你在任何一个Markdown文档上选中需要生成脑图的部分，右键就可以了：</p>

<p><img src="http://lenciel.com/downloads/images/2016_02/mindmap_2.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>还有个未尽事宜就是在转换脚本里面加一个步骤：Markdown里面的链接，生成图片的时候把方括号、圆括号以及圆括号里面的链接去掉，不然就太难看了：</p>

<p><img src="http://lenciel.com/downloads/images/2016_02/mindmap_3.png" title="Don't touch me..." alt="Vhost threshold" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Chrome自定义搜索引擎快速查找资源]]></title>
    <link href="http://lenciel.com/2016/02/how-can-everybody-use-chrome/"/>
    <updated>2016-02-20T11:53:34+08:00</updated>
    <id>http://lenciel.com/2016/02/how-can-everybody-use-chrome</id>
    <content type="html"><![CDATA[<p>这篇文章讨论的办法，主要是结合使用<code>带参数Google搜索</code>+<code>Chrome快捷搜索入口</code>，鉴于众所周知的原因，如果你不会翻墙可能不能直接使用。</p>

<p>但是鉴于国内搜索引擎功能上多少都有借鉴Google，浏览器多少都有借鉴Chrome，所以这里讨论的办法也许用其他&#8221;搜索&#8221;+&ldquo;浏览器&#8221;组合也可以使用。只是我们都知道国内搜索引擎索引出来的结果有多离奇，所以效果上可能会打一些折扣。</p>

<a name="L.........Google......"></a>
<h3>带参数Google搜索</h3>

<p>Google可以带参数搜索一般用户可能不太用到，但其实对找东西很有用。完整的说明可以自己找来看，对普通用户也非常有用的有：</p>

<a name="L........."></a>
<h4>双引号</h4>

<p>把搜索词放在双引号中，代表完全匹配搜索，也就是说搜索结果返回的页面包含双引号中出现的所有的词，连顺序也必须完全匹配。</p>

<p>比如搜索代码里面的抛出的错误，你直接把错误行扔进去，往往不如加上引号来完全匹配准确。</p>

<a name="filetype"></a>
<h4>filetype</h4>

<p>用于搜索特定文件格式，比如搜索<code>filetype:pdf</code>，那么就只返回所有包含关键词的pdf文件。</p>

<a name="site"></a>
<h4>site</h4>

<p>用来搜索某个域名下的所有文件，比如在百度网盘里面搜索名字包含Hadoop的文件，就可以搜索<code>Hadoop site:pan.baidu.com</code>。</p>

<a name="L......"></a>
<h4>减号</h4>

<p>代表搜索不包含减号后面的词的页面。使用这个指令时减号前面必须是空格，减号后面紧跟着需要排除的词。</p>

<p>熟练掌握并且综合使用上面这些语法，你就可以非常快速地找到你需要的东西了。</p>

<a name="Chrome.................."></a>
<h3>Chrome快捷搜索入口</h3>

<p>Chrome为你提供了快捷方式来使用搜索。<code>Cmd+L</code>（Windows平台大概是<code>Ctrl+L</code>）进入地址栏，然后输入要搜索的内容，回车，就会使用你的默认搜索引擎进行搜索。</p>

<p>假如你要切换一个搜索引擎，比如你的默认引擎是Google，偶尔你需要用百度来搜索，只需要在地址栏里面先敲<code>baidu</code>，然后按<code>Tab</code>键，然后输入你需要搜索的关键字并回车，就可以了。</p>

<p>Chrome里面你可以这样使用的搜索引擎数量其实是远超你想象的。</p>

<p>在地址栏里面敲入<code>chrome://settings/</code>，然后进入搜索引擎的配置你就可以看到它们：</p>

<p><img src="http://lenciel.com/downloads/images/2016_02/manage_search_engine.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<a name="L................................."></a>
<h3>创建使用自定义搜索引擎</h3>

<p>一旦开始使用自定义搜索，你就会发现有些搜索使用频率相当高。</p>

<p>比如在百度盘里面搜索某个文件。</p>

<p>再比如在<a href="http://quora.com/">Quora</a>或者<a href="http://zhihu.com">知乎</a>里面搜索包含某个关键字的问答。</p>

<p>这个时候你只需要在搜索引擎列表的末尾添加一个自定义项：</p>

<p><img src="http://lenciel.com/downloads/images/2016_02/custom_search_engine.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>比如我们添加一个<code>Keyword</code>是<code>panb</code>的搜索引擎，它的URL是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://www.google.com.hk/search?q=%s+site%3Apan.baidu.com</span></code></pre></td></tr></table></div></figure>


<p>注意URL这个参数需要做<a href="https://docs.oracle.com/javase/7/docs/api/java/net/URLEncoder.html">urlencode</a>，所以空格变成了<code>+</code>，<code>site:pan.baidu.com</code>变成了<code>site%3Apan.baidu.com</code>。</p>

<p>如果你不知道<code>urlencode</code>怎么做，可以先到Google上完成一次目标搜索，然后从地址栏上面复制下来。</p>

<p>定义好了自定义搜索引擎以后，你只需要在地址栏里面输入Keyword（panb），然后按<code>Tab</code>键，再输入你需要查找的资源，回车，就可以看到结果了。</p>

<p>具体使用过程请参考下面这个视频（略需要几秒加载）：</p>

<p><video width='640' height='320' preload='none' controls poster='http://lenciel.com/downloads/images/2016_02/chrome_custom_search.png'><source src='http://lenciel.com/downloads/video/chrome_custom_search.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'></video></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记一次成功的过年]]></title>
    <link href="http://lenciel.com/2016/02/happy-new-year/"/>
    <updated>2016-02-13T22:41:48+08:00</updated>
    <id>http://lenciel.com/2016/02/happy-new-year</id>
    <content type="html"><![CDATA[<p>过年在三亚呆了一周。</p>

<p>虽然中学毕业就已经习惯了在外面跑，像今年这样一大家子人到外地过年，却还是头次。</p>

<p>这地方确实有它的好，特别是对于感冒缠身的本座来说。</p>

<p>但无论如何，毕竟不是自己的地方。</p>

<p>就好像在澳洲过年的邓总发朋友圈，说自己的女儿呆了一周，只喜欢“当地”的榨菜：从来没吃过这东西的小朋友不知道这是父母随身带去的，还以为是当地特产。</p>

<p>这让我想起北宋末年汴梁那个炒栗子的李和儿，亡国后但有南边的人来，便专程去炒一包栗子奉上，只说一句“我是东京的李和儿”，就默然无语。</p>

<p>人总是要在离开之后，才格外知道自己来自那里。</p>

<p>当然，认真追究起来，我们大多数人的故乡已经不在。百里万里赶回去，看到的无非是富丽的什么、大美的什么、和谐的什么、宜居的什么。近在眼前却远在天边的故乡，难免让人想起帕慕克在《一个城市的记忆》中描述的“呼愁”，不过好歹可以算是夹了忧伤的喜剧：基础建设对老百姓，总算是件好事情。</p>

<p>但千篇一律的城市，难免有千篇一律的无聊。就算是乔峰这样的英雄好汉，要是活在我朝，哪怕雁门关上吃了一顿大肉，喝了几斤好酒，也很难想出和心爱的女人出关而去，从此放牛牧羊，逍遥自在，绝迹于中原的点子了吧。</p>

<p>何况，哪怕出得雁门关，如何逃出朋友圈？</p>

<p>在蒙爷睡觉的时候，修复长辈们的手机、平板变成了本座的消遣。因为Google被封杀变得不能正常使用的Nexus系列，本座安利得最多，搞起来也最费劲。电脑没有网线，无法分享ss代理，只好现开香港的机器搭简单的http proxy，然后对着屏幕回忆那些怎么也回忆不起来的账号、密码、密保问题。</p>

<p>电视里放着重播的春晚，窗户外响着彷佛永远不会停止的烟花爆竹声。怕睡着的孩子被吵醒，长辈们难免会抱怨几句：“真是陋习不改。”但大家一起稍微看几分钟电视，又一致同意除夕夜好容易团圆的一家人看这样一台晚会，才是现在中国人过春节最大的陋习。</p>

<p>蒙爷醒来的时候，我们就开车到处去玩。海边去得最多，一会儿挖沙子，一会儿捡贝壳，一直很怕水的他也high到踏浪湿身。海风吹动沙滩上残存土堆里潦潦草草的几棵松树，身边是畅笑不止的蒙爷，让人真的感觉到了什么是“松风晚照天涯也无”。</p>

<p>有天，岳父大人做了一盘大虾，开心地跟我们介绍这“大基围虾”的采买过程。我突然想起，基围虾究竟长在哪里，对我还是个未解之谜。</p>

<p>以前四川刚刚能吃“基围虾”的时候，请客的人脸上那份豪情，和大家剥虾时的那份美滋滋与小心翼翼，还历历在目。那时候我一直以为这虾叫“鸡尾虾”，心里面觉得这名字起得倒是比鸡尾酒像话，毕竟这东西真有那么大个尾巴。</p>

<p>后来发现，原来写法是“基围虾”，心里面一直把它当成是个外来词，跟“摩托车”一样。</p>

<p>到了上班后，偶然听一个海边长大的同事说，基围指的是一种养殖方法：在海湾和河口的红树林周围挖掘河道，用泥土筑基，围成水塘，靠潮汐变化来运作：涨潮时，海里面的小虾鱼进入塘中，以红树林的落叶为食长大。</p>

<p>“很普通的，我们那儿过去到处都是”。</p>

<p>岂止他们那儿，那时候无论是哪儿，基围虾都已经变得普通。饭馆儿里面昂贵的菜肴变回了河虾，给父母打电话，说上海这地方海鲜便宜，自己和合租的一天到晚吃虾啃蟹，还会被教育：“别只顾着工作，要把生活开好”。</p>

<p>只是去过很多海边，一直没有见过传说中到处都是的“红树林”和“基围”。</p>

<p>于是吃完虾上网仔细翻了一下，原来红树林（英文mangrove）是指一种生长在热带、亚热带特有的海岸带植物群落，包括松树、白骨壤、榄李、桐花、秋茄、海漆、露兜树、黄槿等等。</p>

<p>所以沙滩上残存土堆里潦潦草草的几棵松树，就是传说中的“基围”啊。</p>

<p>再一查，因为海湾越围越窄，海滩开发过度，加上“效率低下”，基围养殖已经基本绝迹：现在都是人工海水里面育苗然后扔进水田里面养殖了。</p>

<p>所以还只是传说中“基围”的遗址而已。</p>

<p>看到这里，你以为我这个时候要惆怅一番，唏嘘一番。</p>

<p>但人生短促，盘点离愁别恨，略显奢靡了。</p>

<p>我只是在想，这么说起来，我到底吃过基围虾没有&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[提取微信语音消息]]></title>
    <link href="http://lenciel.com/2015/12/extract-audio-message-from-wechat/"/>
    <updated>2015-12-24T13:05:21+08:00</updated>
    <id>http://lenciel.com/2015/12/extract-audio-message-from-wechat</id>
    <content type="html"><![CDATA[<a name="Why."></a>
<h3>Why?</h3>

<p>Why not?</p>

<a name="How."></a>
<h3>How?</h3>

<a name="L................................."></a>
<h4>导出原始微信的音频消息</h4>

<ul>
<li>使用iTunes创建一个不加密备份</li>
<li>导出备份中的微信应用文件夹（可以使用iExplorer试用版）</li>
<li>找到你需要转换的音频文件所在文件夹</li>
</ul>


<a name="L......silk3...............mp3"></a>
<h4>转换silk3编码音频为mp3</h4>

<p>如果你是mac机器，只需要安装ffmpeg（推荐使用homebrew）然后运行脚本：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">python</span> <span class="n">wechat2mp3</span><span class="o">.</span><span class="n">py</span> <span class="err">待转换音频所在文件夹</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你是其他系统，确认你装好了ffmpeg之后，需要<a href="https://github.com/gaozehua/SILKCodec">自己编译SILK解码库</a>。</p>

<a name="Seriously.Why."></a>
<h3>Seriously Why?</h3>

<p>常温常压下我并不需要导出微信的语音，之所以有这个需求是因为蒙爷在三亚经常用微信跟我们唠嗑：</p>

<p><audio controls loop preload><source src="http://lenciel.com/downloads/audio/mm_voice.mp3"></audio></p>

<p>听到这样销魂的声音你就算不想保存，也想要转发，对不对？</p>

<p>毕竟作为一名中国人，你已经有8个亲戚群了，对不对？</p>

<p>然后微信奇怪的生态圈构建方式就是，各种封闭。</p>

<p>微信公众号是世间少有的不允许外链的媒体，微信客户端是世间少有的不允许导出聊天记录的聊天工具。</p>

<p>它的想法大概是，你珍贵的瞬间都在我这里（微信专门做了“收藏”这个功能让你把这些片段上传到微信的服务器，打着不让它们丢失的旗号），那你就逃不出我的手掌心了。</p>

<a name="Seriously.How."></a>
<h3>Seriously How?</h3>

<p>使用iTunes创建一个不加密的备份，然后连接iExplorer，会看到打开iTunes备份的选项：</p>

<p><img src="http://lenciel.com/downloads/images/2015_12/extract_wechat_1.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>打开后在<code>App</code>文件夹下面导出微信文件夹：</p>

<p><img src="http://lenciel.com/downloads/images/2015_12/extract_wechat_2.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>在导出的文件夹下面有个Audio目录，你可以根据语音消息的数量大概确认需要导出的目录（目录是个hash），然后到<code>DB/MM.sqlite</code>下面去打开<code>Chat_[hash]</code>这个表里面，看看消息来确认：</p>

<p><img src="http://lenciel.com/downloads/images/2015_12/extract_wechat_3.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>二进制查看其中的任意一个文件，可以看到是<a href="https://en.wikipedia.org/wiki/SILK">SILK</a>编码的（skype早期版本包括lync都是使用的这种编码方式）：</p>

<p><img src="http://lenciel.com/downloads/images/2015_12/extract_wechat_4.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>接下来你只需要按照<a href="https://github.com/lenciel/wechat2mp3">repo</a>里面的指导(愿主保佑你是用Mac因为那最简单)来进行文件转换就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[卫豆]]></title>
    <link href="http://lenciel.com/2015/10/vivid/"/>
    <updated>2015-10-24T03:30:20+08:00</updated>
    <id>http://lenciel.com/2015/10/vivid</id>
    <content type="html"><![CDATA[<p>每个人的生命中都有一个胖子。</p>

<p>我的胖子叫卫豆。</p>

<p>卫豆为什么叫卫豆我已经有些忘了。也许是因为英语课给自己取名叫Vivid，于是大家叫他卫卫豆。但是铅球跳高双料冠军的他感觉AAB的名字太过娘炮，所以我们截取了两位有效位数。</p>

<p>居然有些忘了：以我自觉傲人的memory插装量而言，能从我堆栈里面溢出的人屈指可数。</p>

<p>但毕竟，这胖子自从20多年前出现，就在我的生活中玉体横陈，盘踞多年。</p>

<p>初次见卫豆，他就是广汉市第四小学校足球队的守门员。那时我在三小，还不会踢球，但当时校队队长是我们班的姜来，也是好朋友，所以跑去看了比赛。</p>

<p>后来我们都到了一中，他发育良好长势喜人，我茅舍顿开脱胎换骨，于是我俩成了校队队友。</p>

<p>他和我弟还同桌。</p>

<p>如果你能看懂《灌篮高手》，大概能明白那是怎样特殊的一种友谊：不仅仅是队友或者同学，而是分享着澎湃热血和隐秘恋情的死党。</p>

<p>那些年我当队长，他是门将，和包括我弟在内的小伙伴们一起拿下了市里面很多比赛，是历史上最强的校队。</p>

<p>我们真的都很厉害，但大概卫豆更强，所以在年级比赛里扑出了我的点球淘汰了我们班。</p>

<p>老天爷为了惩罚他，让我们进了一所大学。</p>

<p>他读的物理系踢球很菜，我带着机电系反复蹂躏着他。</p>

<p>我们也都进了校队，有各自出彩的瞬间，也有一起黯淡的时光。</p>

<p>除开足球，除开一起经历了春梦般的校园和恶梦般的春运，我们变得那么铁多少还因为门当户对臭味相投。</p>

<p>我们家工薪阶层，养一对双胞胎。卫豆的母亲下岗已久，父亲是转业军人。在学校的日子，手头都不算宽裕，卫豆比我更紧一些。</p>

<p>那个年龄，难免争强好胜又敏感轻狂。</p>

<p>我满身带刺，爱调侃人并且一旦出击必定使用mangle，然后在目标的伤口上有条不紊保质保量地喷洒食盐、孜然和胡椒面。</p>

<p>因为靠太近，我这毛病肯定也有伤到卫豆的时候。</p>

<p>可以把球从自己禁区踢到对方弧顶的卫豆没有手起刀落为民除害，完全是因为他的宽厚。</p>

<p>卫豆的宽厚既体现在客观的物理数据上，也表现在他待人接物的各个维度里。喜庆祥和，吉祥三宝如他，连背过身骂人都注意五讲四美轻拿轻放。</p>

<p>但这当然是假象。</p>

<p>他和我在一起的时候，指点江山挥斥方遒，看不惯的人抓一半充军就可以打下半个欧洲。</p>

<p>只是很多人没办法看出来他个性坚硬自尊心又强，心思细密得像个姑娘。</p>

<p>比如当时球队的人喜欢叫卫豆食神。因为外出比赛一起吃饭，卫豆经常表演风卷残云后依然防水透气不起球步伐轻盈走位流畅的神功。</p>

<p>大伙其实并无恶意，但我能感觉出来他并不喜欢这个称号。这种脸上散步心里跑马的选手，在我这种已经以攻代守以便广筑高墙的人面前，道行太浅。</p>

<p>我问过他为什么不让大家换种方式叫他，比如，“卫豆”。卫豆说，“没必要，随便应付一下就行。妈的你别这么叫就可以了”。</p>

<p>时间很快就到了大四，我上了研，卫豆毕业去了绵阳九院做神秘的科研，那个一天到晚在身边的胖子渐渐变成了gtalk上叫vivid的ID。</p>

<p>这ID和卫豆确实很称，不论看起来读起来还是敲起来，都是那么生机盎然。</p>

<p>两年后大学生联赛决赛阶段凑巧在绵阳踢。浙理工嫌比赛地方太远弃权，浙大以全省第二身份替补出战。卫豆到现场来观摩了我们被雇佣职业球员参赛的学校轮番凌虐，并在赛后给予了我失利者应得的温暖拥抱。</p>

<p>因为是大学生涯最后一届比赛，我心情并不太好，就有些嫌弃他显然已经41D以上的胸膛。所以合影的时候我们像两个文明人一样相拥而立。</p>

<p><img src="http://lenciel.com/downloads/images/2015_10/vivid.png" title="Don't touch me..." alt="vivid" />
<em>2006年绵阳 卫豆和我</em></p>

<p>后来我也工作了，假期虽然都会约出来见见，但我们再也没有机会在球场上碰面，也就失去了合影和拥抱的理由。</p>

<p>生机盎然的卫豆是我们这群人里面最早结婚的。</p>

<p>生机盎然的卫豆是我们这群人里面最早有小孩儿的。</p>

<p>生机盎然的卫豆去年告诉我说，工作了这么久，今年总算有积蓄了。</p>

<p>生机盎然的卫豆在今年年初我自己的公司被某运营商拖欠合同款自己垫着钱发工资的时候，帮我联系过项目。</p>

<p>那次是在软件园布衣客栈楼下的星巴克，还叫来了C区上班的老弟。</p>

<p>我们像中学时的某个午后一样，东倒西歪地坐成一排，聊着，笑着，骂着。</p>

<p>他说别担心，困难很快就会过去的。</p>

<p>他说还是你们自己创业的好。我们有个同事本来在九院跟着院士读博，最近自己交了赎身费，跑到一个创业公司去干去了。</p>

<p>后来我做了方案去他们单位讲评。在那间接待外来人员四面无窗房上走水的屋子里，全靠卫豆傻笑和电脑发热的双重除湿，我的小黑屋幽闭症才没有犯。</p>

<p>世界有时候是公平的，不久我们打赢了官司拿到了钱。我的公司也被现在的公司收了。</p>

<p>世界有时候是很小的，他那个交了赎身费的前同事，变成了我的同事。</p>

<p>所以华力突然给我说他听说卫豆病了的时候，我很意外。</p>

<p>那天晚上没怎么睡着，耳机里一直响着《热河》，脑子里一直想着卫豆。</p>

<p>第二天给他打电话没人接，过了几天他给我打了回来。</p>

<p>我问他怎么回事，他说有点儿倒霉，出差胃疼做个胃镜，没想到是这种东西。</p>

<p>我问他怎么不告诉我，他说知道你们创业的人忙。</p>

<p>然后我们胡扯了一通，他说了什么我其实没有听进去，脑子里面嗡嗡作响，想的都是别的事情。</p>

<p>我想到了他中学喜欢了很久的女生。因为那个女生长得像许茹芸，卫豆听了好几年《如果云知道》的卡带，整个大学都没有谈过恋爱。</p>

<p>我想到了我们一起坐火车回家，因为需要转车总是没有座位得挤上去再补票。他提着我们两个人的行李，迅猛地跨上火车，然后伸开手把门堵住，让我从他腋下钻进车厢。</p>

<p>我想到了他结婚的那天，我们要他抱着老婆下楼。他说这算个屁，抱着她我可以围着进城的那个大转盘跑三圈。大概因为他真的跑了三圈，让广汉市长感觉到了转盘的局促，所以把它拆了。</p>

<p>我想到了他说你一定要多给你孩子录像，以后看会非常有意思，而照相并没有什么卵用。</p>

<p>我想到了还有没有朋友像卫豆一样，他夸你你就真得干得不错，他骂你你就确实表现不行。</p>

<p>我也想到了死亡。</p>

<p>电话最后我问他你什么时候再来成都。</p>

<p>他说很快就要来化疗，来了肯定告诉你。</p>

<p>挂了电话我知道他来了成都肯定不会告诉我，就让现在成了同事的他前同事跟他们科室的人打了个埋伏。</p>

<p>昨天埋伏的人通知我们，他在成都化疗。</p>

<p>见到他的时候，他瘦了一圈，却仍然壮硕。</p>

<p>我想夸他一句你这样帅多了，但是比他瘦得更多的他母亲站在病床边，我没说出口。</p>

<p>他看着我呆呆地看着他，说，“看啥？你现在还是弄不赢我。”</p>

<p>“从来不可能有谁弄得赢你”，老弟笑着拍了拍他的手臂。</p>

<p>然后我们开始山南海北地聊起了天。</p>

<p>和他看得上眼的人在一起，他仍然是那么健谈。</p>

<p>如果不是躺在病床上，他看起来就像是一个健身成功的励志男模。</p>

<p>如果不是在病房里，我们聊天的样子就像是一次欢快的同学聚会。</p>

<p>我在欢声笑语里还是找了个空当偷偷溜出去问了他的主治医师。</p>

<p>然后又故作镇定地回去聊了一个多小时，来了个护士进房间说，到点儿了你们得走了。</p>

<p>他坚持要送我们到电梯口。</p>

<p>电梯门关上的时候，我们四目相对，卫豆的眼神里面总算是流露出不安和无助来。</p>

<p>回家后只要脑子空转，我就不断地被那个眼神拖回那个电梯口。</p>

<p>我们生命中会遇到很多美好的人。</p>

<p>他们有的匆匆地来，匆匆地走。</p>

<p>他们有的不停地来，不停地走。</p>

<p>他们有的待了好久，但还是要走。</p>

<p>但不管什么时候他们走开了，他们给我们的影响都会一直留在那里。</p>

<p>而正是他们给我们的那些影响，让我们成为了今天的样子。</p>

<p>卫豆，我还没有和你好够。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于工作与生活]]></title>
    <link href="http://lenciel.com/2015/10/the-solution-of-work-life-balance/"/>
    <updated>2015-10-04T00:06:16+08:00</updated>
    <id>http://lenciel.com/2015/10/the-solution-of-work-life-balance</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.com/downloads/images/2015_10/dilbert_work_life_balance.png" title="Don't touch me..." alt="work life balance" /></p>

<p>前面说了，<a href="http://lenciel.cn/2015/10/the-myth-of-work-life-balance/">Work Life Balance的神话其实并不靠谱</a>。</p>

<p>毫不奇怪，在本座自己发觉这点之前，我的家人们早就发现了这点。所以当柳青患癌这样的消息一出来，总会有人跟我说，“你看看，难道你觉得她这样值吗？”</p>

<p>有趣的是，出了这样的消息，创业的人特别是老板们也会问同样的问题：“你觉得，她这样值吗？”</p>

<p>其实这样的消息真会让我有挺多想法的，所以不如在这里整理一下，以便今后不管是谁有了三长两短，或者是自己真的不幸中招，都可以直接拿出来交卷。</p>

<p>简单地回答那个问题：我不知道值不值，这是她自己才清楚的事情。</p>

<a name="L.................."></a>
<h2>勤奋不会杀人</h2>

<p>我记得看过卡斯帕罗夫和卡尔波夫对局之后的一个采访，记者问他们除开象棋之外有什么爱好。</p>

<p>你们都见过那些跑文体档的记者，这也算是个常规的问题。结果卡尔波夫憋了半天，说，“集邮”。</p>

<p>然后卡斯帕罗夫憋了三个半天，说，“没有”。</p>

<p>这并不是个例，很多职业选手他们把自己的全部身心都放在了自己的项目上。</p>

<p>再比如我很喜欢的作家村上春树。有人问他为什么一定要关了酒吧去写小说，他的回答是：</p>

<blockquote>
<p>无论做什么事儿，一旦去做，我非得全力以赴不可，否则不得安心。将店铺随意交托给某个人，自己躲到别处去写小说，这种讨巧的事情我做不来。竭尽全力埋头苦干，还是干不好，就可以心安理得地撂开手了。然而，如果因为模棱两可、半心半意而以失败告终，懊悔之情只怕久久无法拂去。</p>
</blockquote>


<p>很多心灵鸡汤会把这些误读为”你一定要找到自己感兴趣的事情”，这其实很容易让人跳进火坑。从接触到感兴趣并不难，比如踢球，比如唱歌，比如写作，比如编程，很多人接触了会觉得很有兴趣。然而从爱好变成职业，就需要反复枯燥的练习并且和其他人进行竞争。如果你为一件自己仅仅是感兴趣的事情就调转了职业方向，很多时候都会感到后悔莫及。</p>

<p>要坚持下来真正熬出头，需要极度勤奋和高度专注，即便你的目标不是变成顶尖高手（那么大概不需要<a href="http://baike.baidu.com/view/3244949.htm">10000小时</a>），过程也会非常苦。</p>

<p>但熬过就是另一番天地。</p>

<p>所以看到柳青或者李开复的新闻，嘴上送着祝福，私下却暗自庆幸”你看我平平淡淡多好”的心态最好别有。患癌这事情面前，我国基本还是人人平等（没仔细研究过，记得主要是环境、食品和生活习惯诱发的基因里面的坏道造成的），治起来却是天壤之别：据说中国人要让自己全家所有人遇到大病时都能得到良好的治疗并体面地死去，大概需要2000万。我相信这对于柳青或者李开复来说问题不大，而“平平淡淡”的你路还很长。</p>

<p>还是放心赶路吧：勤奋根本不会杀人，相反，我认识的大多数勤奋的人，都是健康且快乐的。</p>

<p>因为他们不蛮干。</p>

<a name="L.................."></a>
<h2>勤奋不是蛮干</h2>

<p>什么是蛮干呢？</p>

<ul>
<li>没有主观能动性只是应付时间的行为是敷衍，这样的人很可恶。</li>
<li>有主观能动性但只会堆砌时间的行为是蛮干，这样的人很可怜。</li>
</ul>


<p>在我看来996上班制度或者规定每周上班80个小时就是鼓励蛮干。</p>

<p>看看阿里的人<a href="http://www.zhihu.com/question/23272060">自己怎么说996</a>你就知道，如果你鼓励的是蛮干，那总是蛮干都得不到：很多人只是敷衍而已。</p>

<p>这件事情曾经给了我很大的困扰。</p>

<p>工作上我一直被给予了很大的自由度，我也会给大家很大的自由度。</p>

<p>老板对一切都非常满意，但却有一个心结：集体加班不够多。</p>

<p>他常常也不好直说（因为实际效果上看目前是比以前输出高了不少），经常是在时机合适的时候提点一下我：“我们今天开会出来公司里面空空荡荡的”或者“过去某某是经常在公司干到12点以后的”。</p>

<p>我能理解他，他在著名的H公司干了十几年，管了几千人的研发团队。现在出来创业，他和其他几个管理层也确实很拼。市场突围，产品研发的压力这么大，难免从自己的办公室走出来看到空空荡荡的屋子有些不开心。</p>

<p>但我也确实没法同意建立打卡考勤或者集体加班这样奇怪的制度。</p>

<p>花更多的时间就可以多做出来点儿什么的想法，对研发团队是不太有效的。</p>

<p>就算是读书的时候，也总是有一些人你看他/她花的时间不多，但就是考试考得好。</p>

<p>反过来，也总是有一些学生，花再多的时间都没有用。</p>

<p>如果你稍微仔细看看后面这类学生为什么会有这样的处境，总会发现老师、学生和家长这三个角色至少有一个人心思已经不在提高成绩这件事情上了：可能是老师嫌学生烂，可能是学生嫌老师烂，可能是家长嫌学生烂&hellip;可能是每个人都觉得其他两个很烂&hellip;</p>

<p>研发需要看的是输出，是把问题搞定的能力，而不是谁在公司完成了三餐、球类运动、热门新闻追踪和存在感建设。</p>

<p>我见过很多想弯道超车的公司，搞运动般的加班，结果导致动作变形，连应该有的成绩都没法做出来。</p>

<p>这并不奇怪。</p>

<p>你去软件园地铁站门口随便拦住那帮背双肩包的，问问他们自己觉得质量不错又能上线的项目哪个是靠加班加出来的。</p>

<a name="L........................"></a>
<h2>所以工作和生活？</h2>

<p>所以工作和生活的节奏，是很私人的事情。</p>

<p>这意味着两方面的意思：对于个人来说，你应该保证自己有选择它的权力。而对于组织来说，不应该对个人进行过分的干涉。</p>

<p>组织和个人努力的方向，都应该是让有效时间内输出最大化：说简单一点儿，即便有必要加班，目的都应该是为了能尽早达到按时下班，而不是在公司里面形成一种”多花点儿时间就能做出更多东西”的错觉。</p>

<p><img src="http://lenciel.com/downloads/images/2015_10/no_one_wants_more_work.png" alt="" width="420" height="294" align="left" style="margin:5px"/></p>

<p>拿我个人来说，很长一段时间以来都很忙，每周工作时间常常超过80个小时。虽然也知道<a href="http://blog.sina.com.cn/s/blog_5d7e3c150100h2c8.html">人生是玩5个球</a>之类的道理，但却并不觉得自己的选择有什么问题：目前确实有那么多事情需要处理，自己又很愿意花时间去处理它们。</p>

<p>旁边这张图是表达，有很多道理我是知道的。只不过认定了工作和生活没法兼得，所以我准备串行处理：工作的时候疯狂工作，生活的时候好好生活。这样我既不会遗憾该勤奋的时候不够勤奋，也不会觉得什么像样的生活都没有过过。</p>

<p>我从小就是这样：如果自己想做的事情，在喜欢的时间，就希望尽全力的做个痛快。而如果是在不对劲的时间逼迫我，再喜欢的事情也不想去做。</p>

<p>所以我崇尚的节奏是年轻时（我还年轻么？），工作上勤奋一些，生活上享受一些。人上了年纪，有很多乐趣还可以慢慢享受：比如看书、旅行等等，有很多乐趣就已经不复存在：比如工作、美食、踢球和别的什么羞羞的乐趣（这里是不是可以另外开一篇讨论&hellip;）。</p>

<p>这样的选择非常私人，很可能是错的。但在组织的层面，用输出来衡量大家产出，比一切别的制度都重要，这肯定是对的。</p>

<p>因为这样的制度是真正公平的。</p>

<p>很多厉害的人在选择工作、领导或者团队的时候，能分辨和规避那些糟糕的选择，但往往会搞不清nice和fair谁更重要。</p>

<p>提醒一下，nice是奴隶制时期奴隶主常常玩的把戏，fair才是商业社会运作的根基。</p>

<p>不分青红皂白要求你加班，到了下班时间迫于气氛大家都不好意思走的公司当然去不得。
但公司对大家都不错，经理对大家都不错，这样的地方对真正有追求的人也未必是好去处。</p>

<p>反过来，那些面试的时候会说“我们加班非常多哦”的公司，未必就不能去。如果他们的考核方式是公平的，做的东西你也感兴趣，加入的时间看起来又比较正确，那很可能比去一家茶水间堆满了糖果前台比你历任女朋友都漂亮的公司要明智得多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Work Life Balance的神话]]></title>
    <link href="http://lenciel.com/2015/10/the-myth-of-work-life-balance/"/>
    <updated>2015-10-02T22:35:05+08:00</updated>
    <id>http://lenciel.com/2015/10/the-myth-of-work-life-balance</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.com/downloads/images/2015_10/work_life_balance.jpg" title="Don't touch me..." alt="work life balance" /></p>

<p>最近有几个事情让我在这方面想了很多。</p>

<p>首先是那篇在业界掀起轩然大波的关于<a href="http://www.nytimes.com/2015/08/16/technology/inside-amazon-wrestling-big-ideas-in-a-bruising-workplace.html">Amazon高压管理制度</a>的《纽约时报》封面文章。由Jodi Kantor和David Streitfeld耗时6个月调查了100名Amazon离职和在职员工的这篇文章，细数了Amazon企业文化里面充满达尔文主义味道的部分：</p>

<ol>
<li>末位淘汰，并且建立通道让员工将身边同事的表现秘报给共同的主管</li>
<li>对流产或者患癌员工不但不给予关心，还进行低绩效考评或者工作上边缘化</li>
<li>每周超长的工作时间，经常有凌晨的邮件，并且要求及时处理</li>
</ol>


<p>其中一个叫Molly Jay的前Kindle项目组成员讲述的故事我印象最深：她说因为要照顾患癌的父亲，<em>一周不能达到80个小时以上的工作时间</em>，绩效考评就迅速下滑。甚至在父亲临终前希望晚上和周末少一些加班，不但被主管拒绝，甚至当着她的面说她&#8221;是个麻烦&#8221;，最后她选择了离开。</p>

<p>然后是周三凌晨看曼联队的欧冠球赛，解说聊起范加尔对续约还在犹豫时说：64岁的范加尔对媒体坦言希望仔细考虑一下是否继续执教球队，因为自己陪家人的时间太少了。而就在之前，65岁的温格因为类似的原因，<a href="http://www.chinanews.com/ty/2015/09-24/7541283.shtml">和自己59岁的太太离婚了</a>。</p>

<p>最后是<a href="http://36kr.com/p/5038027.html">柳青患癌的消息</a>刷爆了创业圈之后终于又刷爆了朋友圈。含着金钥匙出生，哈佛毕业，投行背景，拼到滴滴总裁，却年纪轻轻遭此恶疾，比之前李开复患癌的消息更让人觉得唏嘘。</p>

<a name="L.........Work.Life.Balance"></a>
<h2>说好的Work Life Balance</h2>

<p>在包括四大、投行、建筑、广告、传媒等等需要打鸡血的职业里面，程序员大概算蛮幸运的：因为我们这行大多数公司还是比较推崇<a href="http://www.forbes.com/sites/kathryndill/2015/07/17/the-best-companies-for-work-life-balance-2/">Work Life Balance</a>的。</p>

<p>一方面是因为在这个行业，顶尖人才永远是卖方市场，供不应求。为了留住人才，公司纷纷开出更人性化的福利和政策。</p>

<p>上班与休假方面的规定就是一面镜子。这些年本座眼看着无限制的年休假从少量公司的福利慢慢成为硅谷创业公司的标配，更有Netflix豪迈的<a href="http://edu.qq.com/a/20150806/020001.htm">新生儿父母一年带薪产假</a>。这些政策都是有数据支撑的：Google的女员工带薪产假延长至22周后离职率下降了50%。</p>

<p>另一方面是一些广为人知的道理又被大家抬出来温习。</p>

<p>包括这次Amazon的新闻一出，先后参与了Facebook和Asana的创建，31岁就已经攒下79亿美刀身家的<a href="http://www.forbeschina.com/review/billionaires/home/106757.shtml">达斯汀·莫斯科维茨</a>就发了<a href="https://medium.com/life-learning/work-hard-live-well-ead679cb506d">一篇雄文</a>表达自己的态度：如果能够再来一次，他希望自己在创建Facebook的过程中能够过得轻松一些。</p>

<p>文章里面提到的那个一周不能工作超过40个小时的理论，我<a href="http://lenciel.com/2013/05/the-myth-of-productivity/">之前也唠叨</a>过。实际上这个结论福特在1926年就调查得出了，并且开始<a href="http://www.history.com/this-day-in-history/ford-factory-workers-get-40-hour-week">实施在自己的汽车厂</a>。</p>

<a name="L.........Work.Life.Balance......"></a>
<h2>说好的Work Life Balance呢？</h2>

<p>然而别人家的公司与你的公司总是有差别的。</p>

<p>如果没有这篇Amazon内幕以及之后引发的世界范围内的大吐槽，广大的天朝码农经常都沉浸在”为什么受伤的总是我“的悲伤气氛中。</p>

<p>没错，移动互联网火热之前，国内IT企业标杆多是华为。大家都狼得没边儿，猛打猛拼。现在BAT火了，也不忘贡献<a href="http://baike.baidu.com/view/12867952.htm">996</a>为代表的各种疯狂制度。</p>

<p>过去我要安慰大家，只好说其实不仅仅天朝这样：从我经历过的项目来看，东亚和美国的IT人士们都非常非常苦逼。闲到十八摸这种程度，很多美帝的工程师只要我在线他就在线；之前M记的韩国大老板说在三星工作的时候，公司在办公室边上修了很多公寓以便员工不回家直接进去续命；日本台湾的就更不用说了&hellip;</p>

<p>现在好了，发现其实全世界大多数从业者的日子都没什么大的区别（注意我这里说的从业者不包括各路水货混子嘴炮流选手），真是给了本座莫大的安慰。</p>

<p>还在M记的时候，<a href="http://lenciel.com/2012/03/do-not-burn-out-yourself/">我就挺关注burnout</a>的，因为自己确实有过经历，所以很怕带的团队里有小伙伴中招。</p>

<p>出来创业为了大家不搞出内伤，我们不打卡不搞绩效不规定上下班时间不限制休假长度。</p>

<p>但即便如此，圣杯般的Work Life Balance并没有发生：至少本座没有体验到。</p>

<p>事到如今我终于可以认定它是不可能做到的：从事实上看如此，从道理上讲也应该如此。</p>

<p>工作和生活是两件需要同一个主体，你，投入身心的事情。你可以把两件都做得马马虎虎，你可以把其中一件做得不错另一件做得挺糟，你也可以把其中一件做得出类拔萃另一件完全不做。但你没法两头都做好，因为没有平行世界。</p>

<p>觉得自己都能做好的人，一定是参考的样本太过于局限：很多时候你需要和自己差不多资质的选手比较，才能发现更多的专注意味着什么。而实际上大多数真正做好了的人，资质比你更好并且比你专注多了。</p>

<p>所以呢？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[好的引导流程胜过10个新功能]]></title>
    <link href="http://lenciel.com/2015/06/the-next-fucking-new-feature/"/>
    <updated>2015-06-26T13:55:49+08:00</updated>
    <id>http://lenciel.com/2015/06/the-next-fucking-new-feature</id>
    <content type="html"><![CDATA[<p>SNS的有趣之处就在于，经常你会看到一些话，让你对着屏幕点头不已。比如下面这句：</p>

<p><img src="http://lenciel.com/downloads/images/2015_06/the_next_new_feature.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>Joshua Porter的这段话看起来是吐槽，但又实实在在的发生在参与创业大潮的你我身边。在2000年互联网泡沫破灭之前，那些最终幻灭的高科技公司的发展轨迹无非是：</p>

<ol>
<li>用一个美好的想法或者概念融资</li>
<li>花9-12个月的时间推出一个产品</li>
<li>花大把的PR费用去做推广和宣传</li>
<li>发展无法满足预期</li>
<li>花6-9个月推出产品2.0版本</li>
<li>重复#1-#5，直到烧完所有的融资</li>
</ol>


<p>在2000年之后，经过这十来年的发展，业界总结了很多的经验教训。我们在团队里面推行了敏捷、TDD等各种各样的方法论，我们在架构上进行了从monolithic到microservice的演进，我们的部署开始容器化并且都是Devops来完成了。</p>

<p>所有的人都充满信心的宣布，我们现在通过迭代，能够以较低的成本快速推出新版本了。然后，当你观察身边那些高科技公司的时候你发现：</p>

<ol>
<li>用一个美好的想法或者概念融资</li>
<li>花3-6个月推出一个应用（web app、手机app或者干脆是基于微信开发的app）</li>
<li>提交到各种应用市场然后发动PR攻势</li>
<li>发展无法满足预期</li>
<li>买关键字、买量、买推广</li>
<li>发展无法满足预期</li>
<li>花3-6个月推出应用2.0版本</li>
<li>重复#1-#7，直到烧光融资</li>
</ol>


<p>Hmmm&hellip;所以也难免有人会说这其实没有什么不同嘛：</p>

<p><img src="http://lenciel.com/downloads/images/2015_06/chuangyeban.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>然而无论预警者的声音再大声，作为创业者这种&#8221;启动-失败-再启动&#8221;的反复试错的精神都已经成为了我们的信条。的确，就跟你打开一张刮刮乐发现没奖时一样，如果我们做出来的项目没有人用，那么再来一次无疑是最轻松最诱人的选择。</p>

<p>然而如果你仔细看数据的话，会发现下一次失败是那样的必然。</p>

<a name="L.............................."></a>
<h1>数据：冷启动后的留存</h1>

<p>下面这个曲线是从业者们最不愿意面对的曲线，展示了从流量导入到一个月后可怜的留存数据：</p>

<p><img src="http://lenciel.com/downloads/images/2015_06/the_tragic_curve.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<ul>
<li>1000个UV访问</li>
<li>200个用户注册(20%)</li>
<li>160个用户完成注册(80%)</li>
<li>次日上线40%</li>
<li>次周上线20%</li>
<li>次月上线10%</li>
</ul>


<p>也就是说30天后，日活用户大概是2%左右：而且你还不要觉得这数据很惨。如果去搜集真实产品的数据来看，除开IM类产品，大多数的产品甚至完不成这样的数据。</p>

<p>所以，做互联网产品首先要接受一个现实：你多半比拿破仑派去<a href="http://www.douban.com/note/207589154/">入侵俄罗斯</a>的大军要<a href="https://en.wikipedia.org/wiki/Grande_Arm%C3%A9e#1810.E2.80.931812">崩得更快</a></p>

<a name="L..............."></a>
<h1>加新功能？</h1>

<p>当悲观的数据被端到面前的时候，决策层首先要明白，大多数时候加入任何新功能都不能把曲线扳回来。最容易出现的错误就是：</p>

<ol>
<li>加入的功能不是服务于大多数人：特别是如果加入的功能仅仅服务于已经注册或者已经使用过产品的用户，而不是目前还不是用户的或者刚刚注册为用户的人群</li>
<li>加入的功能没有体现在大多数人能感知的地方：特别是如果加入了新功能，但是在用户进行注册或者使用的流程里面没有提示他们，让他们根本感知不到</li>
</ol>


<p>这些错误之所以很容易犯，是因为我们作为产品设计和开发的人，很愿意把时间花在&#8221;很高级&#8221;或者&#8221;很酷&#8221;的功能上。而这些所谓的增加用户&#8221;粘性&#8221;的高级功能，如果你看看上面那条曲线，你会发现大多数是没有任何意义的：一个在用户使用产品第七天才会用到的功能，对于在第四天之后就不再出现的用户来说，等于没有。</p>

<p>其实在产品设计里面有一个概念是所谓的&#8221;engagement wall&#8221;。那些需要用户关联支付渠道或者累积经验值才能解锁的功能，或者是深度使用才能挖掘出来的功能，被认为是藏在墙后面的。比如微信上面的拍摄分享视频，发送红包等等。那些可以通过简单的投入就能让用户体验到价值的功能则被认为是在这堵墙外面的。比如微信上浏览好友的朋友圈，点个赞等等。把什么样的功能作为吸引用户的糖果放在面上，把什么样的功能放在墙里面藏着并激励用户来解锁它们，是需要经过精心设计的，但有一个规则不会变：那些放在墙里面的功能，是没法改变曲线的走势的。</p>

<a name="L......................................."></a>
<h1>如何选择下一个新加的功能？</h1>

<p>首先想好要不要挑。</p>

<p>如果产品还在初期，你可能需要做的是精细打磨现有的功能，而不是加入新功能。新功能，特别是我们自认为可以&#8221;扭转乾坤&#8221;的新功能，往往意味着巨大的风险，巨大的投入，巨大的预期，以及极大的失败可能性。你需要掂量自己和团队是否能够承受得住。</p>

<p>决定好要挑？那就先去全面深入地了解你面对的问题域和你的用户的所思所想，搜集那些真正能够带来转化率的功能，然后：</p>

<ol>
<li>做那些能够影响最多人的功能：成功的产品会把最多的时间花在那些非用户或者是随便来玩玩的用户使用的功能上，比如<a href="https://www.useronboard.com/how-slack-onboards-new-users/">Slack的引导流程</a>，比如<a href="http://blog.leadpages.net/landing-page-trends/">Medium的访客评论</a>。</li>
<li>做那些能够带来转化的功能：特别是在精力和人力有限的时候，做影响曲线前半段走势的功能：注册、登录、引导等等，特别是首次登录后的引导。不同的产品类型，需要引导的方向是不一样的。测试平台上，你要引导用户顺畅的完成一次测试；SNS你要引导用户添加好友，完成第一次对话或者分享；云服务，你要引导用户完成机器创建、带宽选择、域名解析等等动作，让他可以使用你的服务。根据你的业务，给用户一个舒适度极高的引导流程，带来的转化率的提升是非常高的。</li>
</ol>


<p>然后？</p>

<p>Let&rsquo;s keep our fingers crossed and God bless us&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django其实不是MVC]]></title>
    <link href="http://lenciel.com/2015/03/django-is-not-that-much-mvc/"/>
    <updated>2015-03-30T11:36:24+08:00</updated>
    <id>http://lenciel.com/2015/03/django-is-not-that-much-mvc</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.com/downloads/images/2015_03/mvc.jpg" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>很多时候<a href="https://www.djangoproject.com/">Django</a>都被称为是一个MVC框架 — <code>Model-View-Controller</code>。这样说的人要么就是已经熟悉过其他的MVC框架，所以看到Django有自己的Template系统和<code>views.py</code>来放各种逻辑代码，就想当然的认为Django也是；要么就是其实没有真正实践过Django，从各种其他的错误文档里面看到或者是听说的。</p>

<p>MVC框架，是针对<code>状态</code>的。为了明白这个，我们假设你是在编辑一个图片：</p>

<ul>
<li>你得在内存里面保存这张图片 (Model)</li>
<li>你得在屏幕上显示这张图片 (View)</li>
<li>你得有办法让用户改变图片 (Controller)</li>
<li>当用户改变图片后，你得更新显示：<code>Controller</code>通知<code>Model</code>更新状态，然后<code>Model</code>通知<code>View</code>刷新显示（最好是通过某种pub/sub机制，让View和Model之间是没有耦合的)</li>
</ul>


<p>MVC框架主要是管理状态，让MVC三者是同步的：这三部分同时在内存（可能跑在不同的线程甚至进程）里，有各自的状态，相互之间进行交互，让变动同步到各方。</p>

<p>Django的<code>Model-View-Template</code>有很大的不同。</p>

<p>首先是没有状态。大多数的HTTP GET请求，拿到的数据库里面的数据，都被当成是immutable的不可重入的输入，而没有状态。而在一般的Web应用开发中，HTTP上有状态的交互可以通过：</p>

<ol>
<li>修改保存在服务器端数据库里的数据</li>
<li>修改保存在客户端的数据（比如cookies）</li>
</ol>


<p>共同来完成。因此一次状态的变化并不是在一个page的view里面保持的：状态一半放在当前的page和cookies里面，一半放在session数据库里面。</p>

<p>但是处理HTTP请求的时候，Django的MVT是完全无状态的。这里首先要说明的是，<code>views.py</code>这个名字本身是有一点儿误导的，因为给人的感觉是它只做&#8221;读&#8221;操作而不去&#8221;写&#8221;数据库（也就是说只是处理GET请求而不是POST请求）。但实际上<code>GET/POST</code>请求都会被放在<code>views.py</code>里面处理，所以更好的名字其实应该是<code>handler.py</code>：大多数Django的REST框架都是这样命名的。</p>

<p>处理GET请求的时候，如前面分析，本身就没有状态，而只是对输入的请求和服务器返回的数据进行展示。其次，当涉及数据修改的POST请求时，Django的处理其实是非常类似于老式的Web应用的。</p>

<p>所谓的老式的Web应用是指，过去的网站上当后台的数据发生变化的时候，其实是需要用户在前端自己点击刷新按钮来刷新的（最典型的刷新按钮就是浏览器里面那个刷新按钮）。这个动作背后发生的事情其实是：</p>

<ol>
<li>除开标识当前是哪个用户在浏览哪部分数据的信息（当前的url，用户的identity等等cookies里面的数据），把浏览器里面其他的状态都丢弃</li>
<li>发起一个全新的请求，获取所有的数据，再次重建页面</li>
</ol>


<p>说Django和老派的Web应用类似，是指一旦数据变更（比如一次SQL的INSERT或者是UPDATE），你需要返回一个redirect再做一次GET：&#8221;有数据的状态变化了，让我们重头再来一次&#8221;。</p>

<p>这也是为什么<a href="https://code.djangoproject.com/ticket/17">Django的ORM里面是没有一个&#8221;identity mapper&#8221;的</a>。<code>Model</code>处理状态变化的办法就是完全的无视它：当你觉得数据改变了时，直接重新获取一次数据重建页面。</p>

<p>这和大多数经典的MVC框架（比如AngularJS）是和这完全相反的套路：在设计上做了很多事情来避免&#8221;从头再来&#8221;，而是通过建立MVC之间的消息机制，来通知各方的状态变化，做到同步。</p>

<p>MVC还有一部分是关于如何分隔代码。如果你把MVC当成：&#8221;把存储数据，显示数据和处理数据的代码分离&#8221;，那Django的设计的确是符合这个模式的。</p>

<p>但是实际上这是一个粒度非常粗的描述，因此就把Django说成是MVC的其实会带来很多误会。</p>

<p>比如，Django是基于HTTP的，所以理解它的MVT，最好的办法就是实践它：看它的<code>view</code>里面是如何处理一个HTTP的请求并返回一个HTTP的response。如果你脑子里面有其他的不是基于HTTP这层次的MVC框架，用来类比学习Django，你大概会哭&hellip;</p>

<p>其次，Django的框架，它的app里面文件的组织和使用，和很多别的MVC框架也是不同的。</p>

<p>最近有个特别火的日志是Hynek Schlawack的<a href="https://hynek.me/articles/know-your-models/">Know Your Models</a>。它是基于经典的MVC框架来假设，实际上Django并不是适用于这套假设的。</p>

<p>比如他觉得应该有<code>pure</code>的models，从而把M、V、C分离开做到可以独立进行处理。</p>

<p>但其实Django里面很多app都仅仅是数据库的简单wrapper。这种情况下其实没必要有<code>pure</code>的M，然后再加上一堆V和C。其实这是Django的美好之处：以<code>admin</code>这个app为例，它的设计初衷就是要在数据库上面封装一个足够简单的编辑层，以致于95%的代码都是可以自动生成的。</p>

<p>把<code>Model</code>通过API暴露出来给<code>View</code>用，当然也是正确的思路。但我自己写代码的时候，就很喜欢把所有的直接调用<code>.filter()</code>的代码都放到<code>models.py</code>里面，这样一来<code>models.py</code>就是独立可测的。</p>

<p>并且，如果你写了一个<code>pure</code>的Model，而把逻辑代码从Model里面抽取出来放到别的地方去，那你在<code>admin</code>和其他<code>ModelForms</code>里面就没法重用了。</p>

<p>总的来说，在Django里面，model在创建的时候，就是有业务逻辑贯穿在里面的。如果你每个<code>customer</code>只能有一个<code>email</code>，那么你的model就得包含这个限制。如果你要改变这个规则，那么就不仅仅是MVT的某一方要改，而是从上到下都得修改。</p>

<p>甚至我个人认为MVC里面说的&#8221;逻辑和数据分离&#8221;这种思路本来就挺奇怪的。除非你把数据存储当成<code>key-value</code>这样的东西，那么你怎么可能在一个不是为了某个业务逻辑设计的数据库上开发出一个应用呢？</p>

<p>数据就是数据，是<code>gloabl data</code>而不是<code>gloabal state</code>。在整个HTTP请求被处理的过程中，它被认为是没有变化的：如果有，就应该再发一条请求来取最新的数据再去重画。</p>

<p>当我们开发Django的应用时，为了满足实际上的业务逻辑的需要，数据库的schema一般一直在变。这样Django的model就可以作为API的一个良好的基石，把往上走的事情做得尽量简单。</p>

<p>这涉及到软件开发里最基本的一个设计要点：你把数据库仅仅当成应用里面的持久化层，还是当成应用的一部分，甚至是最重要的一部分。</p>

<p>我其实一直偏向于后者：喂，把像Postgres这样RDMS当成一个持久层未免也太不尊重了吧！所以在使用Django设计app的时候，不但要思考&#8221;model layer&#8221;，还要综合考虑其他数据库可以做的事情：比如contraint checking, transactions, triggers等等。同样，在测试的时候也不仅仅是测试那些字段和model之间的关系，而是要考虑对业务逻辑的测试。</p>
]]></content>
  </entry>
  
</feed>
