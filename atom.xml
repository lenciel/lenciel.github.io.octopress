<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@Lenciel]]></title>
  <link href="http://lenciel.cn/atom.xml" rel="self"/>
  <link href="http://lenciel.cn/"/>
  <updated>2015-01-10T17:03:13+08:00</updated>
  <id>http://lenciel.cn/</id>
  <author>
    <name><![CDATA[Lenciel Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Goodbye Palm4fun, and the Tech Stack Review Part I]]></title>
    <link href="http://lenciel.cn/2015/01/p4f-tech-stack-part-1-devops/"/>
    <updated>2015-01-04T14:44:23+08:00</updated>
    <id>http://lenciel.cn/2015/01/p4f-tech-stack-part-1-devops</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/2015_01/goodbye_palm4fun.png" title="Don't touch me..." alt="goodbye" /></p>

<p>大概两年前，和Bergkamp、194一次计划外的聊天之后，<strike>出于保护直肠的目的</strike>，本座离开了基友密布的<a href="http://www.myriadgroup.com/">Myriad</a>，作为Palm4fun的联合创始人之一，开始捣鼓着自己创业。</p>

<p>在具体的研发工作方面，我主要是负责服务器端的开发。但因为被冠名CTO，我的工作还包括：</p>

<ul>
<li>制定研发流程，管理运作研发团队（很幸运，团队都是气味相投的小伙伴并且平均水平很高）</li>
<li>搭建和维护各种IT系统让大家的工作更加轻松</li>
<li>对各种项目进行技术选型、风险评估和报价</li>
<li>培养有palm4fun自己特色的团队文化</li>
<li>甚至是，设计我们的logo甚至是<a href="http://lenciel.cn/2014/09/logo-test/">T-Shirt</a></li>
</ul>


<p>别误会，并不是和写代码比，我更喜欢做这些事情：我做这些，主要是经过多年的折腾，已经对自己想在什么样的环境里进行软件开发有了自己的体会。所以，我当然愿意花时间和小伙伴们一起，把理想中的工作环境具体到实践。</p>

<p>经过这两年的时间，虽然我们有纯技术团队创业理应遭遇的各种捉襟见肘，但因为整个团队的坚持和付出，在活下来的同时，也完成了一定的技术积累。有一个可喜的现象是，我们自己参与开发孵化的项目，虽然有一些死掉了，但也有一些拿到了几百万的天使投资；而我们作为外包方参与研发的项目，客户都非常认可我们的项目质量和工作方式。很多客户不但和我们确定了长期合作的关系，还积极介绍自己朋友的项目给我们。</p>

<p>新年到来之际，随着我们被<a href="http://www.testbird.com/">Testbird</a>收编，Palm4fun大部分成员即将投入到新公司的各条战线，Palm4fun作为一个组织也就此消亡了。回首这两年，我想说，如果你没有和我一起经历那说了你也不懂我还是不说了&hellip;&hellip;</p>

<p>跨年的时候，茕茕孑立的本座画了张思维导图，主要目的是把过去两年palm4fun的积累整理一下。画出来之后很多朋友希望我分享高清无码图：因为整个图非常大，不太适合在移动设备上看。</p>

<p><img src="http://lenciel.cn/downloads/images/2015_01/p4f_stack_all.png" title="Don't touch me..." alt="stack_all" /></p>

<p>其实在一开始选择这些的时候，基本上就是从运维支撑和测试部署工具、产品开发和数据管理、基础设施和功能模块以及商业工具四个维度出发，所以就拆成四个部分简单过一遍。特别声明：选择的依据和出发点主要是根据个人喜好，包括自己使用的体验以及眼缘，并没有特别的理由。比如我们用Reviewboard不用Phabricator，完全是因为团队中大多数人已经用习惯了。</p>

<a name="Build.Test.Deploy"></a>
<h2>Build/Test/Deploy</h2>

<p><img src="http://lenciel.cn/downloads/images/2015_01/p4f_stack_devops_1.png" title="Don't touch me..." alt="stack_devops_1" /></p>

<ul>
<li>我们没有用Gerrit大体的原因是它太丑了</li>
<li>Ngrok是做微信接口调试时意外发现的好物</li>
</ul>


<a name="Monitoring"></a>
<h2>Monitoring</h2>

<p><img src="http://lenciel.cn/downloads/images/2015_01/p4f_stack_devops_2.png" title="Don't touch me..." alt="stack_devops_2" /></p>

<ul>
<li>Sentry帮我们在用户找到我们之前找到了很多问题</li>
<li>一开始我们用过Nagios，它的设计也很不错，就是界面太&hellip;</li>
<li>Zabbix帮我们远离主机因为硬盘满了或者内存不够驾崩的场面，但它界面看着仍然古旧，我不是很喜欢</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Fixture With Factory Boy and Faker]]></title>
    <link href="http://lenciel.cn/2014/12/making-fixture-with-factory-boy-and-faker/"/>
    <updated>2014-12-20T03:14:59+08:00</updated>
    <id>http://lenciel.cn/2014/12/making-fixture-with-factory-boy-and-faker</id>
    <content type="html"><![CDATA[<p>我们在Django项目的开发和测试过程中经常需要mock一些数据作为<a href="https://docs.djangoproject.com/en/1.7/howto/initial-data/">fixture</a>，比较常见的做法是：</p>

<ol>
<li>进行一些操作创建测试数据</li>
<li>使用<code>dumpdata</code>命令导出json格式的数据</li>
<li>以导出的json为模板构造测试数据用<code>loaddata</code>命令导入到数据库</li>
</ol>


<p>这样对于大多数场景也算够用了，但是你总会遇到某一天客户走来说：“我想看看那个报表生成出来啥样，能不能创建两千条记录？”</p>

<p>这种时候你大概你第一反应是把之前那个json搞来copy-paste出两千份数据。但很快你就会意识到那是不行的：要构建一个对象，你常常需要先构建它外键的对象，而实际上线的项目它的数据库结构是非常复杂的（数据库结构图的生成见<a href="http://lenciel.cn/2014/12/integrate-schemaspy-with-sphinx-build-for-django-database-design-visualization/">这里</a>），所以构建两千条记录的工作量会远远超过你的想象：</p>

<p><img src="http://lenciel.cn/downloads/images/2014_12/database_design_visualization.png" title="schemaSpy..." alt="schemaSpy" /></p>

<p>最近本座试用了<a href="https://github.com/rbarrois/factory_boy/">factory boy</a>和<a href="https://github.com/joke2k/faker">faker</a>的组合，感觉还比较好用。</p>

<a name="Factory.Boy"></a>
<h2>Factory Boy</h2>

<p>最开始找这类批量生成测试数据的库，主要考察的是<a href="https://github.com/vandersonmota/model_mommy">Model Mommy</a>和<a href="https://github.com/rbarrois/factory_boy/">Factory Boy</a>。看了一下文档感觉两者的差别并不算很大，但是<a href="http://movie.douban.com/subject/1898357/">Factory Girl</a>里面的<a href="http://movie.douban.com/celebrity/1003485/">Sienna Miller</a>实在是让人过目不忘所以有什么好犹豫的呢？</p>

<p>Factories的文档上说明了基本的用法，需要注意的主要是如何生成有一定依赖关系的一组测试对象。</p>

<a name="L............"></a>
<h3>数据构造</h3>

<p>Factory Boy下的数据构造主要是通过<code>Sequence</code>和<code>Fuzz</code>两个包来完成。</p>

<p><code>Sequence</code>故名思议是顺序生成的，比如你要让生成的数据有规律的用户名和电话号码，这样你看到电话<code>13000000001</code>就是是对应<code>user0001</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="n">Sequence</span><span class="p">(</span><span class="k">lambda</span> <span class="n">n</span><span class="p">:</span> <span class="s">u&#39;user</span><span class="si">%04d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="n">phone</span> <span class="o">=</span> <span class="n">Sequence</span><span class="p">(</span><span class="k">lambda</span> <span class="n">n</span><span class="p">:</span> <span class="s">u&#39;1300000</span><span class="si">%04d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">n</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>而<code>Fuzz</code>则是随机的，主要用来构造像学校、专业或者生日这样的数据：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">card_bank</span> <span class="o">=</span> <span class="n">FuzzyChoice</span><span class="p">([</span><span class="s">u&#39;中国银行&#39;</span><span class="p">,</span> <span class="s">u&#39;中国招商银行&#39;</span><span class="p">,</span> <span class="s">u&#39;中国工商银行&#39;</span><span class="p">,</span>
</span><span class='line'>                      <span class="s">u&#39;中国建设银行&#39;</span><span class="p">,</span> <span class="s">u&#39;成都银行&#39;</span><span class="p">])</span>
</span><span class='line'><span class="n">major</span> <span class="o">=</span> <span class="n">FuzzyChoice</span><span class="p">([</span><span class="s">u&#39;地球物理学&#39;</span><span class="p">,</span> <span class="s">u&#39;大气科学&#39;</span><span class="p">,</span> <span class="s">u&#39;海洋科学&#39;</span><span class="p">,</span> <span class="s">u&#39;力学&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="s">u&#39;农业工程&#39;</span><span class="p">,</span> <span class="s">u&#39;环境科学&#39;</span><span class="p">,</span> <span class="s">u&#39;心理学&#39;</span><span class="p">,</span> <span class="s">u&#39;统计学&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="s">u&#39;系统科学&#39;</span><span class="p">,</span> <span class="s">u&#39;地矿&#39;</span><span class="p">,</span> <span class="s">u&#39;机械&#39;</span><span class="p">,</span> <span class="s">u&#39;仪器仪表&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="s">u&#39;能源动力&#39;</span><span class="p">,</span> <span class="s">u&#39;电气信息&#39;</span><span class="p">,</span> <span class="s">u&#39;土建&#39;</span><span class="p">,</span> <span class="s">u&#39;测绘&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="s">u&#39;环境与安全&#39;</span><span class="p">,</span> <span class="s">u&#39;化工与制药&#39;</span><span class="p">,</span> <span class="s">u&#39;交通运输&#39;</span><span class="p">,</span> <span class="s">u&#39;海洋工程;&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="s">u&#39;航空航天&#39;</span><span class="p">,</span> <span class="s">u&#39;武器&#39;</span><span class="p">,</span> <span class="s">u&#39;工程力学&#39;</span><span class="p">,</span> <span class="s">u&#39;生物工程&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="s">u&#39;公安技术&#39;</span><span class="p">,</span> <span class="s">u&#39;材料科学&#39;</span><span class="p">,</span> <span class="s">u&#39;材料&#39;</span><span class="p">,</span> <span class="s">u&#39;水利&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="s">u&#39;林业工程&#39;</span><span class="p">,</span> <span class="s">u&#39;轻工纺织食品&#39;</span><span class="p">,</span> <span class="s">u&#39;电子信息科学&#39;</span><span class="p">,</span> <span class="s">u&#39;其他&#39;</span><span class="p">])</span>
</span><span class='line'><span class="n">birthday</span> <span class="o">=</span> <span class="n">FuzzyNaiveDateTime</span><span class="p">(</span><span class="n">dt</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">1992</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">dt</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">1996</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，有的字段，比如姓名、地址这类通过顺序或者是随机的从某个设定的集合抽取效果都不够理想，后面会看到怎么用<a href="https://github.com/joke2k/faker">faker</a>来构造它们。</p>

<a name="L.................."></a>
<h3>关联对象生成</h3>

<p>关联对象的关系有很多种(1:1, 1:n, n:1, n:n)，主要都是通过组合运用<code>SubFactory</code>和<code>RelatedFactory</code>两者来生成，但具体的构造方式和先构造谁都要以实际情况而定。比如我们有User和Tester这样的1:1的关系：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Tester</span><span class="p">(</span><span class="n">TimeBaseModel</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">OneToOneField</span><span class="p">(</span><span class="n">User</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">verbose_name</span><span class="o">=</span><span class="s">u&#39;账号&#39;</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">related_name</span><span class="o">=</span><span class="s">&#39;tester&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里在考虑是在<code>TesterFactory</code>里面把<code>User</code>作为<code>SubFactory</code>来生成，还是在<code>UserFactory</code>里面把<code>Tester</code>作为<code>RelatedFactory</code>来生成，主要就是看先后关系。很显然，在这里我们应该先构造系统里的User：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">TestUserFactory</span><span class="p">(</span><span class="n">UserFactory</span><span class="p">):</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="n">tester</span> <span class="o">=</span> <span class="n">RelatedFactory</span><span class="p">(</span><span class="s">&#39;apps.tester.factories.TesterFactory&#39;</span><span class="p">,</span> <span class="s">&#39;user&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码告诉系统，在每个<code>TestUser</code>被构造的时候，用构造出来的<code>user</code>来创建一个1:1的<code>Tester</code>。这个<code>Tester</code>的构造会在<code>user</code>的<code>save</code>之前完成。</p>

<p>然后在<code>Tester</code>的构造过程中你可以直接通过<code>SelfAttribute</code>使用传入的<code>user</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">TesterFactory</span><span class="p">(</span><span class="n">DjangoModelFactory</span><span class="p">):</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="n">phone</span> <span class="o">=</span> <span class="n">SelfAttribute</span><span class="p">(</span><span class="s">&#39;user.phone&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">nick_name</span> <span class="o">=</span> <span class="n">SelfAttribute</span><span class="p">(</span><span class="s">&#39;user.nick_name&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">creator</span> <span class="o">=</span> <span class="n">SelfAttribute</span><span class="p">(</span><span class="s">&#39;user&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>再比如，我们的<code>Tester</code>和<code>PlatformTask</code>都会关联到测试任务<code>TesterTask</code>，它们俩看起来都是<code>ForeinKey</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">TesterTask</span><span class="p">(</span><span class="n">TestingDeviceMixin</span><span class="p">,</span> <span class="n">TimeBaseModel</span><span class="p">):</span>
</span><span class='line'>    <span class="n">owner</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Tester</span><span class="p">,</span>
</span><span class='line'>                              <span class="n">verbose_name</span><span class="o">=</span><span class="s">u&#39;测试人&#39;</span><span class="p">,</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">platform_task</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">PlatformTask</span><span class="p">,</span>
</span><span class='line'>                                      <span class="n">verbose_name</span><span class="o">=</span><span class="s">u&#39;任务&#39;</span><span class="p">,</span>
</span><span class='line'>                                      <span class="n">related_name</span><span class="o">=</span><span class="s">u&#39;tester_tasks&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>但对生成数据而言，我们的目标会是每个<code>Tester</code>在被创建的时候，都给它创建一个以这个<code>Tester</code>为<code>owner</code>的<code>TesterTask</code>，并且给这个<code>TesterTask</code>创建一个关联的<code>PlatformTask</code>。</p>

<p>于是我们的写法就会是，首先在<code>TesterFactory</code>里面使用<code>RelatedFactory</code>来创建<code>TesterTask</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">TesterFactory</span><span class="p">(</span><span class="n">DjangoModelFactory</span><span class="p">):</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="n">tester_task</span> <span class="o">=</span> <span class="n">RelatedFactory</span><span class="p">(</span><span class="s">&#39;apps.tester.factories.TesterTaskFactory&#39;</span><span class="p">,</span> <span class="s">&#39;owner&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在<code>TesterTaskFactory</code>里面创建<code>PlatformTask</code>，并且在构造的时候使用传入的<code>owner</code>的参数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">TesterTaskFactory</span><span class="p">(</span><span class="n">DjangoModelFactory</span><span class="p">):</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="n">platform_task</span> <span class="o">=</span> <span class="n">SubFactory</span><span class="p">(</span><span class="s">&#39;apps.platformtask.factories.PlatformTaskFactory&#39;</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">company</span><span class="o">=</span><span class="n">SelfAttribute</span><span class="p">(</span><span class="s">&#39;..owner.user.company&#39;</span><span class="p">),</span>
</span><span class='line'>                               <span class="n">owner</span><span class="o">=</span><span class="n">SelfAttribute</span><span class="p">(</span><span class="s">&#39;..owner.user&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<a name="faker"></a>
<h2>faker</h2>

<p>有很多字段，比如姓名、地址这些，纯粹用Fuzz的办法很难做到“贴近真实”。<a href="https://github.com/joke2k/faker">faker</a>就是用来解决这类字段的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">faker</span> <span class="kn">import</span> <span class="n">Factory</span>
</span><span class='line'><span class="n">fake</span> <span class="o">=</span> <span class="n">Factory</span><span class="o">.</span><span class="n">create</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">fake</span><span class="o">.</span><span class="n">name</span><span class="p">()</span>
</span><span class='line'><span class="c"># &#39;Lucy Cechtelar&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">fake</span><span class="o">.</span><span class="n">address</span><span class="p">()</span>
</span><span class='line'><span class="c"># &quot;426 Jordy Lodge</span>
</span><span class='line'><span class="c">#  Cartwrightshire, SC 88120-6700&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">fake</span><span class="o">.</span><span class="n">text</span><span class="p">()</span>
</span><span class='line'><span class="c"># Sint velit eveniet. Rerum atque repellat voluptatem quia rerum. Numquam excepturi</span>
</span><span class='line'><span class="c"># beatae sint laudantium consequatur. Magni occaecati itaque sint et sit tempore. Nesciunt</span>
</span><span class='line'><span class="c"># amet quidem. Iusto deleniti cum autem ad quia aperiam.</span>
</span><span class='line'><span class="c"># A consectetur quos aliquam. In iste aliquid et aut similique suscipit. Consequatur qui</span>
</span><span class='line'><span class="c"># quaerat iste minus hic expedita. Consequuntur error magni et laboriosam. Aut aspernatur</span>
</span><span class='line'><span class="c"># voluptatem sit aliquam. Dolores voluptatum est.</span>
</span><span class='line'><span class="c"># Aut molestias et maxime. Fugit autem facilis quos vero. Eius quibusdam possimus est.</span>
</span><span class='line'><span class="c"># Ea quaerat et quisquam. Deleniti sunt quam. Adipisci consequatur id in occaecati.</span>
</span><span class='line'><span class="c"># Et sint et. Ut ducimus quod nemo ab voluptatum.</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个包最可爱的地方就是支持本地化，比如一个随机的中文姓名可以这么去构造：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">faker</span> <span class="o">=</span> <span class="n">FakerFactory</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="s">&#39;zh_CN&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">name</span> <span class="o">=</span> <span class="n">lazy_attribute</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">faker</span><span class="o">.</span><span class="n">name</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<a name="L......fixture"></a>
<h2>生成fixture</h2>

<p>因为<a href="https://github.com/rbarrois/factory_boy/">factory boy</a>和<a href="https://github.com/joke2k/faker">faker</a>主要的作用是在测试里面去mock数据，所以要用它们生成fixture不是那么容易。这是因为Django的整个设计上就很注意避免你把测试的数据写到生产的数据库，所以测试都会在一个在<code>Setup</code>阶段被创建，在<code>TearDown</code>阶段被删除的临时数据库里面进行（我看了一下，在开发版本的Django上已经加了一个<code>--keepdb</code>的参数使得你可以<a href="https://docs.djangoproject.com/en/dev/ref/django-admin/#django-admin-option---keepdb">保留你用来运行测试的数据库了</a>）。</p>

<p>所以我们可以在一个测试的<code>Setup</code>阶段把数据生成后，直接调用<code>dumpdata</code>命令来把数据<code>dump</code>出去：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="n">company</span> <span class="o">=</span> <span class="n">CompanyFactory</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="n">TestUserFactory</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">company</span><span class="o">=</span><span class="n">company</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="mi">3000</span><span class="p">)</span>
</span><span class='line'>    <span class="n">TestUserFactory</span><span class="o">.</span><span class="n">create_batch</span><span class="p">(</span><span class="n">company</span><span class="o">=</span><span class="n">company</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">1500</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#for test_user in test_users:</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">create_fixture</span><span class="p">(</span><span class="s">&#39;tester&#39;</span><span class="p">,</span> <span class="s">&#39;tester.json&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">create_fixture</span><span class="p">(</span><span class="s">&#39;account&#39;</span><span class="p">,</span> <span class="s">&#39;account.json&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意，这里在创建的时候指定id主要是为了让初始的id比较大，避免和系统里面已经有的id撞车导致你构造的测试数据在<code>loaddata</code>的时候报错或者覆盖现有数据。</p>

<p>其中，<code>create_fixture</code>函数内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">create_fixture</span><span class="p">(</span><span class="n">app_name</span><span class="p">,</span> <span class="n">filename</span><span class="p">):</span>
</span><span class='line'>    <span class="n">buf</span> <span class="o">=</span> <span class="n">StringIO</span><span class="p">()</span>
</span><span class='line'>    <span class="n">management</span><span class="o">.</span><span class="n">call_command</span><span class="p">(</span><span class="s">&#39;dumpdata&#39;</span><span class="p">,</span> <span class="n">app_name</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">buf</span><span class="p">)</span>
</span><span class='line'>    <span class="n">buf</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">buf</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrate schemaSpy With Sphinx Build]]></title>
    <link href="http://lenciel.cn/2014/12/integrate-schemaspy-with-sphinx-build-for-django-database-design-visualization/"/>
    <updated>2014-12-18T00:26:32+08:00</updated>
    <id>http://lenciel.cn/2014/12/integrate-schemaspy-with-sphinx-build-for-django-database-design-visualization</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/2014_12/schemaSpy.png" title="schemaSpy..." alt="schemaSpy" /></p>

<p>在做项目的时候，客户或者合作的部门常常问研发要“数据库设计”。在古代，瀑布式开发的第一个阶段是做架构设计和写文档，所以这样的需求一般都能被“充分满足”。而在我们现在的项目节奏和迭代速度都很快，数据库的设计在项目初期经常也在变化，如何能够比较方便的文档化这些变更？</p>

<p>对开发团队内部来说，我个人觉得Django的South或者是1.7之后加入的<a href="http://lenciel.cn/2014/08/django-1-dot-7-migrations/">Migration</a>里面每次变更生成的migration文件就已经足够开发人员了解底层的设计发生了什么变化。</p>

<p>而对外提供的文档，主要是在更高层级进行设计的沟通，所以之前我们一般是通过<a href="https://github.com/django-extensions/django-extensions">django-extension</a>里面的<code>graph_models</code>命令来生成简单的关系图：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Create a PNG image file called my_project_visualized.png with application grouping</span>
</span><span class='line'><span class="nv">$ </span>./manage.py graph_models -a -g -o my_project_visualized.png
</span></code></pre></td></tr></table></div></figure>


<p>效果如下：</p>

<p><img src="http://lenciel.cn/downloads/images/2014_12/django_extension.svg" title="django-extension-sample..." alt="django-extension-sample" /></p>

<p>这里的图是通过<a href="http://www.graphviz.org/">graphviz</a>来完成的，可以看到一般的了解也足够了，但是缺点主要是：</p>

<ol>
<li>生成的关系图比较简陋</li>
<li>由于是图片，一旦表比较多浏览起来并不是那么灵活</li>
</ol>


<a name="L......schemaSpy"></a>
<h2>使用schemaSpy</h2>

<p>于是在新的项目里面本座选用了看起来更美好的<a href="http://schemaspy.sourceforge.net/">schemaSpy</a>，因为：</p>

<ol>
<li>轻量但支持多种数据库（jdbc），针对Django的test/stage/prod环境都可以使用</li>
<li><a href="http://schemaspy.sourceforge.net/sample/">功能非常强大</a>，并且有命令行支持，可以集成到CI</li>
</ol>


<p>不过和大多数开源工具一样，它的文档也是乱糟糟的。以开发环境为例，我们一般使用sqlite作为数据库，要在Mac下面成功运行schemaSpy连接sqlite，你需要：</p>

<ol>
<li>下载最新的<a href="http://sourceforge.net/projects/schemaspy/files/">SchemaSpy jar包</a></li>
<li>下载最新的<a href="https://bitbucket.org/xerial/sqlite-jdbc">Xerial Sqlite JDBC jar</a>包<code>sqlite-xerial.jar</code></li>
<li><p>创建一个<code>sqlite-xerial.properties</code>文件，内容如下：</p>

<pre><code class="`"> # Use -dp to override.
 description=SQLite
 connectionSpec=jdbc:sqlite:&lt;db&gt;
 db=database name
 driver=org.sqlite.JDBC
 #you may need to put the full path to the driver depending on your setup
 driverPath=sqlite-jdbc-3.8.7.jar
 selectTablesSql=.tables
</code></pre></li>
<li><p>运行命令：</p>

<pre><code class="`"> java -jar schemaSpy_5.0.0.jar -t  sqlite-xerial.properties -db ../src/default.db  -o django-testbird -sso
</code></pre></li>
</ol>


<p>会看到有<code>warning</code>，但是无需惊慌，我看了一下是schemaSpy的作者没有正确的处理<code>[]</code>。</p>

<a name="L.........Sphinx"></a>
<h2>集成到Sphinx</h2>

<p>因为我们的项目都使用了Jenkins自动启动Sphinx来生成文档，所以理想的情况当然是：</p>

<ol>
<li>修改Django下某个app的<code>models.py</code></li>
<li><code>make migration</code>生成migrations文件</li>
<li>代码提交并push到gitlab</li>
<li>Jenkins调用<code>django management command</code>完成表结构的变更</li>
<li>Jenkins自动更新包括数据库设计在内的文档</li>
</ol>


<p>要实现#5，最简单的办法是在Sphinx文档目录下的<code>Makefile</code>里面加一个<code>target</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">dbv:</span>
</span><span class='line'>    <span class="n">java</span> <span class="o">-</span><span class="n">jar</span> <span class="n">schemaSpy_5</span><span class="o">.</span><span class="mf">0.0</span><span class="o">.</span><span class="na">jar</span> <span class="o">-</span><span class="n">t</span> <span class="n">sqlite</span><span class="o">-</span><span class="n">xerial</span><span class="o">.</span><span class="na">properties</span> <span class="o">-</span><span class="n">db</span> <span class="o">../</span><span class="n">src</span><span class="o">/</span><span class="k">default</span><span class="o">.</span><span class="na">db</span>  <span class="o">-</span><span class="n">o</span> <span class="n">_db_virtualization</span><span class="o">/</span><span class="n">django</span><span class="o">-</span><span class="n">testproject</span> <span class="o">-</span><span class="n">sso</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在Jenkins调用的脚本里面加上<code>make dbv</code>就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Use Evernote]]></title>
    <link href="http://lenciel.cn/2014/12/how-i-use-evernote/"/>
    <updated>2014-12-17T14:27:39+08:00</updated>
    <id>http://lenciel.cn/2014/12/how-i-use-evernote</id>
    <content type="html"><![CDATA[<p>其实之前也分享了一些<a href="http://lenciel.cn/blog/categories/tools-i-use/">自己使用的工具</a>，只是更偏重研发。今天跟另外一个也用Evernote的同事交流了一下我怎么用Evernote，效果还可以，干脆在年关将至的时候分享一下自己日常使用的一些软件。</p>

<p>从Evernote开始。</p>

<p>进入互联网时代，特别是移动互联网时代之后，获取各种信息变得越来越便捷了，如何管理这些纷繁的信息也自热而然成为一个需求。大多数像我一样的老人，一开始是用<a href="https://digg.com/">dig</a>和<a href="https://delicious.com/">delicious</a>这样基于书签的工具。因为在有google和云笔记本这种东西之前，大家都是靠装满了各种书签的&#8221;收藏夹&#8221;过活（年轻人是不能理解重装机器没有备份收藏夹的伤痛的）。</p>

<p>但是这样的系统坏处就是它是&#8221;lazy-loading&#8221;的，你每次需要的时候，需要打开网页（如果你还能想起叫啥并且它们还健在的话）去找原来看到的信息，所以更适合用来做reference的整理。对于你真正希望梳理成自己知识的东西，更好的选择当然是使用所谓的PIM(Personal Information Management)软件。</p>

<p>我2010年开始用Evernote，一直用的是免费版(空间对我来说够了，而且我也没有太多分享的需求)，它的优点包括：</p>

<ul>
<li>多(liang)种(you)多(bu)样(qi)的记录手段</li>
<li>丰富灵活的管理方式</li>
<li>跨平台跨设备云同步</li>
<li>颜色还真水嫩啊</li>
</ul>


<p>但时间久了，Evernote里面的东西也多了起来。每次要找点儿什么基本上都是靠全文搜索，一直到我读到Michael Hyatt的<a href="http://michaelhyatt.com/evernote-tags.html">这篇文章</a>。</p>

<p>简单来说，大多数人用Evernote都是以&#8221;笔记本(Notebook)&ldquo;为容器来整理Note的。Michael的意思是Notebook和Tag比有这么几个弱点：</p>

<ol>
<li>Notebook数量有限制（个人版250，企业版5000），Tag可以有100000个</li>
<li>Notebook和Note是一对一的，Tag和Note是多对一的</li>
<li>Notebook只能建一级嵌套（基本上就是说可以Group一下），Tag可以无限制多层级嵌套</li>
</ol>


<p>所以他推荐了使用Tag来进行Note的管理。</p>

<p>除此之外他那篇文章里面还有个很重要的概念就是所有的文章先收到一个叫<code>Inbox</code>的Notebook，处理了之后再放到<code>Cabinet</code>里面去。这其实非常像我们使用邮箱：所有的邮件先被邮件系统放到Inbox，然后我们处理了之后打上相应的标签(ToDo, Later, &hellip;)，最后归档。</p>

<p>所以我现在是这么Evernote的。</p>

<p>首先，把Notebook减少到两个，一个是<code>Inbox</code>，一个是<code>Archive</code>。它们的作用跟我们的邮箱里面的Inbox和Archive是完全一样的。</p>

<p>然后，如果在网上看到觉得还挺有意思的文章，就用Evernote收录到<code>Inbox</code>。</p>

<p>注意，收录的时候我都习惯用下面的选项，去掉所有的样式：</p>

<p><img src="http://lenciel.cn/downloads/images/2014_12/evernote_chrome_clipper.png" title="Evernote Clipper" alt="Evernote Clipper" /></p>

<p>最后，在整理Inbox的时候，对每篇文章做一些修修剪剪，给Note加上合适的Tag，然后放到<code>Archive</code>。可以看到，因为tag可以嵌套和展开，要找到自己感兴趣的文章变得容易很多：</p>

<p><img src="http://lenciel.cn/downloads/images/2014_12/evernote_nested_tags.png" title="Evernote Clipper" alt="Evernote Clipper" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Merry Christmas Css Animation]]></title>
    <link href="http://lenciel.cn/2014/12/lonely-christmas-with-css/"/>
    <updated>2014-12-16T22:18:49+08:00</updated>
    <id>http://lenciel.cn/2014/12/lonely-christmas-with-css</id>
    <content type="html"><![CDATA[<p>昔日一统天下的Flash继续<a href="http://www.36kr.com/p/217821.html">势微</a>，但其实Web上的各种动画效果却越来越多了。今天因为一个产品需求，花了点儿时间看了一下，感觉目前CSS动画和JS动画两大门派势力都不小，之间需要有一个把大家嫁接在一起的东西：不知道<a href="http://w3c.github.io/web-animations/">Web Animation</a>会不会<a href="http://updates.html5rocks.com/2014/05/Web-Animations---element-animate-is-now-in-Chrome-36">有机会</a>。</p>

<p>纯CSS的动画实作:</p>

<p><link rel="stylesheet" type="text/css" href="http://lenciel.cn/downloads/static/css/christmas_animation.css" /></p>

<script>
  function resetSvgText() {
    $('#id-text-1' ).text($('#id-text-input-1' ).val());
    $('#id-text-2' ).text($('#id-text-input-2' ).val());
  }
$('#id-btn-submit').click(function() {
  resetSvgText();
})
</script>




<div class="form-container">
  <form class="form-inline" autocomplete="off" onsubmit="return false;">
    <input id="id-text-input-1" type="text" class="input-text" placeholder="Merry">
    <input id="id-text-input-2" type="text" class="input-text" placeholder="Christmas"><br/>
    <input type="submit" onclick="javascript:resetSvgText()" id="id-btn-submit" value="给我点儿颜色看看">
  </form>
</div>




<div class="box-container">
    <svg viewBox="0 0 1400 1000">
      <symbol id="s-text">
        <text id="id-text-1" text-anchor="middle"
              x="50%"
              y="35%"
              class="text--line"
              >
          Merry
        </text>
        <text id="id-text-2" text-anchor="middle"
              x="50%"
              y="90%"
              class="text--line2"
              >
          Christmas
        </text>
      </symbol>

      <g class="g-ants">
        <use xlink:href="#s-text"
          class="text-copy"></use>
        <use xlink:href="#s-text"
          class="text-copy"></use>
        <use xlink:href="#s-text"
          class="text-copy"></use>
        <use xlink:href="#s-text"
          class="text-copy"></use>
        <use xlink:href="#s-text"
          class="text-copy"></use>
      </g>
    </svg>
</div>


<!-- /container -->



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[突然死亡]]></title>
    <link href="http://lenciel.cn/2014/12/sudden-death/"/>
    <updated>2014-12-09T04:26:28+08:00</updated>
    <id>http://lenciel.cn/2014/12/sudden-death</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/2014_12/snow_night.jpg" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>窗外的雪越来越大，很快就盖住了最后一点道路的痕迹。</p>

<p>这里的冬天就是这样，喜欢也罢不喜欢也罢，万事万物都躲它不开。我打开手机上的App，显示我在网上订的“乐扣乐扣盒子套装”还是处于“已到达红旗镇中转站”的状态。</p>

<p>有期望就会失望。</p>

<p>可是昨天已经用水发好了金钩，上午还和了面，没有盒子装当然是不行，但无论如何包饺子这件事情也已经停不下来。于是我拿起电话打给镇口的杂货店。</p>

<p>铃响到第三声，那个长头发女孩软软的声音从电话那头传过来。</p>

<p>之所以说那个长头发女孩，是因为每周总去那里买泡面，结账的时候常常忍不住打量一下她那头顺直的长发。一开始我也相当犹豫，不知道究竟该不该对她产生好感：就像后面我会说到的那样，自己有自己喜欢的女孩。可是她长得好看极了，每次我去买东西态度也很热情。有一次她帮我装好方便面递给我的时候，突然一边轻轻点着头一边说：</p>

<p>“嗯，我觉得，你应该少吃点儿这种东西。”</p>

<p>好像没有什么理由不产生好感。</p>

<p>“你好，请问什么事情？”</p>

<p>“你好，你们那儿有饭盒吗？”</p>

<p>“我们这儿塑料的和不锈钢的都有，你来就是了。”</p>

<p>“但是有点儿麻烦的是，现在我不能离开家，但饭盒又确实马上就需要。”</p>

<p>“你的意思难道是我要给你把饭盒送到家里？你以为自己是谁啊？”</p>

<p>“不是谁。就是那个应该少吃点儿泡面的人。”</p>

<p>“哦，是你啊。你觉得提出这种要求，我应该怎么想？”</p>

<p>“那个人可能是利用别人好心的坏人，也可能是确实需要帮忙的好人，究竟要怎么定性你可能也还在犹豫。”</p>

<p>“可能是觉得你是个有毛病的人也说不定。”</p>

<p>接下来是长久的沉默。我知道她还拿着电话，只不过没有说话，因为静音检测后线路产生的舒适噪声一直都在。</p>

<p>这可是我的专业。</p>

<p>“我在镇上的移动公司做维护已经有两三年了，你来的时候可以把工牌给你看，真不是坏人。不过要解释清楚原因略麻烦，如果你能答应帮忙，我非常感谢。”</p>

<p>“好了好了，你的工牌在店里我就注意到了。你要装什么东西？”</p>

<p>“饺子。”</p>

<p>“那还是不锈钢饭盒要好一些。你家在哪里，告诉我怎么去。”</p>

<p>于是我们交换了彼此的电话，互相在微信上加对方为好友。接着我分享了自己的地址给她，就继续包着饺子等她过来。</p>

<p>时间很快到了晚上7点，天已经黑得一塌糊涂。我把一些饺子煮下锅，自己一个人吃起来。</p>

<p>“或许她不会来了”，我看着凄冷的窗外忍不住想，“这样大的雪，没来才是正确的决定，来了简直可以算不大不小奇迹一桩了。”</p>

<p>门铃却突然响起来。</p>

<p>我打开门，楼道的路灯早就坏了。门外裹得严严实实的她和自己的影子含糊的混在一起，显得捉摸不透。只有手里的不锈钢饭盒还在努力反射着我打开门后屋子里透出的昏黄的光。</p>

<p>她窜进屋子，脱掉外套，露出粉红色的毛衣。她的脸不知道是因为冻着了还是害羞，也红扑扑的。</p>

<p>“不好意思下班了才能来，店主不答应突然跑出去给别人送东西。”</p>

<p>“嗯，恐怕不但要等到下班，还有去特别打扮一下吧？”</p>

<p>我这么说是因为闻到她身上一股淡淡的清甜的味道，平时在杂货店可从来没有闻到过。那味道就好像在隆冬白雪皑皑的山坡上突然扒开了一个直通夏季瓜田的山洞，我一边品味着那让人耳根发热的香气一边劝告自己要等的不过是装饺子的饭盒而已。</p>

<p>“真的煮了饺子，我可以尝一点么？”，她对我的问题不置可否，“你这种每天吃泡面的人可不像会包什么像样饺子的。”</p>

<p>也许那味道一直都有，不过是我们从来没有如此靠近过。</p>

<p>“正好相反。从小就很喜欢面食，自己也做得不错。”，我把自己装饺子的碗递到她手里，说道：“和面的时候先把面粉倒在盆里，中间扒出一个凹槽，把水徐徐倒进凹槽里，用筷子慢慢搅动。等水和面粉充分搅拌均匀，水也被面粉吸干时，用手反复搓拌面，让面粉成许许多多小面片，像雪花一样。这样，既不会因面粉来不及吸收水分，而使水流淌得到处都是，也不会粘得满手满盆都是面糊不利操作。然后，再朝雪花状的面上洒水，用手搅拌，使之成为一团团的疙瘩状的小面团，就好比不怎么像样的葡萄。”</p>

<p>“听起来很厉害。”</p>

<p>“这时候面粉尚未吸足水分，硬度较大，可以揉合在一起成块。然后把面盆上粘的面糊用力擦掉，再用手蘸些水洗去手上的面粉洒在葡萄上，就可以把葡萄们揉成光滑的面团。这从雪花到葡萄再到光滑面团的步骤，我完全可以做到所谓的三光：面团光、面盆光、手上光。”</p>

<p>“这么认真和面，馅也一定不会含糊。”</p>

<p>“韭菜不能用大韭菜，要小韭菜均匀细细切成碎末，味道鲜香。虾仁只用大连那家的贡品级金钩，提前一天用水发好，再切成丝，光是这活也要一个小时。鸡蛋的使用也有窍门，不是随随便便就能做到恰到好处。然后擀面皮加包好，前前后后忙活大概4个多小时，能做300个左右。”</p>

<p>说话间她已经吃下去四个，我从来没想过看起来斯斯文文的她吃起东西可以这样风卷残云。这多少让我有些羡慕她：这世间总有人既不需要明白什么是舒适噪声，也不需要掌握和面要怎么三光，就可以安心享受到本来不属于自己的美食，多么简单的人生。</p>

<p>“但是，做这么麻烦难道就是为了自己吃掉？毕竟随便对付过去的时候居多。难道是拿到外面去卖？”</p>

<p>“说出来不怕你笑话，其实是要送给自己喜欢的女生。”</p>

<p>“现在还能送出这种东西？”</p>

<p>“其实也就是找个理由。你知道有时候喜欢上了别人总会这样，找个理由见面而已。”</p>

<p>“对方一定觉得很浪漫。”</p>

<p>“那倒未必，比如上次做好了根本没有见到，所以一气之下连饭盒一起扔到了镇口的那条沟里。不然今天也不用你专门跑一趟了。”</p>

<p>“感觉是很奇怪的两个人啊，没办法好好相处？”</p>

<p>“正好相反，好起来的时候非常好，当然，也有很糟的时候。”</p>

<p>“因为很难见到？”</p>

<p>“有段时间每天见面，但感觉更糟。特别是把她送到家门口分手之后，失落感又比见面前更加深重。”</p>

<p>“我是个杂货铺里的姑娘，所以，你要是想说什么相见时难别亦难，我可能兴趣不大。”</p>

<p>“没那么诗情画意，反正自己的感觉就跟你们店里那种微波炉里面加热一下就能吃的清蒸鲈鱼一样。”</p>

<p>“那是什么意思？”</p>

<p>“从相见到分开，就好像刚刚被人在锡箔纸划开一条缝，看到一些微弱的光亮，又马上被扔到黑洞洞的微波炉里面一样。”</p>

<p>“这比喻很不错，非常容易体会。”</p>

<p>“我对这片漫无头绪的失落感实在束手无策。就好像心中出现了空洞，慌慌张张的找一个地方挖土去填，但虽然把原来的空洞填了些起来，却挖出另一口深井。”</p>

<p>“因为还是在心中挖土，所以任凭怎样也无法填补那空白。”</p>

<p>“大概就是这个意思。”</p>

<p>“听了你的故事，也吃了你这么些饺子，我该回去了。”她突然把碗递回我手里，开始穿外套。刚才来不及看清楚，这会儿才发现外套的长短恰到好处，完美的衬出了她修长的曲线。接着她把围巾裹在自己白净的脖子上，然后用指尖把长发撩起，放到外套和围巾外面。</p>

<p>我顿时觉得屋里光亮了许多。</p>

<p>“这结束的场面我倒是已经非常熟悉：突然死亡。”</p>

<p>“突然死亡？”</p>

<p>“就是最早出现在橄榄球或冰球比赛中，后来被国际足联短暂执行的金球制。具体来说，如果两只球队在正常90分钟比赛时间内打平，将需要进行上下半场各15分钟的加时赛。如果一支球队在加时赛中率先进球，那么比赛就立即结束，该球队获得胜利，这一进球就称为金球，对于另一只球队来说就如同突然死亡。”</p>

<p>“听起来很刺激，对获胜方来说是极大的幸运。”</p>

<p>“但对于输的一方未免过于残酷。就好比第一粒金球，是96年欧洲杯德国人比埃尔霍夫让捷克队突然死亡。如果你也看球，就没法不对波博斯基，内德维德，内梅切克，斯米切尔这样的球员遇到这样的事情唏嘘不已。”</p>

<p>“不服气大可以再来。”</p>

<p>“在强手如林的国家队打上主力，有合适的队友和教练能够搭配出稳定的阵容走到决赛，对于很多球员来说已经是一辈子都无法做到的事情。”</p>

<p>“但有什么好吃的要叫上我，可不需要等4年。”她冲我挥挥手，走出了我的房间，又自己把门带上。</p>

<p>我起身站在窗口。因为积雪，路上车子驶过的声音特别空洞漫长，像是谁为了一段段埋葬在雪夜的无疾而终的故事拉起了埃尔加的《e小调大提琴协奏曲》。</p>

<p>有些事情不可言喻，有些事情不言而喻。</p>

<p>而肮脏的街灯下，她步履蹒跚的缓慢行走走。但终究渐行渐远，化作一道淡影。</p>

<p>此时此刻，在别的城镇里，应该也有年轻的恋人们在欺骗过黄昏和夜色后，欺骗起自己吧，我关上窗的时候忍不住想。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TLDR是什么?]]></title>
    <link href="http://lenciel.cn/2014/11/the-stories-of-the-bible-in-tldr-form/"/>
    <updated>2014-11-24T10:47:31+08:00</updated>
    <id>http://lenciel.cn/2014/11/the-stories-of-the-bible-in-tldr-form</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/2014_11/bible_story.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>很多人问什么是<code>TL;DR</code>，其实是<code>Too long, didn't read</code>的缩写，一般用来暗示下面是一段摘要，如果你对这长得要死的文章的细节没兴趣，读读它就可以了。</p>

<p>比如我很喜欢的tumblr站<a href="http://tldrwikipedia.tumblr.com/">TL;DR WIKIPEDIA</a>，其实就是魔鬼辞典好不好。再比如昨天在Reddit上的红贴<a href="http://www.reddit.com/r/Christianity/comments/2mpv2r/the_stories_of_the_bible_in_tldr_form/">圣经故事TLDR版本</a>，读起来也很好玩：</p>

<p><strong>创世纪</strong></p>

<ul>
<li>上帝：好了，你们俩，不许干那事儿。除开那件事，你们要怎么疯都可以。</li>
<li>亚当和夏娃：好的。</li>
<li>撒旦：你们就该干那事儿。</li>
<li>亚当和夏娃：好的。</li>
<li>上帝：咋了？</li>
<li>亚当和夏娃：我们干了那事儿。</li>
<li>上帝：我嬲&hellip;&hellip;</li>
</ul>


<p><strong>旧约</strong></p>

<ul>
<li>上帝：你们是我的子民，你们不该干这些事儿。</li>
<li>人们：我们不会再干了。</li>
<li>上帝：好样的。</li>
<li>人们：我们又干了。</li>
<li>上帝：我嬲&hellip;&hellip;</li>
</ul>


<p><strong>福音</strong></p>

<ul>
<li>耶稣：我是上帝之子，虽然你们又干了那些事儿，上帝和我依然爱你们也希望你们活下去。但不能再干那些事儿了。</li>
<li>被治愈的人们：好的！谢谢！</li>
<li>其他人：我们是从木有见过这厮干那些事儿，但是没人看到的时候，说不定他也在干那些事儿。</li>
<li>耶稣：我从木有干过那些事儿。</li>
<li>其他人：我们得审判你。</li>
<li>彼拉多：你有木有干那事儿。</li>
<li>耶稣：木有。</li>
<li>彼拉多：他木有干过。</li>
<li>其他人：还是杀了算了吧。</li>
<li>彼拉多：好的。</li>
<li>耶稣：我嬲&hellip;&hellip;</li>
</ul>


<p><strong>保罗的信件</strong></p>

<ul>
<li>人们：我们干了那些事儿。</li>
<li>保罗：耶稣还是爱你们，而且因为你们也爱他，你们必须停止干这些事儿了。</li>
<li>人们：好的。</li>
</ul>


<p><strong>保罗的信件II</strong></p>

<ul>
<li>人们：我们又干了那些事儿。</li>
<li>保罗：我嬲&hellip;&hellip;</li>
</ul>


<p><strong>启示录</strong></p>

<ul>
<li>约翰：当耶稣复生的时候，就不会再有人干那些事儿了。现在，人们就该开始停止干那些事儿了。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web应用开发的七项原则]]></title>
    <link href="http://lenciel.cn/2014/11/7-principles-of-rich-web-applications/"/>
    <updated>2014-11-17T22:30:42+08:00</updated>
    <id>http://lenciel.cn/2014/11/7-principles-of-rich-web-applications</id>
    <content type="html"><![CDATA[<p>本文源自Guillermo Rauch的<a href="http://rauchg.com/2014/7-principles-of-rich-web-applications/">7 Principles of Rich Web Application</a>，经过他本人授权，我翻译了放在这里。</p>

<p>这篇文章主要介绍构建使用Javascript来控制UI的网站在设计时的7个原则。它们是我作为一名开发人员的经验所得，也是我作为一名互联网资深用户的体会和总结。</p>

<p>Javascript毫无疑问早已成为了前端开发人员不可或缺的工具。但现在它的使用范围还在不断扩展到其他的领域，比如<a href="http://nodejs.org/">服务器端</a>甚至是<a href="https://tessel.io/">微控制器</a>。在斯坦福这样的声望卓越的大学里面，它也已经被选为计算机科学<a href="http://web.stanford.edu/class/cs101/">入门课程</a>的教学语言。 </p>

<p>即便如此，它在web开发中究竟应该扮演什么样的角色或者说负责哪方面的作用，仍然是个迷：即便对于很多框架和类库的作者而言也是如此：</p>

<ul>
<li>JavaScript应该被用来替代像<code>history</code>，<code>navigation</code>和<code>page rendering</code> 这样的浏览器函数么？</li>
<li>服务器端开发是不是到头了？是不是根本就不该在服务器端渲染HTML了？</li>
<li>Single Page Applications (SPAs) 是不是代表着未来的趋势?</li>
<li>一个网站和一个Web应用之间的区别精确的描述起来究竟是什么? 是不是应该就是一个东西?</li>
<li>在网站上，JS应该用来 <em>增强</em> 页面的效果，而在Web应用中，则被用来 <em>渲染</em> 整个页面?</li>
<li>是否应该使用像PJAX或者TurboLinks这样的技术?</li>
</ul>


<p>下面就是我试着回答这些问题做的一些分析。我的分析是通过用户体验(UX)层面，特别是如何最小化用户拿到他们感兴趣的 <em>数据</em> 的时间，作为切入点，来验证对Javascript的 <em>各种</em> 使用方式。我会从网络通信的基础入手，一直说到对未来趋势的预测。</p>

<ol>
<li> <a href="#server-rendered-pages-are-not-optional">Server渲染页面仍然是必须的</a></li>
<li> <a href="#act-immediately-on-user-input">对用户输入立刻响应</a></li>
<li> <a href="#react-to-data-changes">数据变更时的应对</a></li>
<li> <a href="#control-the-data-exchange-with-the-server">控制与服务器的数据交互</a></li>
<li> <a href="#dont-break-history-enhance-it">不要破坏history，增强它</a></li>
<li> <a href="#push-code-updates">推送代码更新</a></li>
<li> <a href="#predict-behavior">行为预测</a></li>
</ol>


<a name="L1..Server...............................a.name..server-rendered-pages-are-not-optional....a."></a>
<h2>1. Server渲染页面仍然是必须的<a name="server-rendered-pages-are-not-optional"></a></h2>

<p><strong>TL;DR</strong>: <em>服务器端渲染与SEO无关，它主要的考虑是性能：需要考虑的包括不在服务器渲染的话，请求脚本、页面样式、页面资源和API请求造成的额外的开销，以及考虑在HTTP2.0里加入的<code>PUSH of resources</code></em>.</p>

<p>首先需要指出，在业界有一种错误的二分法：&#8221;server-rendered apps&#8221; 和 &ldquo;single-page apps&#8221;的对立。如果我们的目标是用户体验和性能的最优化，那么选择其中任何一个而抛弃另一个都是错误的决定。原因其实很明显：整个互联网用于传输页面的介质，有一个理论上可计算的速度局限。关于这点，Stuart Cheshire有个著名的文献 (或者说是吐槽？)，<a href="http://rescomp.stanford.edu/~cheshire/rants/Latency.html">“It’s the latency, stupid”</a> :</p>

<blockquote><p>The distance from Stanford to Boston is 4320km.<br/>The speed of light in vacuum is 300 x 10^6 m/s.<br/>The speed of light in fibre is roughly 66% of the speed of light in vacuum.<br/>The speed of light in fibre is 300 x 10^6 m/s * 0.66 = 200 x 10^6 m/s.<br/>The one-way delay to Boston is 4320 km / 200 x 10^6 m/s = 21.6ms.<br/>The round-trip time to Boston and back is 43.2ms.<br/>The current ping time from Stanford to Boston over today’s Internet is about 85ms (…)<br/>So: the hardware of the Internet can currently achieve within a factor of two of the speed of light.</p></blockquote>


<p>这里提到的从波士顿到斯坦福路上花费的85ms，当然会随着时间的推移不断的改善：如果你现在测试一下说不定已经大大增速了。但需要注意很重要的一点：就算达到了光速，这两个海岸间最少也需要 <strong>50ms</strong> 才能完成通信。</p>

<p>换句话说，用户间连接的带宽再怎么显著提高，花在传输路上的延迟总有无法突破的速度极限。所以，在页面上显示信息时减少请求次数，也就是减少信息被传输在路上的次数，对于良好的用户体验和出色的响应速度而言，至关重要。</p>

<p>这一点在Javascript驱动的Web应用流行起来之后显得尤为明显。这些应用一般<code>&lt;body&gt;</code>标签内什么东西都没有，只有<code>&lt;script&gt;</code>和<code>&lt;link&gt;</code>标签，被称为&#8221;Single Page Applications&#8221;或者&#8221;SPA&#8221;。就像它的名字所暗示的一样，服务器返回时一直在重用同一个页面，其他的页面内容都是在客户端被处理和渲染的。</p>

<p>考虑下面的这个场景：用户在浏览器上访问<code>http://app.com/orders/</code>，如果这是一个传统的网页，那么在后台处理这个请求的时，就会带回重要的 <em>信息</em> ，用来完成页面的显示：比如，从数据库里面查询出订单，然后把它们的数据放在请求的返回里面。但如果这是一个SPA，那么第一次可能会立刻返回一个包含<code>&lt;script&gt;</code>标签的空页面，然后再跑一趟才能拿回用来渲染页面的内容和数据。</p>

<p><img src="http://lenciel.cn/downloads/images/2014_11/spa_code_breakdown.png" title="SPA code breakdown" alt="SPA code breakdown" />
图1. 服务器端发送的SPA的每个页面组成结构分析</p>

<p>目前大多数的开发者都大方接受了这个额外的 <em>网络传输过程</em> 是因为他们确信这只发生一次：后面反正是有cache的。也就是说，大家形成了这么一个共识，既然整个代码包一旦加载一次，就可以不用再请求其他的脚本和资源就完成对绝大多数的用户交互（包括跳转到应用的其他页面）的处理，那么这个开销就是可以接受的。</p>

<p>但实际上，虽然有cache，脚本解析和执行的时间仍然会带来性能上的下降。<a href="http://modernweb.com/2014/03/10/is-jquery-too-big-for-mobile/">“Is jQuery Too Big For Mobile?”</a> 这篇文章就探讨了即便是加载一个jQuery库，就会花去一些浏览器数百毫秒的时间。</p>

<p>更糟糕的是，和以前网速慢那种图片慢慢加载的效果不同，如果是脚本正在加载，用户什么都看不到：在整个页面被渲染出来之前，只能显示空白的页面。</p>

<p>最重要的是，目前互联网数据传输主要的协议TCP <em>建立</em> 比较慢。</p>

<p>首先，我们知道，一个TCP连接先需要握手。如果处于安全考虑使用了SSL，就还需要额外的两个来回（客户端重用了session的话，也需要一个额外的来回）。这些流程完毕之后，服务器才能开始往客户端发送数据。换句话说，再小的代码包实际上也需要几个来回才能完成传输，这就让前面描述的问题变得更加糟糕。</p>

<p>其次，TCP协议里面有一个流控机制，被称为 <code>slow start</code>，也就是在连接建立过程中逐渐增加传输的分段(<code>segments</code>)大小，入下图所示：</p>

<p><img src="http://lenciel.cn/downloads/images/2014_11/tcp_segments_chart.png" title="TCP segments chart" alt="TCP segments chart" />
图2. 服务器端在TCP连接的不同阶段能够发送的分段大小(KB)</p>

<p>这对SPA有两个很大的影响：</p>

<ol>
<li><p> 文件比较大的脚本，花在下载上的时间比你想象中的要长得多。Google的Ilya Grigorik在他的专著<a href="http://chimera.labs.oreilly.com/books/1230000000545/ch02.html#thats_four_rou">“High Performance Browser Networking”</a> 里面说过，“4个来回(…)和数百毫秒的延迟都花在从服务器下载64KB的文件到客户端上了”，从前面的图也可以看到，基本是比较高速的网络连接，比如伦敦和纽约之间，一个TCP连接要达到最大速度，也需要花上大概225ms。</p></li>
<li><p> 因为前面说的延迟对首个页面访问也是有效的，所以你让什么数据最先被传输就显得非常重要了。Paul Irish在他的演讲<a href="https://docs.google.com/presentation/d/1MtDBNTH1g7CZzhwlJ1raEJagA8qM3uoV7ta6i66bO2M/present#slide=id.g3eb97ca8f_10">“Delivering the Goods”</a>给出的结论是，一个Web应用最开始的 <strong>14kb</strong> 数据是最重要的。</p></li>
</ol>


<p>在足够短的时间窗内完成内容传输（哪怕只是呈现基本的没有数据的layout）的网站，就是响应良好的。这也是为什么对于很多习惯了在服务器端处理数据的软件开发者觉得Javascript很多时候根本没必要用，或者是在很有限的情况下用用就行了。当这些开发者使用的是配置良好的服务器和数据库，又有CDN来做部署和分发时，他们这种感觉会非常明显。</p>

<p>但是，服务器在辅助和加速页面内容的分发和渲染中应该被怎么使用，也是需要根据每个应用场景仔细分析的，绝对不是“把整个页面交给服务器渲染吧”那么简单的事情。在一些情况下，如果页面上的内容对用户并不是非看不可的，就可以不放在第一个响应中返回，而是让客户端在后面的操作中到服务器去取。</p>

<p>比如，有的应用会先把一个&#8221;壳&#8221;页面返回给客户端，然后在这个页面上并发的请求多个部分的数据。这样即使在后台连接速度较慢的情况下，仍然能够有较好的响应速度。还有的应用会把 “<a href="http://www.feedthebot.com/pagespeed/prioritize-visible-content.html">浏览器里面的第一个整屏</a>” 显示的页面做预渲染。</p>

<p>服务器能够根据当前处理的<code>session</code>，用户和URL对脚本和样式文件进行分类也是很重要的。举例来说，用来对订单进行分类的脚本，对于<code>/orders</code>这个URL显然是重要的，而处理&#8221;首选项&#8221;的逻辑的脚本就不那么重要。再比如说，我们可以对CSS样式表进行分类，比如区分“结构性的样式”和“皮肤和模板的样式”等。前面这类很可能对Javascript的正确运行是必须的，因此需要 <em>阻塞</em> 的方式加载， 后面这类则可以用异步的方式加载。</p>

<p>到目前为止，在服务器端处理一部分或者所有的页面，仍然是避免过多客户端与服务器的交互的主要手段。<a href="http://danlec.com/blog/stackoverflow-in-4096-bytes">StackOverflow in 4096 bytes</a>很不错地展示了如何降低和服务器的来回交互次数。作为概念验证的SPA，它理论上可以做到在握手后的第一个TCP连接中完成加载！当然，要做到这些，它使用了<a href="http://www.chromium.org/spdy/link-headers-and-server-hint">SPDY 或者 HTTP/2 server push</a>，因此可以在一个hop里面传输所有客户端可以缓存的代码。</p>

<p><img src="http://lenciel.cn/downloads/images/2014_11/st4k.png" title="StackOverflow clone in 4096 bytes" alt="StackOverflow clone in 4096 bytes" /></p>

<p>图3. 使用了内链CSS和JS技术的<code>Stackoverflow in 4096 bytes</code></p>

<p>如果我们有一个足够灵活的系统，可以在浏览器和服务器直接共享渲染页面的代码（比如双方都是js），并且提供工具增量的加载脚本和样式，那么 <em>网站</em> 和 <em>Web应用</em> 就可以合一而不再是两个模棱两可难以区分的词了：它们本身就有一样的UX要素。比如一个博客页面和一个复杂的CRM，都有URL，都需要跳转，都展示数据，本质上并没有太大不同。即便是像数据表格这样复杂的东西，传统上主要是客户端提供的功能来完成对数据的处理，但也首先需要给用户展示那些需要他处理的数据 。降低客户端和服务器交互的次数，对实现我们说的这样的系统非常重要。</p>

<p>在我看来，我们看到的大量系统上采用了这样那样性能上的权宜之策，是因为整个技术栈的复杂度在不断累加。Javascript和CSS这样的技术是被逐渐加入到系统的，它们的风靡又花了一段时间。尽管有人希望在协议上做出改进，来增强性能（比如SPDY或者QUIC），但应用层显然才是最需要改进的地方。</p>

<p>要理解速度的重要性，去重温一下WWW和HTML创立之初的一些讨论是非常有用的。特别是在1997年提议在HTML里加入<code>img</code>这个标签的时候，Marc Andreessen在<a href="http://1997.webhistory.org/www.lists/www-talk.1993q1/0260.html">下面这个邮件thread</a>里反复强调了提供信息的速度有多么重要： </p>

<blockquote><p>“If a document has to be pieced together on the fly, it could get arbitrarily complex, and even if that were limited, we’d certainly start experiencing major hits on performance for documents structured in this way. This essentially throws the **single-hop principle of WWW** out the door (well, IMG does that too, but for a very specific reason and in a very limited sense) — are we sure we want to do that?”</p></blockquote>


<a name="L2..............................a.name..act-immediately-on-user-input....a."></a>
<h2>2. 对用户输入立刻响应<a name="act-immediately-on-user-input"></a></h2>

<p><strong>TL;DR</strong>: <em>我们可以使用JavaScript来掩盖网络的延迟，把它作为设计原则，就可以在你自己的应用里面去掉绝大多数的<code>spinner</code>或者<code>loading</code>。使用PJAX和TurboLink的话，你就会失去了这些改善用户速度体验的机会。</em>.</p>

<p>第一个原则里，在描述为什么要尽量减少前端和后端之间数据来回传输的次数时，主要是基于传输速度有理论上限的事实。实际上另一个需要考虑的要素就是网络的质量。我们都知道，当网络连接状况不好时，就会有数据包需要被重传。所以，你觉得应该一个来回就传输完毕的数据，可能实际上要花去好几个。</p>

<p>在这方面，Javascript正好可以帮上忙：通过客户端的代码来驱动UI，人工的构造出零延迟，就可以<em>掩盖网络的延迟</em>，制造一切操作都很顺畅的假象。比如，网页和网页之间是通过超链接，<code>&lt;a&gt;</code>标签，链接在一起的。传统网页上，当一个链接被点击时，浏览器就发送一个可能会耗时很久的请求，然后处理请求并把内容呈现给用户。</p>

<p>但Javascript允许你<strong>立刻响应</strong>（有些地方把这个叫<strong>乐观响应</strong>）：当一个链接或者按钮被点击时，页面立刻做出响应而不需要去访问网络。这方面著名的例子就是Gmail（包括最近Google的新产品Inbox）的&#8221;邮件归档&#8221;功能。当你点击&#8221;归档&#8221;，UI上邮件立刻会被显示为归档状态，而服务器的请求和处理是异步进行的。</p>

<p>再比如，我们处理的是一个表单。也许你觉得一个表单在数据被提交到服务器，处理结果返回之前，不能做太多的事情。但其实当用户完成输入并点击提交的时候，我们就可以开始响应了。甚至有些做到极致的应用，比如Google搜索页面，当用户开始输入的时候，展示搜索结果的页面就已经开始渲染了。</p>

<p><img src="http://lenciel.cn/downloads/images/2014_11/google_homepage.gif" title="Google Homepage" alt="Google Homepage" /></p>

<p>图4. Google在用户输入搜素关键字时就开始渲染搜索结果页面</p>

<p>这种行为被称为 <em>layout adaptation</em>。 它的思路是当前页面知道操作后状态的页面layout，所以在没有数据填充的情况下，它就可以过渡到下面那个状态的layout。这样的处理是&#8221;乐观&#8221;的，是因为有可能后面那个页面的数据一直没有返回，而这时候页面的layout已经画在那里了。</p>

<p>Google的主页的演进，非常清楚的说明了我们这里强调的第一和第二个原则。</p>

<p>首先，分析访问<code>www.google.com</code>时TCP连接的<a href="https://gist.github.com/guille/3e1b2d7529009370b986">包数据</a>可以看到整个首页的数据都被一次性发出来了。整个交互，包括关闭连接，耗时几十毫秒而已。而且，似乎在Google<a href="http://en.wikipedia.org/wiki/Google#mediaviewer/File:Google1998.png">一开始的版本</a>就做到了这点。</p>

<p>在2004年晚些时候, Google<a href="http://googleblog.blogspot.com/2004/12/ive-got-suggestion.html">标杆性地</a>使用了JavaScript完成<code>输入时动态提示</code>功能（和Gmail一样，也是一个20%创新时间产出的项目），这一功能也启发了很多网站开始大量的使用<a href="http://www.adaptivepath.com/ideas/ajax-new-approach-web-applications/">AJAX</a>:</p>

<blockquote><p>Take a look at Google Suggest. Watch the way the suggested terms update as you type, almost instantly with no waiting for pages to reload. Google Suggest and Google Maps are two examples of a new approach to web applications that we at Adaptive Path have been calling Ajax</p></blockquote>


<p>到了2010年，Google又<a href="http://googleblog.blogspot.com/2010/09/search-now-faster-than-speed-of-type.html">推出了</a><em>及时搜索</em>，也就是我们前面看到的效果：当用户输入关键字时，整个页面无需刷新就可以展示搜索的结果。</p>

<p>另一个例子是iOS。在很早期的版本，iPhone就要求开发者提供一个<code>default.png</code>图片，用来在应用被加载完成之前显示给用户:</p>

<p><img src="http://lenciel.cn/downloads/images/2014_11/iphone_default_png.png" title="iPhone default" alt="iPhone default" /></p>

<p>图5. iPhone OS强制在应用加载前显示一个default.png</p>

<p>当然，这里OS不是在隐藏网络延迟，而是CPU处理延迟。对于iPhone初期版本来说，这样来弥补硬件的弱点非常重要。当然就和网页上使用提前加载一样，这种手法有可能会崩坏：当加载来的数据和<code>default.png</code>不匹配的时候。Marco Arment在2010年对它可能带来的影响进行了 <a href="http://www.marco.org/2010/11/11/my-default-png-dilemma">透彻的分析</a>。</p>

<p>除开处理表单和输入，Javascript还被大量用于处理<strong>文件上传</strong>。我们可以通过各种前端表现来满足用户上传文件的需求：拖拽，粘贴以及各种file picker。特别是有了<a href="https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications">HTML5的新API</a>之后，我们可以在文件完成传输前就显示它的信息。在Cloudup网站的上传文件中，就使用了类似的实现。从图片中可以看到，在用户选择了文件之后，缩略图就立刻生成并显示在用户界面上了：</p>

<p><img src="http://lenciel.cn/downloads/images/2014_11/cldup_upload.gif" title="Cloudup upload" alt="Cloudup upload" /></p>

<p>图6. 在上传完成前图片就被显示出来并且加入了虚化效果</p>

<p>上面的方式都是采用前端技术来制造<em>速度的假象</em>，但这种方式其实在很多地方都被证明是有效的。<a href="http://www.nytimes.com/2012/08/19/opinion/sunday/why-waiting-in-line-is-torture.html">一个例子</a>是在美国休斯顿机场，通过<em>增加</em>到达乘客走到行李提取处的距离，而不是实际上的行李处理速度，就大大的<em>减少</em>了旅客抱怨行李领取太慢的问题。</p>

<p>运用了这种设计原则的应用，使用<code>spinners</code>或者<code>loading</code>提示符来提醒用户页面正在刷新的场景会非常少出现。整个页面的动线，都应该被<em>实际数据</em>来驱动。</p>

<p>当然，立即响应这个原则也不能被滥用。在特定的用户交互场景下，立即响应是有害的：比如用户在注销或者是支付的流程中，我们当然不能让他&#8221;乐观&#8221;的认为没有真正完成的操作已经完成了。但即使在这些场景下，使用<code>spinners</code>或者<code>loading</code>提示符也不应该<strong>被提倡</strong>。 只有在你觉得应该提醒用户这个操作会非常长，你可以去干别的事情时，才应该显示它们。那是多长？在UX设计中经常被引用的<a href="http://www.nngroup.com/articles/response-times-3-important-limits/">Nielsen的研究报告</a>上是这么说的：</p>

<blockquote><p>The basic advice regarding response times has been about the same for thirty years Miller 1968; Card et al. 1991:<br/>0.1 second is about the limit for having the user feel that the system is reacting instantaneously, meaning that no special feedback is necessary except to display the result.<br/>1.0 second is about the limit for the user’s flow of thought to stay uninterrupted, even though the user will notice the delay.Normally, no special feedback is necessary during delays of more than 0.1 but less than 1.0 second, but the user does lose the feeling of operating directly on the data.<br/>10 seconds is about the limit for keeping the user’s attention focused on the dialogue. For longer delays, users will want to perform other tasks while waiting for the computer to finish.</p></blockquote>


<p>像PJAX或者TurboLinks这样的技术，则很大程度上完全不具备提前渲染状态迁移后下一个页面的基础layout的能力。只有当服务器端的返回传输到客户端，客户端才能开始响应。</p>

<a name="L3...........................a.name..react-to-data-changes....a."></a>
<h2>3. 数据变更时的应对<a name="react-to-data-changes"></a></h2>

<p><strong>TL;DR</strong>: <em>当服务器的数据变化时，应该主动让用户知道。这样可以使得用户无需经常进行手动的刷新(F5, Cmd+R&hellip;.)，也是一种性能上的改进措施。新的挑战是：(重)连接的管理，状态的一致性问题</em>.</p>

<p>第三个原则就是当数据源(一般是一个或者多个数据库)的数据有变更时，UI要<em>主动响应</em>。</p>

<p>给用户一个当前数据的静态的HTML快照，直到用户刷新页面（传统网页）或者操作页面元素（AJAX）已经逐渐变得过时。你的UI应该是<strong>自刷新</strong>的。当数据节点不断增加，我们设计时需要开始考虑包含手表、电话的各种移动设备和可穿戴设备时，这点尤其重要。</p>

<p>以Facebook初期对newsfeed的实现为例，因为用户都是用PC机在更新状态，把它实现成静态的网页未尝不可：一般来说，人们一天更新一次就差不多了。但现在我们生活在一个人们拍照后可以立刻分享，朋友们可以立刻发表评论的时代，对数据变化的实时响应成为了应用开发的基础需求。这不仅仅是因为我们的应用程序是多用户并发访问的，即便就考虑单用户的场景，实时更新也是很重要的。以用笔记本分享我们手机上的照片的场景为例：</p>

<p><img src="http://lenciel.cn/downloads/images/2014_11/concurrent_data_points.gif" title="Concurrent Data Points" alt="Concurrent Data Points" /></p>

<p>图7. 即便是单个用户操作的场景，更好的响应性也能带来体验的提升</p>

<p>有的数据，比如<strong>Session和登录状态的同步</strong>，在多个页面间应该是非常实时的同步的。这样，当用户打开了多个tab，从其中的任何一个登出，其他的所有页面都应该登出。这点对保护用户的隐私是非常重要的，特别是我们有些设备是多个人在同时使用。</p>

<p><img src="http://lenciel.cn/downloads/images/2014_11/login_sync.gif" title="Login synchronization" alt="Each page reacts to the session and login state" /></p>

<p>图8. 不同的页面间同步登录状态</p>

<p>一旦你的用户习惯了你的应用的数据是自动更新的，那么你就要考虑一个新的需求：<strong>状态一致性</strong>。当客户端收到一个原子的数据更新时，必须考虑即便在断网很长时间之后，也能够正确的完成更新。比如，你的笔记本突然没电了，几天后再打开，应用的数据是不是还正确？</p>

<p><img src="http://lenciel.cn/downloads/images/2014_11/twitter_data_reconciliation.png" title="twitter数据一致性" alt="twitter数据一致性" /></p>

<p>图9. 长时间断线后重连的情况下twitter的页面</p>

<p>是不是能够保持数据的一致性也会影响你的应用在第一条原则上的表现。如果你想对首次请求的数据做优化，必须要考虑如果是断线后重连，那么第一个请求应该首先需要重新建立session。</p>

<a name="L4....................................a.name..control-the-data-exchange-with-the-server....a."></a>
<h2>4. 控制与服务器的数据交互<a name="control-the-data-exchange-with-the-server"></a></h2>

<p><strong>TL;DR</strong>: <em>接下来主要讨论的是如何精细的控制客户端和服务器之间的交互。注意出错处理，自动重试，在后台同步数据并管理好离线的缓存。</em></p>

<p>在互联网初期，客户端和服务器间的交互还仅仅有下面几种方式:</p>

<ol>
<li> 点击一个连接，会触发 <code>GET</code> 来获取一个新页面并重新渲染页面</li>
<li> 提交一个表单，会触发一个 <code>POST</code> 或 <code>GET</code> 并重新渲染页面</li>
<li> 嵌入一个图片或者对象，会触发一个异步的 <code>GET</code> 并重新渲染页面</li>
</ol>


<p>这个模型以其简洁性显得很具吸引力，但是我们今天要明白服务器和客户端之间的数据交互，学习曲线就陡多了。最大的问题在第二点，如果不能在不刷新页面的情况下提交数据，毫无疑问是一个性能上的弱点。更重要的是，它会使得回退键不可用：</p>

<p><img src="http://lenciel.cn/downloads/images/2014_11/annoy_artifact.png" title="Annoy Artifact" alt="Possibly the most annoying artifact of the old web" /></p>

<p>图10. 老一代网页上最让人讨厌的东西</p>

<p>把网站作为<strong>应用平台</strong> 来考虑，没有Javascript将是不可想象的事情。AJAX单单是在表单信息提交这方面，就让交互体验产生了一次<em>飞跃</em>。我们现在更是有了一堆各式各样的API (<code>XMLHttpRequest</code>, <code>WebSocket</code>, <code>EventSource</code>以及更多其他的) 来更好地更细致的控制数据流。不但可以在用户输入的时候就开始处理用户数据，还能够有机会提供更好的UX体验。其中一个和前面那个原则有关的UX体验上的改进就是显示当前<em>连接状态</em>。如果我们的用户觉得数据是应用自己去刷新不需要他手动操作，那么就应该显示<em>连接中断</em>以及<em>正在重试连接中&hellip;</em>等状态。</p>

<p>当发生连接中断时，最好先把数据存在内存（或者更好的，存到<code>localStorage</code>），以便在网络恢复后重新发送。 就像在<a href="http://jakearchibald.com/2014/using-serviceworker-today/">ServiceWorker</a>的介绍中提到的那样, 可以让Javascript应用在<em>后台运行</em>。</p>

<p>除开断网，当发送数据出现超时或者是错误时，也可以试着<strong>自动重试</strong>，只在确认无法成功了之后，才将问题抛给用户感知。当然，有些特别的错误还是需要额外小心的处理。比如一个<code>403</code>错误，通常说明用户的session过期了。这种情况下就该让用户重新登录，而不是继续重试了。</p>

<p>还要注意使用这种模式时，要屏蔽用户中断数据流的操作。这种操作有两种，第一种也是最明显的一种是用户尝试关闭当前页面，这种情况可以通过<code>beforeunload</code>这个<code>handler</code>来处理。</p>

<p><img src="http://lenciel.cn/downloads/images/2014_11/before_unload_warning.png" title="Before unload warning" alt="The beforeunload browser warning" /></p>

<p>图11. 页面关闭之前弹出警告</p>

<p>另一种（不那么明显的）是那些触发页面转换的操作。比如点击页面上的链接，触发一个新的页面载入。这种时候你可以显示自己的弹出窗口。</p>

<a name="L5..............history.............a.name..dont-break-history-enhance-it....a."></a>
<h2>5. 不要破坏history，增强它<a name="dont-break-history-enhance-it"></a></h2>

<p><strong>TL;DR</strong>: <em>不使用浏览器来管理URL跳转和history，将带来新的挑战。我们必须保证用户在浏览时，应用的表现符合他的期望。可以自建缓存来提高响应速度。</em></p>

<p>即使不考虑表单的提交，而是设计一个仅有超链接的Web应用，也需要考虑让前进/后退导航变得更可用。比如典型的<code>infinite pagination scenario</code>，也就是应用应该允许用户在页面上随便跳转，它的实现通常需要使用Javascript监听对链接的点击，然后注入数据或者HTML（还有个可选的步骤是调用<code>history.pushState</code>或者是<code>replaceState</code>，但不幸的是很多人都不没有使用它们）。</p>

<p>这就是我使用“破坏”来形容它的原因：在Web被设计之初，这种监听对链接的点击并注入数据的情况，并不在设计图景中，而是每个状态的变迁都需要URL的变化来驱动。但虽然这种既有模式被Javascript“破坏”了，另一方面，通过使用Javascript控制history，也出现了<em>提升</em>的机会。</p>

<p>一种提升的做法是Daniel Pipius提出的所谓<a href="https://medium.com/joys-of-javascript/beyond-pushstate-building-single-page-applications-4353246f4480">Fast Back</a>:</p>

<blockquote><p>回退应该很快；用户默认数据不会有很大的变化，应该能很快回到上个页面。</p></blockquote>

<p>我们可以近似的把回退按钮认为是一个在应用每个页面都可用的按钮，然后使用原则2来设计它：<em>对用户输入立刻响应</em>。这里要考虑的关键就变成了如何缓存前一个页面以便很快能再次渲染出来。接下来你就还可以想想原则3：如何在数据有了变化时，让用户感知到这些变化。</p>

<p>另外，有一些场景下，你没法控制缓存的行为。比如，如果用户在你渲染一个页面的时候跳到第三方网站上去了，然后他按回退键。这个时候就会遇到下面的这个bug：</p>

<p><img src="http://lenciel.cn/downloads/images/2014_11/back_button_bug.gif" title="Back Button Bug" alt="Pressing back incorrectly loads the initial HTML from the pageload" />
图12. 按回退键时载入了原始页面的HTML而不是刷新后的</p>

<p>另一种破坏性的操作是忽略 <em>scrolling memory</em>。和之前那个问题一样，如果页面没有JS或者其他人工的history管理，多半就不会有这个问题。但局部动态刷新的页面多半就会遇到：我测试了最著名的Javascript驱动的网站，它们的newsfeeds都有<em>scrolling amnesia</em>的问题：</p>

<p><img src="http://lenciel.cn/downloads/images/2014_11/back_button_bug.gif" title="Scrolling Amnesia" alt="Infinite pagination is usually susceptible to scrolling amnesia" /></p>

<p>图13. 滚动失忆问题</p>

<p>最后，要注意哪些状态应该被持久化。比如是不是需要展开显示文章的评论：</p>

<p><img src="http://lenciel.cn/downloads/images/2014_11/back_button_bug.gif" title="Scrolling Amnesia" alt="Infinite pagination is usually susceptible to scrolling amnesia" /></p>

<p>图14. 在操作history来导航时，是否展开显示评论也被持久化了</p>

<p>因为是在应用内使用超链接触发的页面重渲染，用户的期望是回到这页时，他之前展开的评论树仍然是展开的。这个状态其实是<em>瞬态的</em>， 仅仅在history栈上的这页有这个状态。</p>

<a name="L6.....................a.name..push-code-updates....a."></a>
<h2>6. 推送代码更新<a name="push-code-updates"></a></h2>

<p><strong>TL;DR</strong>: <em>数据自动更新但代码的更新不是自动推送的应用是低效的。要避免API出错，增强性能。使用无状态的DOM来避免重画。</em></p>

<p>让你的应用能够对<em>代码变更</em>进行推送是至关重要的。</p>

<p>首先，这样可以减少出错的可能并增强稳定性。当你的后台接口改变时，客户端的变更是<em>必须的</em>，否则客户端就没法处理服务器来的新格式的数据，或者上报一堆服务器没法理解的旧格式的数据。</p>

<p>考虑到原则3，代码更新的推送还有一个重要的原因：传统的网站，刷新页面一方面是为了加载新的数据，另一方面也常常是为了加载新的代码。一旦你的UI让用户觉得数据是自动刷新的，他们就不会有意识的再去刷新页面。这样仅仅有一套数据推送的机制是不够的，特别是考虑到现今很多应用一个页面要被打开很长的时间。</p>

<p>如果服务器本身有notification通道，那么可以在代码需要更新的时候推送通知给用户。如果没有，可以在客户端请求的HTTP头里面带一个版本号。服务器检查这个版本号，根据情况看要不要拒绝客户端的请求并要求它更新。</p>

<p>有了这些，应用就可以在加载数据或者代码时不再需要用户自主进行页面刷新了。比如，当一个页面<a href="https://developer.mozilla.org/en-US/docs/Web/Guide/User_experience/Using_the_Page_Visibility_API">不可见</a>，表单的输入没有被填写的时候。</p>

<p>但更好的做法是进行所谓的<strong>代码热重载</strong>。 这主要是指整个页面不需要进行重刷，而是特定的<em>模块</em>被替换并重新执行代码逻辑。</p>

<p>在很多已有的代码基础上要实现代码热重载是困难的。但从架构上把<em>行为</em>（代码）和<em>数据</em>（状态）隔离，也是非常值得考虑和探讨的。如果能这样解耦，就能很轻松的进行很多本来复杂的修改。</p>

<p>比如，你的应用需要建立一个事件总线（比如<a href="http://socket.io/">socket.io</a>）。当总线接收到事件时，某个特定的模块就改变自己的行为，比如，根据新的数据状态来产生不同的DOM内容。</p>

<p>理想状态下，我们能够以单个模块的粒度来更新代码。也就是说，仅仅因为要更新代码，没必要断开现有的socket连接。这样理想的代码能够热重载的架构就是<em>模块化</em>的。但是这里带来的挑战是模块的更新不能带来意料之外的副作用，为了实现这点，像<a href="http://facebook.github.io/react/">React</a>这样的优秀的框架被创造出来。当一个模块的代码更新后，它的代码逻辑能够静静地重新运行一次来更新DOM。 这方面的一些解释可以看看Dan Abramov的<a href="http://gaearon.github.io/react-hot-loader/">文章</a>.</p>

<p>从根本上来说，代码热重载可以极大程度上帮助你基于DOM渲染页面。特别是当状态保持在DOM里面，或者是事件响应都是你自己手工创建的时候，更新代码是一个非常复杂的事情。</p>

<a name="L7...............a.name..predict-behavior....a."></a>
<h2>7. 行为预测<a name="predict-behavior"></a></h2>

<p><strong>TL;DR</strong>: <em>通过行为预测来进一步减少延迟。</em></p>

<p>一个Javascript的应用可以有预测<em>用户输入</em>的机制。</p>

<p>最常见的办法是在数据请求的动作被真正触发之前就进行数据的预获取。比如在用户hover到链接上而不是真正点击链接的时候就开始取数据。</p>

<p>另一个比较复杂的预测用户行为的办法是通过监听用户鼠标的运动，分析它的轨迹来预测它可能会去到的”可以操作元素“，比如是按钮。下面是一个<a href="https://medium.com/@cihadturhan/a-ux-idea-i-know-where-you-are-aiming-3e00d152afb2">jQuery的例子</a>:</p>

<p><img src="http://lenciel.cn/downloads/images/2014_11/behavior_predict.gif" title="I know where you're aiming" alt="jQuery plugin that predicts the mouse trajectory" /></p>

<p>图12. jQuery鼠标运动轨迹预测插件</p>

<a name="L.......a.name..conclusion....a."></a>
<h2>结论<a name="conclusion"></a></h2>

<p>网络过去和现在都是信息传递最通用的媒介。当我们不断让我们的页面变得更动态时，也要注意在引入新的特性时，能保持历史上确定的一些好的用户体验准则。</p>

<p>互相用超链接集结在一起的页面是各种类型的应用的组成单位。当用户浏览页面时，渐进地加载代码、样式表和标记，可以在保证性能的基础上不牺牲太多的交互性。</p>

<p>Javascript带来了新的契机，一旦被全面采用，将可以在保证最佳的用户体验基础上，构建前所未有的最广阔最开放的应用平台。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Correct Django Site Name During DB Migration]]></title>
    <link href="http://lenciel.cn/2014/11/correct-django-site-name-in-sentry/"/>
    <updated>2014-11-02T16:50:40+08:00</updated>
    <id>http://lenciel.cn/2014/11/correct-django-site-name-in-sentry</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/2014_11/sentry_incorrect_site.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<a name="Problem"></a>
<h1>Problem</h1>

<p>就像截图上显示的那样，真正上线过的Django项目都会好像被施放过诅咒一般，让你在某一天看到那个诡异的<code>example.com</code>。</p>

<p>它可能是在系统发出去的重置密码的邮件里面，可能是在Sentry显示的日志里面，也可能就在你用 <code>site_name</code> tag渲染的模板里面。</p>

<p>这个诅咒来自于Django的<a href="https://docs.djangoproject.com/en/1.6/ref/contrib/sites/">sites framework</a>的设计。简单来说，它提供了一个Site对象的<code>manager</code>，来<strong>方便</strong>你用一套代码给多个部署环境使用。换句话说，虽然<code>settings.py</code>文件里面也有一个<code>SITE_NAME</code>，但其实用<code>Site.objects.get_current().name</code>或者是模板里面的<code>site_name</code>取到的不是那个值，而是数据库<code>django_site</code>里面某个<code>site_id</code>对应的Site对象的<code>name</code>。</p>

<p>而如果你<code>syncdb</code>之后没有手工修改过，<code>Site</code>的<code>domain</code>和<code>name</code>都被默认初始化为<code>example.com</code>，这就是问题所在了。</p>

<a name="Solution"></a>
<h1>Solution</h1>

<p>stackoverflow上<a href="http://stackoverflow.com/questions/3430451/using-django-settings-in-templates">得票最高的答案</a>这样把<code>site_name</code>放到<code>response</code>的<code>local()</code>里面或者是直接做个<code>context_processor</code>是可以的。但这样的坏处是完全抛弃了Django自带的<code>sites</code>，需要在用的地方都专门的处理。</p>

<p>如果要继续使用自带的<code>sites</code>，就得自己写类似下面的fixture：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[
</span><span class='line'>  {
</span><span class='line'>    "pk": 1,
</span><span class='line'>    "model": "sites.site",
</span><span class='line'>    "fields": {
</span><span class='line'>      "name": "LeiFun Production",
</span><span class='line'>      "domain": "leifun.net"
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  {
</span><span class='line'>    "pk": 2,
</span><span class='line'>    "model": "sites.site",
</span><span class='line'>    "fields": {
</span><span class='line'>      "name": "LeiFun Stage",
</span><span class='line'>      "domain": "stage.leifun.net"
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  {
</span><span class='line'>    "pk": 3,
</span><span class='line'>    "model": "sites.site",
</span><span class='line'>    "fields": {
</span><span class='line'>      "name": "LeiFun Test",
</span><span class='line'>      "domain": "test.leifun.net"
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>
</span><span class='line'>  {
</span><span class='line'>    "pk": 4,
</span><span class='line'>    "model": "sites.site",
</span><span class='line'>    "fields": {
</span><span class='line'>      "name": "LeiFun Local Dev",
</span><span class='line'>      "domain": "yawp.dev:8000"
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<p>然后在部署的环境里面用<code>django_admin.py</code>或者<code>manage.py</code>运行<code>loaddata</code>。这样的坏处是<code>fixture</code>这东西本来主要是给本地测试生成mock数据的，所以<code>syncdb</code>命令其实不会发起fixture的导入，于是很多时候你部署了新版本之后，会忘记重新导入<code>fixture</code>（其实本来也不该导入fixture)，牛皮癣一样的<code>example.com</code>又回来了。</p>

<a name="Solution.2"></a>
<h1>Solution 2</h1>

<p>通过修改某个现成app的<code>Migration</code>类的<code>forwards</code>方法，强制它读取一次<code>settings</code>文件里面的配置项：</p>

<pre><code class="python">class Migration(DataMigration):

    def forwards(self, orm):
        Site = orm['sites.Site']
        site = Site.objects.get(id=settings.SITE_ID)
        site.domain = settings.DOMAIN_NAME
        site.name = settings.SITE_NAME
        site.save()
</code></pre>

<p>这样一来，就可以在<code>syncdb</code>的时候刷新<code>django_site</code>这张表的配置。</p>

<a name="Solution.Finally"></a>
<h1>Solution Finally</h1>

<p>在Django 1.7里面，这个倒霉的设计<a href="https://docs.djangoproject.com/en/dev/ref/contrib/sites/?from=olddocs">终于被改掉了</a>。</p>

<blockquote><p>To enable the sites framework, follow these steps:</p><p>1. Add &#8216;django.contrib.sites&#8217; to your INSTALLED_APPS setting.<br/>2. Define a SITE_ID setting<br/>3. Run migrate.</p><p>django.contrib.sites registers a post_migrate signal handler which creates a default site named example.com with the domain example.com. This site will also be created after Django creates the test database. To set the correct name and domain for your project, you can use a data migration.</p></blockquote>


<p>不但如此，Django 1.7 还引入了<code>django.contrib.sites.middleware.CurrentSiteMiddleware</code>， 如果启用，就可以直接使用<code>request.site</code>而不需要在你的<code>view</code>里面自己去调用<code>site = Site.objects.get_current()</code>了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[聚散有期]]></title>
    <link href="http://lenciel.cn/2014/09/no-happy-ending/"/>
    <updated>2014-09-22T04:20:15+08:00</updated>
    <id>http://lenciel.cn/2014/09/no-happy-ending</id>
    <content type="html"><![CDATA[<p><img alt="block" src="http://lenciel.cn/downloads/images/2014_09/death_words.jpg" style="margin:5px;width:40%" align="left" />上周参加了偶像派她爷爷的90大寿，这周就迎来了她另一位爷爷离世的消息。</p>

<p>这位爷爷是我丈母娘保娘(干妈)的老伴，在一场事后被认为是回光返照的愉快聊天后，他独自在卧室睡去，再也没有醒来。</p>

<p>在睡梦中安静的走掉，再加上93岁的高寿，所以我们当然会互相安慰说，不用太伤心，这是寿终正寝。</p>

<p>但一讲起还没有走的婆婆，大家又会忍不住担心起来。</p>

<p>爷爷从不做农活，也不做家务，每天就喝茶打牌养养鸽子。几十年这么被惯着，不但离了婆婆连饭都不会做，甚至连面都不会下。我没有问过他选择这样生活的原因：也许是当年参加抗美援朝，在那片遥远的冰天雪地耗尽了所有的力气吧。</p>

<p>他们也一直没有孩子。</p>

<p>我们每年会去很多次他们在敖平乡下的家，给他们带些粮油和现金。</p>

<p>每次婆婆知道我们要去，就提前到地里掐好自己种的菜，捡好自己养的鸡下的蛋。等我们到了，就一直在厨房里忙活。有时候天气好，我们就把桌子搬到屋外的院子里面，每个人倒一点儿酒慢慢的喝着边吃边等她在厨房忙完上桌。</p>

<p>那时候她已经八十多岁了。</p>

<p>因为牙齿不好，胃口也开始变差。所以大多数时候，她只不过象征性的吃一点儿，就点上一根烟，带着满足的笑容坐在一旁听我们聊天。她很少说话，听到开心的地方，就拿起酒杯微微地抿一口。</p>

<p>在汶川地震之后，他们村里的人被集中安置居住时，他们又选择了留守。四周的邻居逐渐搬走，岳父岳母也去劝过他们和大家一起搬走好有个照应，但他们拒绝了。</p>

<p>更不要说搬来和我们一起住。</p>

<p>据说理由是在自己地里忙活了一辈子，何必要在别的地方去死。</p>

<p>是啊，人到了一定年纪，在哪里死去终于变成一件迫在眉睫的事情。</p>

<p>不知道从哪次去的时候开始，婆婆就已经忙活不动了。大家好像也没有商量过什么，就默默变成我们开车带他们去镇上的饭馆吃一顿，然后送他们回去。</p>

<p>这过程自然比以前要快了不少，每次告别，我都能看出婆婆眼中的不舍：她是个特别重感情的人。</p>

<p>爷爷走了，她反复告诉岳母：“把那些钱拿去好好把事情办了，剩下几千块钱留给我就行了。”</p>

<p>“反正我十一之后就走了”，她这么说。</p>

<p>大家都不停劝她想开一些，但我们都知道她的倔强。</p>

<p>就好像她本来身体比爷爷要差，但一直倔强地撑着，大概她知道自己走了就没人能像自己一样照顾他。</p>

<p>坦白说，他们的感情既让我敬佩，也常常让我疑惑。</p>

<p>有时候我看着婆婆，会想，她有没有偶尔也后悔过没有一个完整的家庭？和爷爷这样的男人厮守到老，是因为依恋，犹豫，认命，还是别的什么东西？</p>

<p>但仔细想想，可能也没有需要特别努力的地方。</p>

<p>反正人生里美好的不过是一些片断：在某个午后踢球赢了比自己更强的对手，夏天很热的时候吃到冰箱里拿出的熟得正好的西瓜，放肆地看着暗恋的对象她/他也正好看着你，跟相爱的人一起度过没人打扰的夜晚，甚至，没有充满恐惧而是在睡梦中平静死去也是美好的。</p>

<p>能抓住它们就好，别的东西我们自己大概很难掌握。</p>

<p>这也是人类到了一定年纪就拒绝去相信纯粹的东西可以持久的原因。毕竟我们这一生会丢失很多东西：首先是理想主义，然后是激情，接下来是容貌和身材，最后是有趣味的生活。想要保持点什么贯穿始终的东西如此不易，倒不如先否认这些需要认真照看的东西，可以让自己生活得容易一些，死的时候也不会太艰难。</p>

<p>记性太好也是需要移除的错误天赋。就好比记得越牢的号码，变成“您拨打的电话无人接听”的那天就越不堪，还不如记错或者干脆忘得一干二净。</p>

<p>也可以给大家都想个理由，就好像张爱玲写她等胡兰成：“雨声潺潺，像住在溪边。宁愿天天下雨，以为你是因为下雨不来。”</p>

<p>该忘记的忘记，剩下的也糊涂些为好。最好还能幽默一些，强势一些，牙尖嘴利地把自己包裹起来生人勿近。</p>

<p>就好像也在这个月刚刚过世的Joan Rivers说：&#8221;My sex life is so bad, my G-spot has been declared a historical landmark.&#8221;</p>

<p>反正，这世界聚散有期，又有几个人在意这些牙尖嘴利的人真正的心思呢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[T-shirt Testing]]></title>
    <link href="http://lenciel.cn/2014/09/logo-test/"/>
    <updated>2014-09-03T01:04:48+08:00</updated>
    <id>http://lenciel.cn/2014/09/logo-test</id>
    <content type="html"><![CDATA[<p>其实写点儿代码来画件T-Shirt并不难：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">colors</span> <span class="o">=</span> <span class="n">ximport</span><span class="p">(</span> <span class="s">&quot;colors&quot;</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">font</span><span class="p">(</span> <span class="s">&quot;Courier&quot;</span><span class="p">,</span> <span class="mi">100</span> <span class="p">)</span>
</span><span class='line'><span class="n">align</span><span class="p">(</span> <span class="n">CENTER</span> <span class="p">)</span>
</span><span class='line'><span class="n">text_path_line_1</span> <span class="o">=</span> <span class="n">textpath</span><span class="p">(</span> <span class="s">&quot;PALM&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="n">width</span> <span class="o">=</span> <span class="n">WIDTH</span><span class="p">)</span>
</span><span class='line'><span class="n">text_path_line_2</span> <span class="o">=</span> <span class="n">textpath</span><span class="p">(</span> <span class="s">&quot;4FUN&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">350</span><span class="p">,</span> <span class="n">width</span> <span class="o">=</span> <span class="n">WIDTH</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">resx</span> <span class="o">=</span> <span class="mi">300</span>
</span><span class='line'><span class="n">resy</span> <span class="o">=</span> <span class="mi">80</span>
</span><span class='line'><span class="n">rx</span> <span class="o">=</span> <span class="mf">1.0</span>
</span><span class='line'><span class="n">ry</span> <span class="o">=</span> <span class="mf">1.5</span>
</span><span class='line'><span class="n">dotsize</span> <span class="o">=</span> <span class="mf">4.5</span>
</span><span class='line'><span class="n">dx</span> <span class="o">=</span> <span class="n">WIDTH</span>  <span class="o">/</span> <span class="nb">float</span><span class="p">(</span> <span class="n">resx</span> <span class="p">)</span>
</span><span class='line'><span class="n">dy</span> <span class="o">=</span> <span class="n">HEIGHT</span> <span class="o">/</span> <span class="nb">float</span><span class="p">(</span> <span class="n">resy</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">draw_text</span><span class="p">()</span> <span class="p">:</span>
</span><span class='line'>  <span class="n">nofill</span><span class="p">()</span>
</span><span class='line'>  <span class="n">strokewidth</span><span class="p">(</span> <span class="n">random</span><span class="p">(</span> <span class="mf">0.2</span><span class="p">,</span> <span class="mf">2.8</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>  <span class="n">clr</span> <span class="o">=</span> <span class="n">choice</span><span class="p">(</span> <span class="p">[</span>
</span><span class='line'>      <span class="n">colors</span><span class="o">.</span><span class="n">hex</span><span class="p">(</span> <span class="s">&quot;#FFBCA4&quot;</span> <span class="p">),</span>
</span><span class='line'>      <span class="n">colors</span><span class="o">.</span><span class="n">hex</span><span class="p">(</span> <span class="s">&quot;#FFBCA4&quot;</span> <span class="p">),</span>
</span><span class='line'>      <span class="n">colors</span><span class="o">.</span><span class="n">hex</span><span class="p">(</span> <span class="s">&quot;#FF4500&quot;</span> <span class="p">),</span>
</span><span class='line'>      <span class="n">colors</span><span class="o">.</span><span class="n">hex</span><span class="p">(</span> <span class="s">&quot;#D93B00&quot;</span> <span class="p">),</span>
</span><span class='line'>      <span class="n">colors</span><span class="o">.</span><span class="n">hex</span><span class="p">(</span> <span class="s">&quot;#A72D00&quot;</span> <span class="p">)</span> <span class="p">]</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>  <span class="n">clr</span><span class="o">.</span><span class="n">a</span> <span class="o">=</span> <span class="n">random</span><span class="p">(</span> <span class="mf">0.6</span><span class="p">,</span> <span class="mi">1</span> <span class="p">)</span>
</span><span class='line'>  <span class="n">stroke</span><span class="p">(</span> <span class="n">clr</span> <span class="p">)</span>
</span><span class='line'>  <span class="n">oval</span><span class="p">(</span> <span class="n">pointx</span> <span class="o">+</span> <span class="n">random</span><span class="p">(</span> <span class="o">-</span><span class="n">rx</span><span class="p">,</span> <span class="n">rx</span> <span class="p">),</span> <span class="n">pointy</span> <span class="o">+</span> <span class="n">random</span><span class="p">(</span> <span class="o">-</span><span class="n">ry</span><span class="p">,</span> <span class="n">ry</span> <span class="p">),</span> <span class="n">size</span><span class="p">,</span> <span class="n">size</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">grid</span><span class="p">(</span> <span class="n">resx</span><span class="p">,</span> <span class="n">resy</span> <span class="p">)</span> <span class="p">:</span>
</span><span class='line'>  <span class="n">size</span> <span class="o">=</span> <span class="n">choice</span><span class="p">(</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">dotsize</span> <span class="p">]</span> <span class="p">)</span>
</span><span class='line'>  <span class="n">pointx</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">dx</span> <span class="o">-</span> <span class="n">size</span>
</span><span class='line'>  <span class="n">pointy</span> <span class="o">=</span> <span class="n">y</span> <span class="o">*</span> <span class="n">dy</span> <span class="o">-</span> <span class="n">size</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">text_path_line_1</span><span class="o">.</span><span class="n">contains</span><span class="p">(</span> <span class="n">pointx</span><span class="p">,</span> <span class="n">pointy</span> <span class="p">)</span> <span class="ow">or</span> <span class="n">text_path_line_2</span><span class="o">.</span><span class="n">contains</span><span class="p">(</span> <span class="n">pointx</span><span class="p">,</span> <span class="n">pointy</span> <span class="p">)</span> <span class="p">:</span>
</span><span class='line'>    <span class="n">draw_text</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>感受一下，哪个印出来比较好看呢&hellip;</p>

<p><img src="http://lenciel.cn/downloads/images/2014_09/logo1.png" title="Don't touch me..." alt="Vhost threshold" />
<img src="http://lenciel.cn/downloads/images/2014_09/logo2.png" title="Don't touch me..." alt="Vhost threshold" />
<img src="http://lenciel.cn/downloads/images/2014_09/logo3.png" title="Don't touch me..." alt="Vhost threshold" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update Android Sdk With Shadowsocks Proxy]]></title>
    <link href="http://lenciel.cn/2014/09/update-android-sdk-with-proxy/"/>
    <updated>2014-09-02T02:30:35+08:00</updated>
    <id>http://lenciel.cn/2014/09/update-android-sdk-with-proxy</id>
    <content type="html"><![CDATA[<p>博格坎普说，我们android项目的build挂了。</p>

<p>去Jenkins看了一下，日志里面的错误是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[android] $ /usr/local/share/gradle-1.11/bin/gradle clean build
</span><span class='line'>Creating properties on demand (a.k.a. dynamic properties) has been deprecated and is scheduled to be removed in Gradle 2.0. Please read http://gradle.org/docs/current/dsl/org.gradle.api.plugins.ExtraPropertiesExtension.html for information on the replacement for dynamic properties.
</span><span class='line'>Deprecated dynamic property: "buildName" on "ProductFlavorDsl_Decorated{name=main, minSdkVersion=null, targetSdkVersion=null, renderscriptTargetApi=-1, renderscriptSupportMode=null, renderscriptNdkMode=null, versionCode=-1, versionName=null, applicationId=null, testApplicationId=null, testInstrumentationRunner=null, testHandleProfiling=null, testFunctionalTest=null, signingConfig=null, resConfig=null}", value: "1.0.97".
</span><span class='line'>
</span><span class='line'>FAILURE: Build failed with an exception.
</span><span class='line'>
</span><span class='line'>* What went wrong:
</span><span class='line'>A problem occurred configuring project ':app'.
</span><span class='line'>&gt; Could not resolve all dependencies for configuration ':app:_debugCompile'.
</span><span class='line'>   &gt; Could not find com.android.support:appcompat-v7:20.0.0.
</span><span class='line'>     Required by:
</span><span class='line'>         android:app:unspecified
</span><span class='line'>
</span><span class='line'>* Try:
</span><span class='line'>Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.s</span></code></pre></td></tr></table></div></figure>


<p>这其实在天朝是蛮常见的现象，因为<code>dl-ssl.google.com</code>被封了，所以你总是会因为下面的错误无法更新Android的SDK：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Failed connect to dl-ssl.google.com:443<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Jenkins....................."></a>
<h2>Jenkins服务器配置代理</h2>

<p>这里之所以选择<a href="http://shadowsocks.org/">shadowsocks</a>，是因为可以用自己在<a href="https://developers.google.com/appengine/">Google的VM</a>上配置的shadowsocks代理服务器（顺便广告一下，Google的VM在做活动，几乎是最高配的机器都不要钱，而且第一跳就在美帝，用来做代理非常爽）。</p>

<p>安装shadowsocks的pythohn client:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pip install shadowsocks
</span><span class='line'>
</span><span class='line'>Downloading/unpacking shadowsocks
</span><span class='line'>  Running setup.py egg_info <span class="k">for</span> package shadowsocks
</span><span class='line'>
</span><span class='line'>    warning: manifest_maker: MANIFEST.in, line 1: <span class="s1">&#39;recursive-include&#39;</span> expects &lt;dir&gt; &lt;pattern1&gt; &lt;pattern2&gt; ...
</span><span class='line'>
</span><span class='line'>Installing collected packages: shadowsocks
</span><span class='line'>  Running setup.py install <span class="k">for</span> shadowsocks
</span><span class='line'>
</span><span class='line'>    warning: manifest_maker: MANIFEST.in, line 1: <span class="s1">&#39;recursive-include&#39;</span> expects &lt;dir&gt; &lt;pattern1&gt; &lt;pattern2&gt; ...
</span><span class='line'>
</span><span class='line'>    Installing sslocal script to /usr/local/bin
</span><span class='line'>    Installing ssserver script to /usr/local/bin
</span><span class='line'>Successfully installed shadowsocks
</span><span class='line'>Cleaning up...
</span></code></pre></td></tr></table></div></figure>


<p>可以看到安装完之后有两个可执行文件，运行其中的<code>sslocal</code>就可以启动shadowsocks的客户端了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@palm4fun-core-1:~/install# sslocal -h
</span><span class='line'>usage: sslocal <span class="o">[</span>-h<span class="o">]</span> -s SERVER_ADDR <span class="o">[</span>-p SERVER_PORT<span class="o">]</span>
</span><span class='line'>               <span class="o">[</span>-b LOCAL_ADDR<span class="o">]</span> <span class="o">[</span>-l LOCAL_PORT<span class="o">]</span> -k PASSWORD <span class="o">[</span>-m METHOD<span class="o">]</span>
</span><span class='line'>               <span class="o">[</span>-t TIMEOUT<span class="o">]</span> <span class="o">[</span>-c CONFIG<span class="o">]</span> <span class="o">[</span>--fast-open<span class="o">]</span> <span class="o">[</span>-v<span class="o">]</span> <span class="o">[</span>-q<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>optional arguments:
</span><span class='line'>  -h, --help            show this <span class="nb">help </span>message and <span class="nb">exit</span>
</span><span class='line'>  -s SERVER_ADDR        server address
</span><span class='line'>  -p SERVER_PORT        server port, default: 8388
</span><span class='line'>  -b LOCAL_ADDR         <span class="nb">local </span>binding address, default: 127.0.0.1
</span><span class='line'>  -l LOCAL_PORT         <span class="nb">local </span>port, default: 1080
</span><span class='line'>  -k PASSWORD           password
</span><span class='line'>  -m METHOD             encryption method, default: aes-256-cfb
</span><span class='line'>  -t TIMEOUT            timeout in seconds, default: 300
</span><span class='line'>  -c CONFIG             path to config file
</span><span class='line'>  --fast-open           use TCP_FASTOPEN, requires Linux 3.7+
</span><span class='line'>  -v, -vv               verbose mode
</span><span class='line'>  -q, -qq               quiet mode, only show warnings/errors
</span><span class='line'>
</span><span class='line'>Online <span class="nb">help</span>: &lt;https://github.com/clowwindy/shadowsocks&gt;
</span></code></pre></td></tr></table></div></figure>


<p>最简单的办法就是新建一个配置文件：</p>

<figure class='code'><figcaption><span>~/.shadowconfig</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;server&quot;</span><span class="o">:</span><span class="s2">&quot;my_server_ip&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;server_port&quot;</span><span class="o">:</span><span class="mi">8388</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;local_port&quot;</span><span class="o">:</span><span class="mi">1080</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;password&quot;</span><span class="o">:</span><span class="s2">&quot;barfoo!&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;timeout&quot;</span><span class="o">:</span><span class="mi">600</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;method&quot;</span><span class="o">:</span><span class="s2">&quot;table&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>记得在防火墙打开你配置的本地端口，然后运行下面的命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@palm4fun-core-1:~/install# sslocal -c ~/.shadowconfig
</span><span class='line'>INFO: loading config from /root/.shadowconfig
</span><span class='line'>shadowsocks 2.1.0
</span><span class='line'>2014-09-02 00:27:53 INFO     starting <span class="nb">local </span>at 127.0.0.1:1080
</span></code></pre></td></tr></table></div></figure>


<a name="L...............android.sdk"></a>
<h2>命令行更新android sdk</h2>

<p>先配置java命令使用的代理，然后
从命令行更新android sdk。只需要到tools目录下面去跑(<code>-u</code>是不显示GUI，<code>-s</code>是指定不使用ssl链接)：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">_JAVA_OPTIONS</span><span class="o">=</span><span class="s2">&quot;-DsocksProxyHost=127.0.0.1&quot;</span>
</span><span class='line'><span class="nv">$ </span>android update sdk -u -s --all
</span></code></pre></td></tr></table></div></figure>


<p>注意<code>socksProxyHost</code>的默认端口就是1080，如果你使用了其他端口不能只配ip。</p>

<p>另外，<code>--all</code>是比较猛烈的选项（人家的硬盘就是大，人家的代理就是快嘛），你可以在命令行里面通过filter来安装你需要的东西。</p>

<a name="When.shit.happens"></a>
<h2>When shit happens</h2>

<p>运行起来之后更新非常慢，可以<code>android</code>命令报timeout，而代理那边打出日志：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>2014-09-02 00:27:53 INFO     starting <span class="nb">local </span>at 127.0.0.1:1080
</span><span class='line'>2014-09-02 00:28:04 INFO     connecting 74.125.237.1:80
</span><span class='line'>2014-09-02 00:28:04 INFO     connecting 74.125.237.1:80
</span><span class='line'>2014-09-02 00:28:04 INFO     connecting 74.125.237.1:80
</span></code></pre></td></tr></table></div></figure>


<p>因为本座平时上网也是在用Google VM上的这个代理，没理由这么慢。所以就怀疑那个74.125.237.1的地址是被谁在<code>/etc/hosts</code>里面给配了固定ip。打开一看果然有：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dl-ssl.google.com 74.125.237.1
</span></code></pre></td></tr></table></div></figure>


<p>估计是之前配置的基友搜索到了类似<a href="http://www.programering.com/a/MjM4YTMwATA.html">这样的文章</a>。这也是为什么我从来不用也不推荐别人用修改hosts文件的方法来翻墙的原因：它们总是在过期。</p>

<p>Last but not the least, Fuck you, GFW.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[疤]]></title>
    <link href="http://lenciel.cn/2014/09/everybody-hurts/"/>
    <updated>2014-09-01T03:38:50+08:00</updated>
    <id>http://lenciel.cn/2014/09/everybody-hurts</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/2014_09/choose_who_to_let_in.jpg" title="Be careful to choose..." alt="careful to choose" /></p>

<p>一个朋友最近跟我说，想去把伤口结痂留下的疤痕用液氮处理一下。</p>

<p>这是我第一次听说除开激光这种“极热”之外，还可以在人的身上用这种“极冻”的方式祛疤。</p>

<p>不过，虽然是听起来非常激烈的方式，大概多少也得吃点儿苦头，但能顺利把身上的疤去掉，总是好的。</p>

<p>相比之下，心头的疤就没有那么容易弄掉了：8月28日，孙仲旭老师因为抑郁症自杀辞世的新闻曝出，着实让我心里面咯噔了一下。</p>

<p>这离Robin Williams抑郁而终不过两个多星期。</p>

<p>《1984》、《动物庄园》、《麦田里的守望者》和耶茨的很多小说，其实之前就看过。但后来因为看了孙仲旭老师翻译的《麦田里的守望者》，就把他其他的译作都翻来看了。</p>

<p>现在想来，从他翻译目标的选择来看，本身就是一个很不快乐的人吧。</p>

<p>当然，这很正常。</p>

<p>人虽然从出生开始，都无非是走在通向死亡的道路之上，但每个人经历的过程和心中的念想却大不相同。</p>

<p>有的人很幸运，出生在和谐的家庭，从小就完整地见证过快乐是什么，长大后也顺风顺水，对人生有自己明确的诉求。</p>

<p>而有的人，只见到过碎片一样的生活，自己从来不明白自己活着是需要什么，又能给别人提供什么。</p>

<p>不但如此，还会对那些把幸福或者是快乐挂在嘴边的人呲之以鼻：因为从心底质疑它们是否真的存在。</p>

<p>正是有《麦田里的守望者》这样的小说，正是有Robin Williams这样的演员，正是有孙仲旭老师这样的译者，才让后面这种人明白，自己不是什么奇奇怪怪的东西：原来还有很多人都这样活着，或者是这样活过。</p>

<p>而偏偏也是他们选择了自戕，仿佛在提醒大家：你看，就算知道有这么多人这样活着，我也不知道如何是好。</p>

<p>我想他们不是没有放胆让那些温暖的人走进自己内心，也感受过幸福和快乐。但要习得<a href="http://lenciel.cn/2014/04/rip-marquez/">孤独与爱</a>的要义实在是太难。更何况，抑郁并不仅仅是心理上的问题而已。</p>

<p>最后，摘一段献给孙仲旭老师，Wish you rest in peace：</p>

<blockquote><p>“我知道他死了！你以为我不知道？但是我仍然可以喜欢他，行吗？就因为这人死了，你不可能马上不再喜欢他了，岂有此理 —— 特别当这个人比你认识的活人要好上一千倍时。”</p><footer><strong>《麦田里的守望者》</strong></footer></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Complex Your Python Project Is?]]></title>
    <link href="http://lenciel.cn/2014/08/how-complex-your-python-project-is/"/>
    <updated>2014-08-31T21:04:47+08:00</updated>
    <id>http://lenciel.cn/2014/08/how-complex-your-python-project-is</id>
    <content type="html"><![CDATA[<p>最近诸事不顺，却也理所应当。</p>

<p>晚间时段迷上写字和画画，大概是因为之前看<a href="http://www.imdb.com/title/tt0460740/">《Cashback》</a>印象太深刻，觉得这些是美好遗失前力挽狂澜的技艺。</p>

<p>除开纸上涂鸦，还用机器画了不少鸡零狗碎的东西：我想用python画点儿T恤图案，印出来送给大家，给大伙儿同时也给自己打打气。</p>

<p>一开始看中了基于<a href="http://www.graphviz.org/">Graphviz</a>的<a href="http://furius.ca/snakefood/">Snakefood</a>。</p>

<p>最开始接触Graphviz是因为<a href="https://github.com/django-extensions/django-extensions">django-extensions</a>项目用它来画django model的<a href="https://code.djangoproject.com/wiki/DjangoGraphviz">关系图</a>。我们用它冒充ER图，拿去跟那些喜欢看文档但其实又不专业的官僚客户们交差。</p>

<p>Snakefood更进一步，通过分析你的代码依赖，从而得出你代码的“复杂度”。</p>

<p>“复杂度”其实是用“代码行数”衡量码农工作效力被普遍吐槽之后，大公司发明出来折腾工程师的诸多metrics里面还算有点儿用的一个：至少你可以让要接手的人看看这项目大概是个什么规模，以及，大概要挠破几寸头皮才能看懂。</p>

<p>当然，Snakefood这种基于文件依赖的复杂度分析其实不算特别靠谱，这可不是什么<a href="https://en.wikipedia.org/wiki/Cyclomatic_complexity">Cyclomatic complexity</a>，更像是开飞机的时候边排查“事故征兆”边驾驶的辅助工具。作者自己是这么说的：</p>

<blockquote><p>Producing pretty graphs is fun, but I found the most leverage of it when I try to make my code simpler, I generate the graph and inspect unexpected dependencies and try to refactor my code to simply the dependency graph as much as possible.</p><footer><strong>Martin Blais</strong></footer></blockquote>


<p>下面是本座心目中永远的&#8221;优雅Python代码第一名&#8221;<a href="http://docs.python-requests.org/en/latest/">Requests</a>的分析结果：</p>

<p><img src="http://lenciel.cn/downloads/images/2014_08/requests.png" title="requests dependencies" alt="requests" /></p>

<p>再来看看<a href="https://github.com/django/django">Django</a>的最新版分析结果：</p>

<p><img src="http://lenciel.cn/downloads/images/2014_08/django.png" title="django dependencies" alt="django" /></p>

<p>下面是本座最近撸完的一个项目，印到衣服上感觉还好吧：
<img src="http://lenciel.cn/downloads/images/2014_08/yawp.png" title="yawp dependencies" alt="yawp" /></p>

<a name="L......"></a>
<h2>结论</h2>

<p>首先，本座挺喜欢Snakefood那种Unix范儿的：所有的命令都可以给其他命令来一管，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sfood ./src <span class="p">|</span> sfood-graph -p <span class="p">|</span> dot -Tps <span class="p">|</span> pstopdf -i -o ./1.pdf
</span></code></pre></td></tr></table></div></figure>


<p>其次，本座开始计划是给每个人生成一个他们自己写的模块的依赖图，印到衣服上让大家自己穿。但试了之前几个项目之后，Hmmmm&hellip;有的同学大概是不会愿意的吧&hellip;</p>

<p>最后，T恤计划也没这么就打住：后来又发现了<a href="http://nodebox.net/">nodebox</a>这种真正是拿来搞艺术的玩意儿，于是要生成一点儿敢往自己胸口放的东西变得方便多了，过两天如果公司没有倒闭，就把东西放出来让大家看看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[偶然事件]]></title>
    <link href="http://lenciel.cn/2014/08/but-does-it-flow/"/>
    <updated>2014-08-21T03:54:13+08:00</updated>
    <id>http://lenciel.cn/2014/08/but-does-it-flow</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/2014_08/just_let_it_go.jpg" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>葛明走了之后，我们去火葬场送他。</p>

<p>他在关好门窗的卧室里点燃了一盆木炭，静悄悄走掉了。</p>

<p>最先发现他的是跟他住一起的他母亲。她说，一圈木炭排在火盆里，大头向上，小头向下，整整齐齐。另外，他还专门喝了安眠药，所以没有一般烧炭者因为气促造成的痉挛表情。</p>

<p>这就是他的风格，做什么都计划详实，控制精准，旁人既无法预知，更无法阻挡。</p>

<p>“他不但表情很安详，而且碳氧血红蛋白让他全身都变成了樱桃红色，看起来就像刚出生那天一样。”</p>

<p>“阿姨，你……”，我听到他妈妈这样说的时候有些不知道该怎么接话。</p>

<p>“别怕，我没疯”，她抹了一把眼泪，“只不过阿姨我退休之前是个法医。”</p>

<p>那天的确有很多眼泪，大家说的最多是，这太突然。</p>

<p>但我觉得不奇怪。的确，葛明是我们中间最幽默的人。不过，活到我这把年纪，已经明白那些让别人发笑的人，不过是把这技能当成保护自己内心世界的硬壳而已。和大多数动不动就要哭死在你面前的朋友相比，他们心门紧锁，难以真正亲近。</p>

<p>即便是像我们这样的关系，他也只说起过几次他的烦恼。</p>

<p>一次是他请我去他家吃饭，说想让我帮忙。</p>

<p>“我在找方便好用的热敷袋。要求很简单，一个人操作起来要很方便，什么部位用起来都很方便，什么时候想用热起来要很方便，还有，不要太丑”。</p>

<p>“最后一个要求表明，你是要送人吧？”</p>

<p>他只是笑，带我去看书房里面满屋子奇形怪状的物件。</p>

<p>“别人都说淘宝上什么都有得卖，但是我买回来试了好多，都没有特别满意的。”</p>

<p>我看了看，基本都还是进口货。</p>

<p>“如果说有热敷袋里的战斗机，那你这里也已经是一个军事机场了，所以，感觉帮不上什么忙了。”</p>

<p>“我已经大概决定哪几个比较好了，我是要你帮忙把我不要的带走几个。”</p>

<p>后来我听说，葛明给我们这帮人每人送了几个热敷袋。我们现在也不知道，他满意的那些究竟和我们手上的这些有什么不一样。</p>

<p>我最后一次见到他，是在商场碰巧遇见他在挑榨汁机。他拿着说明书，对导购小姐说：</p>

<p>“你看，上面写着：使用后立即清洁，就容易清洁。”</p>

<p>“是的，先生。”</p>

<p>“然后后面几页，它又写着：榨汁后应立即饮用。如果汁液在空气中暴露一段时间，就会变味并失去营养价值。”</p>

<p>“是的，先生。”</p>

<p>“那我每次榨完汁，究竟应该立即去清洗，还是应该立即去饮用果汁呢？”</p>

<p>他问完这个问题，我和导购小姐都笑了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shadowsocks on Google Compute Engine]]></title>
    <link href="http://lenciel.cn/2014/08/shadowsocks-on-google-compute-engine/"/>
    <updated>2014-08-17T21:55:44+08:00</updated>
    <id>http://lenciel.cn/2014/08/shadowsocks-on-google-compute-engine</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Migration in Django 1.7 (2)]]></title>
    <link href="http://lenciel.cn/2014/08/django-1-dot-7-migrations-part-2/"/>
    <updated>2014-08-11T03:59:47+08:00</updated>
    <id>http://lenciel.cn/2014/08/django-1-dot-7-migrations-part-2</id>
    <content type="html"><![CDATA[<p>在应用开发的过程中，我们会遇到migration主要分为：</p>

<ol>
<li>Schema Migrations：数据库schema的变化，也就是我们前面<a href="http://lenciel.cn/2014/08/django-1-dot-7-migrations/">讨论的内容</a></li>
<li>Data Migrations：数据的变化，比如需要批量变更数据或者备份在其他地方的历史数据</li>
</ol>


<p>第二种是没法敲几条命令让Django自动帮你完成其他的事情的，而是需要手动使用<code>RunPython</code>，这里具体说一下做法。</p>

<p>还是以之前的那个项目来作为例子，我们首先创建一个migration file：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python manage.py makemigrations --empty ts_data
</span><span class='line'>
</span><span class='line'>Migrations <span class="k">for</span> ts_data:
</span><span class='line'>  0003_auto_20140811_0110.py:
</span></code></pre></td></tr></table></div></figure>


<p>它的内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">unicode_literals</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span><span class="p">,</span> <span class="n">migrations</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Migration</span><span class="p">(</span><span class="n">migrations</span><span class="o">.</span><span class="n">Migration</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">(</span><span class="s">&#39;ts_data&#39;</span><span class="p">,</span> <span class="s">&#39;0002_auto_20140805_1525&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">operations</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们在里面加入一个<code>RunPython</code>的部分，来导入数据：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">unicode_literals</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span><span class="p">,</span> <span class="n">migrations</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">ts_data.models</span> <span class="kn">import</span> <span class="n">PingPongPrice</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">load_data</span><span class="p">(</span><span class="n">apps</span><span class="p">,</span> <span class="n">schema_editor</span><span class="p">):</span>
</span><span class='line'>    <span class="n">PingPongPrice</span><span class="p">(</span><span class="n">date</span><span class="o">=</span><span class="n">date</span><span class="p">(</span><span class="mi">2014</span><span class="p">,</span><span class="mo">07</span><span class="p">,</span><span class="mi">29</span><span class="p">),</span>
</span><span class='line'>         <span class="n">price</span><span class="o">=</span><span class="mf">12.00</span><span class="p">,</span>
</span><span class='line'>         <span class="p">)</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>    <span class="n">PingPongPrice</span><span class="p">(</span><span class="n">date</span><span class="o">=</span><span class="n">date</span><span class="p">(</span><span class="mi">2014</span><span class="p">,</span><span class="mo">01</span><span class="p">,</span><span class="mi">29</span><span class="p">),</span>
</span><span class='line'>         <span class="n">price</span><span class="o">=</span><span class="mf">8.00</span><span class="p">,</span>
</span><span class='line'>         <span class="p">)</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Migration</span><span class="p">(</span><span class="n">migrations</span><span class="o">.</span><span class="n">Migration</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">(</span><span class="s">&#39;ts_data&#39;</span><span class="p">,</span> <span class="s">&#39;0002_auto_20140805_1525&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">operations</span> <span class="o">=</span> <span class="p">[</span><span class="n">migrations</span><span class="o">.</span><span class="n">RunPython</span><span class="p">(</span><span class="n">load_data</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你觉得：咦，这样导入数据不是有点儿像用<code>syncdb</code>然后导入<code>fixture</code>么？的确，从效果上它们是一样的，个人觉得，对于测试环境我们可以继续使用fixture来保存mock的测试数据，然后使用<code>loaddata</code>命令手动加载测试数据。对生产环境使用migration来导入数据更好，和使用<code>loaddata</code>命令来导入fixture相比，它不需要手动操作，并且由于是通过<code>RunPython</code>来进行，实际上可以对数据进行各种需要的处理。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何不正确的殴打企鹅]]></title>
    <link href="http://lenciel.cn/2014/08/how-to-beat-the-penguin/"/>
    <updated>2014-08-09T20:32:58+08:00</updated>
    <id>http://lenciel.cn/2014/08/how-to-beat-the-penguin</id>
    <content type="html"><![CDATA[<p>今天在微信朋友圈里面看了20来条这游戏的成绩分享，还有的群开始讨论心得。打开链接一看，原来是当年那个小范围流行了一下的<a href="https://www.google.com/search?q=Penguin+Ball&amp;oq=Penguin+Ball&amp;aqs=chrome..69i57j69i60.972j0j4&amp;sourceid=chrome&amp;es_sm=91&amp;ie=UTF-8">Penguin Ball</a>嘛（我记得后来有些人开始玩那个<a href="http://www.bloody-penguin.com/">血腥版</a>，正常人就慢慢不玩这游戏了）。</p>

<p>不过，链接指向的那山寨游戏虽然没有再用flash，但是对手势事件的处理有问题（他们还是挺<a href="http://game.2sky.cn/js/52/index.js">大方的</a>），所以确实还蛮难的：我打了五六次，最好成绩6000多一点。</p>

<p>然后，那个页面除开嵌入了一个“教你如何调情”的广告之外，一直在不停的要你分享，分享，分享&hellip;&hellip;</p>

<p>那我就分享嘛~~~</p>

<p>去看了一下微信的分享是怎么弄出去的，原来有个非官方的叫<code>WeixinJSBridge</code>的东西：只要是通过微信应用内置的Webview打开的网页就可以调用到一组特别的接口，比如分享链接到朋友圈或者发送链接给朋友。这两个接口的参数非常类似：</p>

<ul>
<li>分享链接消息里面的title image的url</li>
<li>title image的宽度和高度</li>
<li>标题</li>
<li>描述</li>
<li>链接指向的url</li>
<li>微信APPID</li>
</ul>


<p>分享出来的链接，以这个“打企鹅”的游戏为例，是长成下面这样子的一条链接消息：</p>

<p><img src="http://lenciel.cn/downloads/images/2014_08/wechat_share_msg.jpg" title="Don't touch me..." alt="Wechat Message" /></p>

<p>所以，要伪装一个“打企鹅”的高分数链接就只需要找到title image的url和链接指向的url（因为标题和描述照着编就是了）。</p>

<p>本座觉得，那么山寨的游戏作者，肯定是把所有的东西都放在页面上的吧，于是用Chrome打开了那个页面，果然没有被拒绝（一般来说，给微信浏览的页面至少应该根据访问上报的user-agent等参数判断它是不是移动设备浏览的，如果不是应该reject），并且源码里面我想要的都在（所以比较敏感的js什么的minify一下会好一些）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="kd">var</span> <span class="nx">mebtnopenurl</span> <span class="o">=</span> <span class="s1">&#39;http://game.2sky.cn/game/&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">rankurl</span> <span class="o">=</span> <span class="nx">mebtnopenurl</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">dataForWeixin</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;appId&quot;</span><span class="o">:</span> <span class="s2">&quot;wx60c8c12f639f3ef4&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;imgUrl&quot;</span><span class="o">:</span> <span class="s2">&quot;http://game.2sky.cn/vapp/52/3.jpg&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;url&quot;</span><span class="o">:</span> <span class="s2">&quot;http://bingkafei.hnsdcpa.com/game/52/&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;tTitle&quot;</span><span class="o">:</span> <span class="s2">&quot;打企鹅-6e游戏&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;tContent&quot;</span><span class="o">:</span> <span class="s2">&quot;打企鹅-6e游戏&quot;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">dataForWeixin</span><span class="p">.</span><span class="nx">appId</span> <span class="o">=</span> <span class="s2">&quot;wx8820cdf5db680ffa&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">dataForWeixin</span><span class="p">.</span><span class="nx">url</span> <span class="o">=</span> <span class="s2">&quot;http://weiapp.552200.com/game/&quot;</span><span class="o">+</span><span class="nx">_con</span><span class="p">[</span><span class="s2">&quot;num&quot;</span><span class="p">]</span><span class="o">+</span><span class="s2">&quot;/&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">dp_share</span><span class="p">(){</span>
</span><span class='line'>        <span class="nb">document</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span><span class="s2">&quot;你简直霸气侧漏，把企鹅击飞出&quot;</span><span class="o">+</span><span class="nx">myData</span><span class="p">.</span><span class="nx">scoreName</span><span class="o">+</span><span class="s2">&quot;，谁还能超越我？&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;share&quot;</span><span class="p">).</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">dataForWeixin</span><span class="p">.</span><span class="nx">tTitle</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">title</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，拿到这些了之后，也不是马上一句：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">WeixinJSBridge</span><span class="p">.</span><span class="nx">invoke</span><span class="p">(</span><span class="s1">&#39;shareTimeline&#39;</span><span class="p">,</span><span class="nx">data</span><span class="p">,</span><span class="nx">callback</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>就能把你装神弄鬼消息分享出去的。前面说了，微信那边还是会检查整个事情是不是发生在微信内置的webview里面。但是，要绕开也不是那么麻烦，你懂的&hellip;</p>

<p>总体感觉微信的这api还是挺扯的，本来可以作为身份校验的appid其实填不填也无所谓，所以朋友圈里面的链接点起来还是谨慎一点儿吧，骚年们。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Migration in Django 1.7 (1)]]></title>
    <link href="http://lenciel.cn/2014/08/django-1-dot-7-migrations/"/>
    <updated>2014-08-05T11:12:41+08:00</updated>
    <id>http://lenciel.cn/2014/08/django-1-dot-7-migrations</id>
    <content type="html"><![CDATA[<p>Django 1.7已经发布一段时间了，基本上这个版本最主要的改动就是加入了<code>migrations</code>。</p>

<p>在过去，几乎所有的Django项目都是用South来处理数据变更的。而在Django1.7版本，South的作者Andrew Godwin把<code>migrations</code>加到了Django Core里面。</p>

<p>So&hellip;</p>

<a name="Migrations............"></a>
<h1>Migrations是什么？</h1>

<p>Migrations其实就是一堆帮助你完成数据库变更和数据迁移的命令，使得你可以用“Django”的方式来管理和变更数据库的schema。比如，当你的model改变了，你需要在数据库里面去重命名一列时，你不会想跑到命令行下面去敲SQL吧？特别是，如果你要变更的数据库是线上的，有几百万用户数据，你应该更不愿意搭上这种活了吧？</p>

<p>Migrations让事情变得简单可控：</p>

<ol>
<li>它使得数据库schema的调整可以通过Django命令来完成</li>
<li>它使得数据库的schema和对应的model的变更被track起来：整个历史都可以版本化在Git里面</li>
<li>提供了一套匹配schema和对应的fixture的机制</li>
<li>如何和CI搭配起来，可以保证代码和数据一致性</li>
</ol>


<a name="Migrations......"></a>
<h1>Migrations上手</h1>

<a name="L.................."></a>
<h2>创建测试项目</h2>

<p>首先创建一个virtualenv和django项目：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkvirtualenv django17
</span><span class='line'><span class="nv">$ </span>pip install https://www.djangoproject.com/download/1.7c2/tarball/
</span><span class='line'><span class="nv">$ </span>django-admin.py startproject django_migration_test
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>django_migration_test
</span><span class='line'><span class="nv">$ </span>python manage.py startapp ts_data
</span></code></pre></td></tr></table></div></figure>


<p>然后创建一个model到subl ts_data/models.py：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Create your models here.</span>
</span><span class='line'><span class="k">class</span> <span class="nc">PingPongPrice</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">date</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">auto_now_add</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DecimalField</span><span class="p">(</span><span class="n">max_digits</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">decimal_places</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>subl django_migration_test/settings.py</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="s">&#39;ts_data&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<a name="L......Migrations"></a>
<h2>创建Migrations</h2>

<p>使用下面的命令可以创建ts_data这个app的Migrations。当然，和大多数Django命令一样，如果你不显式的指定，就</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">(</span><span class="n">django17</span><span class="p">)</span> <span class="err">○</span> <span class="n">python</span> <span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">makemigrations</span> <span class="n">ts_data</span>
</span><span class='line'><span class="n">Migrations</span> <span class="k">for</span> <span class="s">&#39;ts_data&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="mo">0001</span><span class="n">_initial</span><span class="o">.</span><span class="n">py</span><span class="p">:</span>
</span><span class='line'>    <span class="o">-</span> <span class="n">Create</span> <span class="n">model</span> <span class="n">PingPongPrice</span>
</span></code></pre></td></tr></table></div></figure>


<a name="L......Migrations"></a>
<h2>应用Migrations</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>django17<span class="o">)</span> ○ python manage.py migrate
</span><span class='line'>Operations to perform:
</span><span class='line'>  Apply all migrations: admin, contenttypes, ts_data, auth, sessions
</span><span class='line'>Running migrations:
</span><span class='line'>  Applying contenttypes.0001_initial... OK
</span><span class='line'>  Applying auth.0001_initial... OK
</span><span class='line'>  Applying admin.0001_initial... OK
</span><span class='line'>  Applying sessions.0001_initial... OK
</span><span class='line'>  Applying ts_data.0001_initial... OK
</span></code></pre></td></tr></table></div></figure>


<p>注意，因为是一个全新的app，这条命令会先建表，换句话说，之前版本的<code>syncdb</code>命令可以不用了。整个使用流程应该变成：</p>

<ol>
<li>建立或者更新一个model</li>
<li>运行<code>python manage.py makemigrations &lt;app_name&gt;</code></li>
<li>运行<code>python mange.py migrate &lt;app_name</code>来应用创建的Migrations</li>
<li>重复前面的步骤</li>
</ol>


<a name="L................................."></a>
<h1>不是新建的项目如何使用</h1>

<p>大多数情况下我们都是从旧版本的Django迁移过来，也就意味着是从South迁移过来。这种情况下需要：</p>

<ol>
<li>删除所有的South创建的migration文件</li>
<li>运行 <code>./manage.py makemigrations</code>，Django会根据你当前model来创建那份<code>initial migrations file</code></li>
<li>运行<code>./manage.py migrate</code>，Django会把已经存在的数据库table当成是migration的产物，完成整个migration</li>
</ol>


<p>如果你运行上面的命令遇到错误，就需要运行 <code>./manage.py migrate --fake &lt;appname&gt;</code> 做一个fake的migration。</p>

<p>如果你不想丢掉过去的South维护的历史记录，可以同时使用South和Django Migrations：升级South到1.0，然后<a href="http://www.aeracode.org/2014/7/1/end-era/">参考这篇文章的做法</a>。</p>

<a name="South...Django.Migrations......"></a>
<h1>South和Django Migrations比较</h1>

<p>对比一下South和Django Migrations的workflow，可能会更加清晰：</p>

<a name="L............migrations"></a>
<h2>首次全新migrations</h2>

<p>South:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">./</span><span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">syncdb</span>
</span><span class='line'><span class="o">./</span><span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">schemamigration</span> <span class="o">&lt;</span><span class="n">appname</span><span class="o">&gt;</span> <span class="o">--</span><span class="n">initial</span>
</span></code></pre></td></tr></table></div></figure>


<p>Django Migrations:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">./</span><span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">makemigrations</span> <span class="o">&lt;</span><span class="n">appname</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<a name="L......migrations"></a>
<h2>应用migrations</h2>

<p>South:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">./</span><span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">migrate</span> <span class="o">&lt;</span><span class="n">appname</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Django Migrations:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">./</span><span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">migrate</span> <span class="o">&lt;</span><span class="n">appname</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<a name="L.........migrations"></a>
<h2>非首次migrations</h2>

<p>South:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">./</span><span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">schemamigration</span> <span class="o">&lt;</span><span class="n">appname</span><span class="o">&gt;</span> <span class="o">--</span><span class="n">auto</span>
</span></code></pre></td></tr></table></div></figure>


<p>Django Migrations:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">./</span><span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">makemigration</span> <span class="o">&lt;</span><span class="n">appname</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，大概是因为出自同一个作者的原因，Django Migrations基本上follow了South的工作流程，只不过是命令更加简洁和清晰了。</p>

<a name="L............"></a>
<h1>更多细节</h1>

<a name="L..................Django.Migrations........."></a>
<h2>哪些变化会被Django Migrations找到？</h2>

<p>如果你再次运行<code>python manage.py migrate</code>，会发现什么都没有发生：这是因为在项目的数据库中有一张<code>django_migrations</code>仍然被更新。表，记录了哪些Migrations已经被应用过了：无论是运行了migrate还是fake的，这个表都会被插入一条记录。比如从South升级到使用Django自带的MigrationsDjango会检查是否有更新。如果没有，它就fake一次，但<code>django_migrations</code>仍然被更新。</p>

<p>在少数情况下，确实有需要再次运行某个特定的Migrations，我们可以在<code>django_migrations</code>里面把这个记录删除掉。</p>

<p>在极少数情况下，如果你有需要回退到特定的版本，比如最初的zero版本，可以用类似<code>python manage.py migrate &lt;app_name&gt; zero</code>的语法。</p>

<a name="Migration......."></a>
<h2>Migration 文件</h2>

<p>在我们运行<code>python manage.py migrate &lt;app_name&gt;</code>究竟发生了什么？实际上，Django会创建一个python文件来描述如何完成这个migration，以前面的ts_data为例，这个文件位于<code>ts_data/migrations/0001_initial.py</code>，内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">unicode_literals</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span><span class="p">,</span> <span class="n">migrations</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Migration</span><span class="p">(</span><span class="n">migrations</span><span class="o">.</span><span class="n">Migration</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">operations</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="n">migrations</span><span class="o">.</span><span class="n">CreateModel</span><span class="p">(</span>
</span><span class='line'>            <span class="n">name</span><span class="o">=</span><span class="s">&#39;PingPongPrice&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">fields</span><span class="o">=</span><span class="p">[</span>
</span><span class='line'>                <span class="p">(</span><span class="s">&#39;id&#39;</span><span class="p">,</span> <span class="n">models</span><span class="o">.</span><span class="n">AutoField</span><span class="p">(</span><span class="n">verbose_name</span><span class="o">=</span><span class="s">&#39;ID&#39;</span><span class="p">,</span> <span class="n">serialize</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">auto_created</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)),</span>
</span><span class='line'>                <span class="p">(</span><span class="s">&#39;date&#39;</span><span class="p">,</span> <span class="n">models</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">auto_now_add</span><span class="o">=</span><span class="bp">True</span><span class="p">)),</span>
</span><span class='line'>                <span class="p">(</span><span class="s">&#39;price&#39;</span><span class="p">,</span> <span class="n">models</span><span class="o">.</span><span class="n">DecimalField</span><span class="p">(</span><span class="n">max_digits</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">decimal_places</span><span class="o">=</span><span class="mi">2</span><span class="p">)),</span>
</span><span class='line'>            <span class="p">],</span>
</span><span class='line'>            <span class="n">options</span><span class="o">=</span><span class="p">{</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="n">bases</span><span class="o">=</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">,),</span>
</span><span class='line'>        <span class="p">),</span>
</span><span class='line'>    <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，是完全可读的Python代码。这也是为什么推荐把整个<code>migrations</code>文件夹加入版本控制的原因：这样你的应用经过了怎样的变更就变得可以回溯了。</p>

<a name="Migration.Dependencies"></a>
<h2>Migration Dependencies</h2>

<p>上面的源代码有一些值得注意的地方。</p>

<p>首先，所有的migration file里面都有一个<code>Migration()</code>类，继承自<code>django.db.migrations.Migration</code>。在我们运行<code>migrate</code>命令的时候，运行的就是这个类。</p>

<p>这个类有两个list，一个是<code>dependencies</code>，一个是<code>operations</code>。</p>

<p><code>dependencies</code>定义了这个migration之前必须完成的操作，比如你的model里面包括一个外键，那么你得首先有对应的table。比如，假设外键指向的model在<code>app_1</code>，那么<code>dependencies</code>会像这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">dependencies</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>   <span class="p">(</span><span class="s">&#39;main&#39;</span><span class="p">,</span> <span class="s">&#39;__first__&#39;</span><span class="p">),</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>如果没有前置条件，这个list可以为空。但大多数时候<code>dependencies</code>是指向其他的migration文件。比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">dependencies</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;main&#39;</span><span class="p">,</span> <span class="s">&#39;0001_initial&#39;</span><span class="p">),</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里使用list的结果是，所有的依赖是没有顺序的，也就是说你不需要按照0001、0002、0003的顺序来排列所有的依赖。</p>

<a name="Migration.Operations"></a>
<h2>Migration Operations</h2>

<p>这个list定义的就是migration完成的操作，可以分为下面的这些种类：</p>

<ul>
<li>CreateModel</li>
<li>DeleteModel</li>
<li>RenameModel</li>
<li>AlterModelTable</li>
<li>AlterUniqueTogether</li>
<li>AlteIndexTogether</li>
<li>AddField</li>
<li>RemoveField</li>
<li>RenameField</li>
<li>RunSQL</li>
<li>RunPython</li>
</ul>


<p>前面的那些操作是整个Django Migrations的核心：因为需要对各种不同的数据库做适配。而后面的两个操作则是灵活度非常高的，几乎可以干任何事情。</p>

<a name="L......"></a>
<h1>实例</h1>

<p>让我们试试把<code>PingPongPrice</code>的<code>price</code>这个field的<code>max_digits</code>改成8位的（通货膨胀嘛），然后再次运<code>makemigrations</code>行命令:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>django17<span class="o">)</span> ○ python manage.py makemigrations ts_data
</span><span class='line'>Migrations <span class="k">for</span> <span class="s1">&#39;ts_data&#39;</span>:
</span><span class='line'>  0002_auto_20140805_1525.py:
</span><span class='line'>    - Alter field price on PingPongPrice
</span></code></pre></td></tr></table></div></figure>


<p>可以看到这次生成的migration文件里面有<code>AlterField</code>操作：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">unicode_literals</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span><span class="p">,</span> <span class="n">migrations</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Migration</span><span class="p">(</span><span class="n">migrations</span><span class="o">.</span><span class="n">Migration</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">(</span><span class="s">&#39;ts_data&#39;</span><span class="p">,</span> <span class="s">&#39;0001_initial&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">operations</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="n">migrations</span><span class="o">.</span><span class="n">AlterField</span><span class="p">(</span>
</span><span class='line'>            <span class="n">model_name</span><span class="o">=</span><span class="s">&#39;PingPongPrice&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">name</span><span class="o">=</span><span class="s">&#39;price&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">field</span><span class="o">=</span><span class="n">models</span><span class="o">.</span><span class="n">DecimalField</span><span class="p">(</span><span class="n">max_digits</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span> <span class="n">decimal_places</span><span class="o">=</span><span class="mi">2</span><span class="p">),</span>
</span><span class='line'>        <span class="p">),</span>
</span><span class='line'>    <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[It's August Now, Boy...]]></title>
    <link href="http://lenciel.cn/2014/08/before-sunrise/"/>
    <updated>2014-08-04T23:47:03+08:00</updated>
    <id>http://lenciel.cn/2014/08/before-sunrise</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/2014_08/before_sunrise_1.jpg" title="Don't touch me..." alt="before sunrise1" />
<img src="http://lenciel.cn/downloads/images/2014_08/before_sunrise_2.jpg" title="Don't touch me..." alt="before sunrise2" /></p>

<blockquote><p>&#8220;I believe if there’s any kind of God it wouldn’t be in any of us, not you or me but just this little space in between. If there’s any kind of magic in this world it must be in the attempt of understanding someone, sharing something.&#8221;</p><footer><strong>Ethan Hawke</strong> <cite><a href='http://www.imdb.com/title/tt0112471/'>Before Sunrise(1995)</a></cite></footer></blockquote>

]]></content>
  </entry>
  
</feed>
