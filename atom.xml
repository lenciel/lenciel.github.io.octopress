<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@Lenciel]]></title>
  <link href="http://lenciel.cn/atom.xml" rel="self"/>
  <link href="http://lenciel.cn/"/>
  <updated>2016-02-25T23:25:45+08:00</updated>
  <id>http://lenciel.cn/</id>
  <author>
    <name><![CDATA[Lenciel Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[从Markdown列表转换成脑图]]></title>
    <link href="http://lenciel.cn/2016/02/markdown-to-mindmap/"/>
    <updated>2016-02-25T21:19:33+08:00</updated>
    <id>http://lenciel.cn/2016/02/markdown-to-mindmap</id>
    <content type="html"><![CDATA[<p>去年过年整理了一次<a href="http://lenciel.cn/2015/01/p4f-tech-stack-part-1-devops/">p4f的技术栈</a>，最近受<a href="http://www.stuq.org/subject/skill-map/">StuQ</a>和<a href="https://leohxj.gitbooks.io/front-end-database/content/interview/skill-path.html">leohxj</a>的启发又开始整理适合我司的各个研发职位的技能图谱：这类树状的图片其实就是脑图(Mindmap)。</p>

<p>图片形式的文档都有一个麻烦的地方，就是不太好做版本控制和review。比如如果本座来整理Web前端技能图谱，总希望：</p>

<ul>
<li>能够发给前端组的人review</li>
<li>能够放到代码库，让前端组维护起来，根据业界动态不断更新</li>
</ul>


<p>如果是张图片，弄起来就比较麻烦，这个时候就需要Markdown出场了。其实最近这几年，用Markdown写文档大概也算Best Practice的一个了。好处确实很多，最重要的两个：</p>

<ul>
<li>集成到现有的开发流程里面把文档也交叉review、版本化、自动部署</li>
<li>有个三长两短的时候，迁移成本非常低</li>
</ul>


<p>只不过从Markdown生成脑图还是比较偏门，所以分享一下。</p>

<p>其实大多数的脑图软件（ 比如MindNode或者Mindjet MindManager）都支持把缩进好的文本直接导入生成图片。以我在用的MindNode为例，你可以把下面的格式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- 研发团队
</span><span class='line'>  - 前端组
</span><span class='line'>  - 后端组
</span><span class='line'>  - 运维组
</span><span class='line'>  - 测试组
</span><span class='line'>  - 平台组
</span><span class='line'>      - 数据组
</span><span class='line'>      - RIO组</span></code></pre></td></tr></table></div></figure>


<p>这样贴到MindNode里面，就会生成下面的脑图：</p>

<p><img src="http://lenciel.cn/downloads/images/2016_02/mindmap_1.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>但是上面的格式，如果是以Markdown的格式放到代码库里面，有略显难看。所以更进一步，你可以先用Markdown的<code>#</code>来标不同层级，使得文档本身可以在网页上显示成规则的列表，<a href="http://lenciel.cn/2014/05/web-development-skill-set-and-reading-list/">类似这样</a>，它的原始Markdown文件在<a href="https://gist.github.com/lenciel/637812a7dcbe8341b07b">这里</a>。</p>

<p>然后，通过脚本把文档里面的<code>#</code>转换成<code>\t</code>，就可以得到能够直接粘贴到MindNode里面生成脑图的文本了。如果你是使用Mac，还可以直接把转换脚本创建成一个<code>service</code>通过<code>Automator</code>安装，这样你在任何一个Markdown文档上选中需要生成脑图的部分，右键就可以了：</p>

<p><img src="http://lenciel.cn/downloads/images/2016_02/mindmap_2.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>还有个未尽事宜就是在转换脚本里面加一个功能：Markdown里面的链接，生成图片的时候把方括号、圆括号以及圆括号里面的链接去掉，不然就太难看了：</p>

<p><img src="http://lenciel.cn/downloads/images/2016_02/mindmap_3.png" title="Don't touch me..." alt="Vhost threshold" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Chrome自定义搜索引擎快速查找资源]]></title>
    <link href="http://lenciel.cn/2016/02/how-can-everybody-use-chrome/"/>
    <updated>2016-02-20T11:53:34+08:00</updated>
    <id>http://lenciel.cn/2016/02/how-can-everybody-use-chrome</id>
    <content type="html"><![CDATA[<p>这篇文章讨论的办法，主要是结合使用<code>带参数Google搜索</code>+<code>Chrome快捷搜索入口</code>，鉴于众所周知的原因，如果你不会翻墙可能不能直接使用。</p>

<p>但是鉴于国内搜索引擎功能上多少都有借鉴Google，浏览器多少都有借鉴Chrome，所以这里讨论的办法也许用其他&#8221;搜索&#8221;+&ldquo;浏览器&#8221;组合也可以使用。只是我们都知道国内搜索引擎索引出来的结果有多离奇，所以效果上可能会打一些折扣。</p>

<a name="L.........Google......"></a>
<h3>带参数Google搜索</h3>

<p>Google可以带参数搜索一般用户可能不太用到，但其实对找东西很有用。完整的说明可以自己找来看，对普通用户也非常有用的有：</p>

<a name="L........."></a>
<h4>双引号</h4>

<p>把搜索词放在双引号中，代表完全匹配搜索，也就是说搜索结果返回的页面包含双引号中出现的所有的词，连顺序也必须完全匹配。</p>

<p>比如搜索代码里面的抛出的错误，你直接把错误行扔进去，往往不如加上引号来完全匹配准确。</p>

<a name="filetype"></a>
<h4>filetype</h4>

<p>用于搜索特定文件格式，比如搜索<code>filetype:pdf</code>，那么就只返回所有包含关键词的pdf文件。</p>

<a name="site"></a>
<h4>site</h4>

<p>用来搜索某个域名下的所有文件，比如在百度网盘里面搜索名字包含Hadoop的文件，就可以搜索<code>Hadoop site:pan.baidu.com</code>。</p>

<a name="L......"></a>
<h4>减号</h4>

<p>代表搜索不包含减号后面的词的页面。使用这个指令时减号前面必须是空格，减号后面紧跟着需要排除的词。</p>

<p>熟练掌握并且综合使用上面这些语法，你就可以非常快速地找到你需要的东西了。</p>

<a name="Chrome.................."></a>
<h3>Chrome快捷搜索入口</h3>

<p>Chrome为你提供了快捷方式来使用搜索。<code>Cmd+L</code>（Windows平台大概是<code>Ctrl+L</code>）进入地址栏，然后输入要搜索的内容，回车，就会使用你的默认搜索引擎进行搜索。</p>

<p>假如你要切换一个搜索引擎，比如你的默认引擎是Google，偶尔你需要用百度来搜索，只需要在地址栏里面先敲<code>baidu</code>，然后按<code>Tab</code>键，然后输入你需要搜索的关键字并回车，就可以了。</p>

<p>Chrome里面你可以这样使用的搜索引擎数量其实是远超你想象的。</p>

<p>在地址栏里面敲入<code>chrome://settings/</code>，然后进入搜索引擎的配置你就可以看到它们：</p>

<p><img src="http://lenciel.cn/downloads/images/2016_02/manage_search_engine.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<a name="L................................."></a>
<h3>创建使用自定义搜索引擎</h3>

<p>一旦开始使用自定义搜索，你就会发现有些搜索使用频率相当高。</p>

<p>比如在百度盘里面搜索某个文件。</p>

<p>再比如在<a href="http://quora.com/">Quora</a>或者<a href="http://zhihu.com">知乎</a>里面搜索包含某个关键字的问答。</p>

<p>这个时候你只需要在搜索引擎列表的末尾添加一个自定义项：</p>

<p><img src="http://lenciel.cn/downloads/images/2016_02/custom_search_engine.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>比如我们添加一个<code>Keyword</code>是<code>panb</code>的搜索引擎，它的URL是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://www.google.com.hk/search?q=%s+site%3Apan.baidu.com</span></code></pre></td></tr></table></div></figure>


<p>注意URL这个参数需要做<a href="https://docs.oracle.com/javase/7/docs/api/java/net/URLEncoder.html">urlencode</a>，所以空格变成了<code>+</code>，<code>site:pan.baidu.com</code>变成了<code>site%3Apan.baidu.com</code>。</p>

<p>如果你不知道<code>urlencode</code>怎么做，可以先到Google上完成一次目标搜索，然后从地址栏上面复制下来。</p>

<p>定义好了自定义搜索引擎以后，你只需要在地址栏里面输入Keyword（panb），然后按<code>Tab</code>键，再输入你需要查找的资源，回车，就可以看到结果了。</p>

<p>具体使用过程请参考下面这个视频（略需要几秒加载）：</p>

<p><video width='640' height='320' preload='none' controls poster='http://lenciel.cn/downloads/images/2016_02/chrome_custom_search.png'><source src='http://lenciel.cn/downloads/video/chrome_custom_search.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'></video></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记一次成功的过年]]></title>
    <link href="http://lenciel.cn/2016/02/happy-new-year/"/>
    <updated>2016-02-13T22:41:48+08:00</updated>
    <id>http://lenciel.cn/2016/02/happy-new-year</id>
    <content type="html"><![CDATA[<p>过年在三亚呆了一周。</p>

<p>虽然中学毕业就已经习惯了在外面跑，像今年这样一大家子人到外地过年，却还是头次。</p>

<p>这地方确实有它的好，特别是对于感冒缠身的本座来说。</p>

<p>但无论如何，毕竟不是自己的地方。</p>

<p>就好像在澳洲过年的邓总发朋友圈，说自己的女儿呆了一周，只喜欢“当地”的榨菜：从来没吃过这东西的小朋友不知道这是父母随身带去的，还以为是当地特产。</p>

<p>这让我想起北宋末年汴梁那个炒栗子的李和儿，亡国后但有南边的人来，便专程去炒一包栗子奉上，只说一句“我是东京的李和儿”，就默然无语。</p>

<p>人总是要在离开之后，才格外知道自己来自那里。</p>

<p>当然，认真追究起来，我们大多数人的故乡已经不在。百里万里赶回去，看到的无非是富丽的什么、大美的什么、和谐的什么、宜居的什么。近在眼前却远在天边的故乡，难免让人想起帕慕克在《一个城市的记忆》中描述的“呼愁”，不过好歹可以算是夹了忧伤的喜剧：基础建设对老百姓，总算是件好事情。</p>

<p>但千篇一律的城市，难免有千篇一律的无聊。就算是乔峰这样的英雄好汉，要是活在我朝，哪怕雁门关上吃了一顿大肉，喝了几斤好酒，也很难想出和心爱的女人出关而去，从此放牛牧羊，逍遥自在，绝迹于中原的点子了吧。</p>

<p>何况，哪怕出得雁门关，如何逃出朋友圈？</p>

<p>在蒙爷睡觉的时候，修复长辈们的手机、平板变成了本座的消遣。因为Google被封杀变得不能正常使用的Nexus系列，本座安利得最多，搞起来也最费劲。电脑没有网线，无法分享ss代理，只好现开香港的机器搭简单的http proxy，然后对着屏幕回忆那些怎么也回忆不起来的账号、密码、密保问题。</p>

<p>电视里放着重播的春晚，窗户外响着彷佛永远不会停止的烟花爆竹声。怕睡着的孩子被吵醒，长辈们难免会抱怨几句：“真是陋习不改。”但大家一起稍微看几分钟电视，又一致同意除夕夜好容易团圆的一家人看这样一台晚会，才是现在中国人过春节最大的陋习。</p>

<p>蒙爷醒来的时候，我们就开车到处去玩。海边去得最多，一会儿挖沙子，一会儿捡贝壳，一直很怕水的他也high到踏浪湿身。海风吹动沙滩上残存土堆里潦潦草草的几棵松树，身边是畅笑不止的蒙爷，让人真的感觉到了什么是“松风晚照天涯也无”。</p>

<p>有天，岳父大人做了一盘大虾，开心地跟我们介绍这“大基围虾”的采买过程。我突然想起，基围虾究竟长在哪里，对我还是个未解之谜。</p>

<p>以前四川刚刚能吃“基围虾”的时候，请客的人脸上那份豪情，和大家剥虾时的那份美滋滋与小心翼翼，还历历在目。那时候我一直以为这虾叫“鸡尾虾”，心里面觉得这名字起得倒是比鸡尾酒像话，毕竟这东西真有那么大个尾巴。</p>

<p>后来发现，原来写法是“基围虾”，心里面一直把它当成是个外来词，跟“摩托车”一样。</p>

<p>到了上班后，偶然听一个海边长大的同事说，基围指的是一种养殖方法：在海湾和河口的红树林周围挖掘河道，用泥土筑基，围成水塘，靠潮汐变化来运作：涨潮时，海里面的小虾鱼进入塘中，以红树林的落叶为食长大。</p>

<p>“很普通的，我们那儿过去到处都是”。</p>

<p>岂止他们那儿，那时候无论是哪儿，基围虾都已经变得普通。饭馆儿里面昂贵的菜肴变回了河虾，给父母打电话，说上海这地方海鲜便宜，自己和合租的一天到晚吃虾啃蟹，还会被教育：“别只顾着工作，要把生活开好”。</p>

<p>只是去过很多海边，一直没有见过传说中到处都是的“红树林”和“基围”。</p>

<p>于是吃完虾上网仔细翻了一下，原来红树林（英文mangrove）是指一种生长在热带、亚热带特有的海岸带植物群落，包括松树、白骨壤、榄李、桐花、秋茄、海漆、露兜树、黄槿等等。</p>

<p>所以沙滩上残存土堆里潦潦草草的几棵松树，就是传说中的“基围”啊。</p>

<p>再一查，因为海湾越围越窄，海滩开发过度，加上“效率低下”，基围养殖已经基本绝迹：现在都是人工海水里面育苗然后扔进水田里面养殖了。</p>

<p>所以还只是传说中“基围”的遗址而已。</p>

<p>看到这里，你以为我这个时候要惆怅一番，唏嘘一番。</p>

<p>但人生短促，盘点离愁别恨，略显奢靡了。</p>

<p>我只是在想，这么说起来，我到底吃过基围虾没有&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[提取微信语音消息]]></title>
    <link href="http://lenciel.cn/2015/12/extract-audio-message-from-wechat/"/>
    <updated>2015-12-24T13:05:21+08:00</updated>
    <id>http://lenciel.cn/2015/12/extract-audio-message-from-wechat</id>
    <content type="html"><![CDATA[<a name="Why."></a>
<h3>Why?</h3>

<p>Why not?</p>

<a name="How."></a>
<h3>How?</h3>

<a name="L................................."></a>
<h4>导出原始微信的音频消息</h4>

<ul>
<li>使用iTunes创建一个不加密备份</li>
<li>导出备份中的微信应用文件夹（可以使用iExplorer试用版）</li>
<li>找到你需要转换的音频文件所在文件夹</li>
</ul>


<a name="L......silk3...............mp3"></a>
<h4>转换silk3编码音频为mp3</h4>

<p>如果你是mac机器，只需要安装ffmpeg（推荐使用homebrew）然后运行脚本：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">python</span> <span class="n">wechat2mp3</span><span class="o">.</span><span class="n">py</span> <span class="err">待转换音频所在文件夹</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你是其他系统，确认你装好了ffmpeg之后，需要<a href="https://github.com/gaozehua/SILKCodec">自己编译SILK解码库</a>。</p>

<a name="Seriously.Why."></a>
<h3>Seriously Why?</h3>

<p>常温常压下我并不需要导出微信的语音，之所以有这个需求是因为蒙爷在三亚经常用微信跟我们唠嗑：</p>

<p><audio controls loop preload><source src="http://lenciel.cn/downloads/audio/mm_voice.mp3"></audio></p>

<p>听到这样销魂的声音你就算不想保存，也想要转发，对不对？</p>

<p>毕竟作为一名中国人，你已经有8个亲戚群了，对不对？</p>

<p>然后微信奇怪的生态圈构建方式就是，各种封闭。</p>

<p>微信公众号是世间少有的不允许外链的媒体，微信客户端是世间少有的不允许导出聊天记录的聊天工具。</p>

<p>它的想法大概是，你珍贵的瞬间都在我这里（微信专门做了“收藏”这个功能让你把这些片段上传到微信的服务器，打着不让它们丢失的旗号），那你就逃不出我的手掌心了。</p>

<a name="Seriously.How."></a>
<h3>Seriously How?</h3>

<p>使用iTunes创建一个不加密的备份，然后连接iExplorer，会看到打开iTunes备份的选项：</p>

<p><img src="http://lenciel.cn/downloads/images/2015_12/extract_wechat_1.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>打开后在<code>App</code>文件夹下面导出微信文件夹：</p>

<p><img src="http://lenciel.cn/downloads/images/2015_12/extract_wechat_2.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>在导出的文件夹下面有个Audio目录，你可以根据语音消息的数量大概确认需要导出的目录（目录是个hash），然后到<code>DB/MM.sqlite</code>下面去打开<code>Chat_[hash]</code>这个表里面，看看消息来确认：</p>

<p><img src="http://lenciel.cn/downloads/images/2015_12/extract_wechat_3.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>二进制查看其中的任意一个文件，可以看到是<a href="https://en.wikipedia.org/wiki/SILK">SILK</a>编码的（skype早期版本包括lync都是使用的这种编码方式）：</p>

<p><img src="http://lenciel.cn/downloads/images/2015_12/extract_wechat_4.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>接下来你只需要按照<a href="https://github.com/lenciel/wechat2mp3">repo</a>里面的指导(愿主保佑你是用Mac因为那最简单)来进行文件转换就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[卫豆]]></title>
    <link href="http://lenciel.cn/2015/10/vivid/"/>
    <updated>2015-10-24T03:30:20+08:00</updated>
    <id>http://lenciel.cn/2015/10/vivid</id>
    <content type="html"><![CDATA[<p>每个人的生命中都有一个胖子。</p>

<p>我的胖子叫卫豆。</p>

<p>卫豆为什么叫卫豆我已经有些忘了。也许是因为英语课给自己取名叫Vivid，于是大家叫他卫卫豆。但是铅球跳高双料冠军的他感觉AAB的名字太过娘炮，所以我们截取了两位有效位数。</p>

<p>居然有些忘了：以我自觉傲人的memory插装量而言，能从我堆栈里面溢出的人屈指可数。</p>

<p>但毕竟，这胖子自从20多年前出现，就在我的生活中玉体横陈，盘踞多年。</p>

<p>初次见卫豆，他就是广汉市第四小学校足球队的守门员。那时我在三小，还不会踢球，但当时校队队长是我们班的姜来，也是好朋友，所以跑去看了比赛。</p>

<p>后来我们都到了一中，他发育良好长势喜人，我茅舍顿开脱胎换骨，于是我俩成了校队队友。</p>

<p>他和我弟还同桌。</p>

<p>如果你能看懂《灌篮高手》，大概能明白那是怎样特殊的一种友谊：不仅仅是队友或者同学，而是分享着澎湃热血和隐秘恋情的死党。</p>

<p>那些年我当队长，他是门将，和包括我弟在内的小伙伴们一起拿下了市里面很多比赛，是历史上最强的校队。</p>

<p>我们真的都很厉害，但大概卫豆更强，所以在年级比赛里扑出了我的点球淘汰了我们班。</p>

<p>老天爷为了惩罚他，让我们进了一所大学。</p>

<p>他读的物理系踢球很菜，我带着机电系反复蹂躏着他。</p>

<p>我们也都进了校队，有各自出彩的瞬间，也有一起黯淡的时光。</p>

<p>除开足球，除开一起经历了春梦般的校园和恶梦般的春运，我们变得那么铁多少还因为门当户对臭味相投。</p>

<p>我们家工薪阶层，养一对双胞胎。卫豆的母亲下岗已久，父亲是转业军人。在学校的日子，手头都不算宽裕，卫豆比我更紧一些。</p>

<p>那个年龄，难免争强好胜又敏感轻狂。</p>

<p>我满身带刺，爱调侃人并且一旦出击必定使用mangle，然后在目标的伤口上有条不紊保质保量地喷洒食盐、孜然和胡椒面。</p>

<p>因为靠太近，我这毛病肯定也有伤到卫豆的时候。</p>

<p>可以把球从自己禁区踢到对方弧顶的卫豆没有手起刀落为民除害，完全是因为他的宽厚。</p>

<p>卫豆的宽厚既体现在客观的物理数据上，也表现在他待人接物的各个维度里。喜庆祥和，吉祥三宝如他，连背过身骂人都注意五讲四美轻拿轻放。</p>

<p>但这当然是假象。</p>

<p>他和我在一起的时候，指点江山挥斥方遒，看不惯的人抓一半充军就可以打下半个欧洲。</p>

<p>只是很多人没办法看出来他个性坚硬自尊心又强，心思细密得像个姑娘。</p>

<p>比如当时球队的人喜欢叫卫豆食神。因为外出比赛一起吃饭，卫豆经常表演风卷残云后依然防水透气不起球步伐轻盈走位流畅的神功。</p>

<p>大伙其实并无恶意，但我能感觉出来他并不喜欢这个称号。这种脸上散步心里跑马的选手，在我这种已经以攻代守以便广筑高墙的人面前，道行太浅。</p>

<p>我问过他为什么不让大家换种方式叫他，比如，“卫豆”。卫豆说，“没必要，随便应付一下就行。妈的你别这么叫就可以了”。</p>

<p>时间很快就到了大四，我上了研，卫豆毕业去了绵阳九院做神秘的科研，那个一天到晚在身边的胖子渐渐变成了gtalk上叫vivid的ID。</p>

<p>这ID和卫豆确实很称，不论看起来读起来还是敲起来，都是那么生机盎然。</p>

<p>两年后大学生联赛决赛阶段凑巧在绵阳踢。浙理工嫌比赛地方太远弃权，浙大以全省第二身份替补出战。卫豆到现场来观摩了我们被雇佣职业球员参赛的学校轮番凌虐，并在赛后给予了我失利者应得的温暖拥抱。</p>

<p>因为是大学生涯最后一届比赛，我心情并不太好，就有些嫌弃他显然已经41D以上的胸膛。所以合影的时候我们像两个文明人一样相拥而立。</p>

<p><img src="http://lenciel.cn/downloads/images/2015_10/vivid.png" title="Don't touch me..." alt="vivid" />
<em>2006年绵阳 卫豆和我</em></p>

<p>后来我也工作了，假期虽然都会约出来见见，但我们再也没有机会在球场上碰面，也就失去了合影和拥抱的理由。</p>

<p>生机盎然的卫豆是我们这群人里面最早结婚的。</p>

<p>生机盎然的卫豆是我们这群人里面最早有小孩儿的。</p>

<p>生机盎然的卫豆去年告诉我说，工作了这么久，今年总算有积蓄了。</p>

<p>生机盎然的卫豆在今年年初我自己的公司被某运营商拖欠合同款自己垫着钱发工资的时候，帮我联系过项目。</p>

<p>那次是在软件园布衣客栈楼下的星巴克，还叫来了C区上班的老弟。</p>

<p>我们像中学时的某个午后一样，东倒西歪地坐成一排，聊着，笑着，骂着。</p>

<p>他说别担心，困难很快就会过去的。</p>

<p>他说还是你们自己创业的好。我们有个同事本来在九院跟着院士读博，最近自己交了赎身费，跑到一个创业公司去干去了。</p>

<p>后来我做了方案去他们单位讲评。在那间接待外来人员四面无窗房上走水的屋子里，全靠卫豆傻笑和电脑发热的双重除湿，我的小黑屋幽闭症才没有犯。</p>

<p>世界有时候是公平的，不久我们打赢了官司拿到了钱。我的公司也被现在的公司收了。</p>

<p>世界有时候是很小的，他那个交了赎身费的前同事，变成了我的同事。</p>

<p>所以华力突然给我说他听说卫豆病了的时候，我很意外。</p>

<p>那天晚上没怎么睡着，耳机里一直响着《热河》，脑子里一直想着卫豆。</p>

<p>第二天给他打电话没人接，过了几天他给我打了回来。</p>

<p>我问他怎么回事，他说有点儿倒霉，出差胃疼做个胃镜，没想到是这种东西。</p>

<p>我问他怎么不告诉我，他说知道你们创业的人忙。</p>

<p>然后我们胡扯了一通，他说了什么我其实没有听进去，脑子里面嗡嗡作响，想的都是别的事情。</p>

<p>我想到了他中学喜欢了很久的女生。因为那个女生长得像许茹芸，卫豆听了好几年《如果云知道》的卡带，整个大学都没有谈过恋爱。</p>

<p>我想到了我们一起坐火车回家，因为需要转车总是没有座位得挤上去再补票。他提着我们两个人的行李，迅猛地跨上火车，然后伸开手把门堵住，让我从他腋下钻进车厢。</p>

<p>我想到了他结婚的那天，我们要他抱着老婆下楼。他说这算个屁，抱着她我可以围着进城的那个大转盘跑三圈。大概因为他真的跑了三圈，让广汉市长感觉到了转盘的局促，所以把它拆了。</p>

<p>我想到了他说你一定要多给你孩子录像，以后看会非常有意思，而照相并没有什么卵用。</p>

<p>我想到了还有没有朋友像卫豆一样，他夸你你就真得干得不错，他骂你你就确实表现不行。</p>

<p>我也想到了死亡。</p>

<p>电话最后我问他你什么时候再来成都。</p>

<p>他说很快就要来化疗，来了肯定告诉你。</p>

<p>挂了电话我知道他来了成都肯定不会告诉我，就让现在成了同事的他前同事跟他们科室的人打了个埋伏。</p>

<p>昨天埋伏的人通知我们，他在成都化疗。</p>

<p>见到他的时候，他瘦了一圈，却仍然壮硕。</p>

<p>我想夸他一句你这样帅多了，但是比他瘦得更多的他母亲站在病床边，我没说出口。</p>

<p>他看着我呆呆地看着他，说，“看啥？你现在还是弄不赢我。”</p>

<p>“从来不可能有谁弄得赢你”，老弟笑着拍了拍他的手臂。</p>

<p>然后我们开始山南海北地聊起了天。</p>

<p>和他看得上眼的人在一起，他仍然是那么健谈。</p>

<p>如果不是躺在病床上，他看起来就像是一个健身成功的励志男模。</p>

<p>如果不是在病房里，我们聊天的样子就像是一次欢快的同学聚会。</p>

<p>我在欢声笑语里还是找了个空当偷偷溜出去问了他的主治医师。</p>

<p>然后又故作镇定地回去聊了一个多小时，来了个护士进房间说，到点儿了你们得走了。</p>

<p>他坚持要送我们到电梯口。</p>

<p>电梯门关上的时候，我们四目相对，卫豆的眼神里面总算是流露出不安和无助来。</p>

<p>回家后只要脑子空转，我就不断地被那个眼神拖回那个电梯口。</p>

<p>我们生命中会遇到很多美好的人。</p>

<p>他们有的匆匆地来，匆匆地走。</p>

<p>他们有的不停地来，不停地走。</p>

<p>他们有的待了好久，但还是要走。</p>

<p>但不管什么时候他们走开了，他们给我们的影响都会一直留在那里。</p>

<p>而正是他们给我们的那些影响，让我们成为了今天的样子。</p>

<p>卫豆，我还没有和你好够。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于工作与生活]]></title>
    <link href="http://lenciel.cn/2015/10/the-solution-of-work-life-balance/"/>
    <updated>2015-10-04T00:06:16+08:00</updated>
    <id>http://lenciel.cn/2015/10/the-solution-of-work-life-balance</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/2015_10/dilbert_work_life_balance.png" title="Don't touch me..." alt="work life balance" /></p>

<p>前面说了，<a href="http://lenciel.cn/2015/10/the-myth-of-work-life-balance/">Work Life Balance的神话其实并不靠谱</a>。</p>

<p>毫不奇怪，在本座自己发觉这点之前，我的家人们早就发现了这点。所以当柳青患癌这样的消息一出来，总会有人跟我说，“你看看，难道你觉得她这样值吗？”</p>

<p>有趣的是，出了这样的消息，创业的人特别是老板们也会问同样的问题：“你觉得，她这样值吗？”</p>

<p>其实这样的消息真会让我有挺多想法的，所以不如在这里整理一下，以便今后不管是谁有了三长两短，或者是自己真的不幸中招，都可以直接拿出来交卷。</p>

<p>简单地回答那个问题：我不知道值不值，这是她自己才清楚的事情。</p>

<a name="L.................."></a>
<h2>勤奋不会杀人</h2>

<p>我记得看过卡斯帕罗夫和卡尔波夫对局之后的一个采访，记者问他们除开象棋之外有什么爱好。</p>

<p>你们都见过那些跑文体档的记者，这也算是个常规的问题。结果卡尔波夫憋了半天，说，“集邮”。</p>

<p>然后卡斯帕罗夫憋了三个半天，说，“没有”。</p>

<p>这并不是个例，很多职业选手他们把自己的全部身心都放在了自己的项目上。</p>

<p>再比如我很喜欢的作家村上春树。有人问他为什么一定要关了酒吧去写小说，他的回答是：</p>

<blockquote>
<p>无论做什么事儿，一旦去做，我非得全力以赴不可，否则不得安心。将店铺随意交托给某个人，自己躲到别处去写小说，这种讨巧的事情我做不来。竭尽全力埋头苦干，还是干不好，就可以心安理得地撂开手了。然而，如果因为模棱两可、半心半意而以失败告终，懊悔之情只怕久久无法拂去。</p>
</blockquote>


<p>很多心灵鸡汤会把这些误读为”你一定要找到自己感兴趣的事情”，这其实很容易让人跳进火坑。从接触到感兴趣并不难，比如踢球，比如唱歌，比如写作，比如编程，很多人接触了会觉得很有兴趣。然而从爱好变成职业，就需要反复枯燥的练习并且和其他人进行竞争。如果你为一件自己仅仅是感兴趣的事情就调转了职业方向，很多时候都会感到后悔莫及。</p>

<p>要坚持下来真正熬出头，需要极度勤奋和高度专注，即便你的目标不是变成顶尖高手（那么大概不需要<a href="http://baike.baidu.com/view/3244949.htm">10000小时</a>），过程也会非常苦。</p>

<p>但熬过就是另一番天地。</p>

<p>所以看到柳青或者李开复的新闻，嘴上送着祝福，私下却暗自庆幸”你看我平平淡淡多好”的心态最好别有。患癌这事情面前，我国基本还是人人平等（没仔细研究过，记得主要是环境、食品和生活习惯诱发的基因里面的坏道造成的），治起来却是天壤之别：据说中国人要让自己全家所有人遇到大病时都能得到良好的治疗并体面地死去，大概需要2000万。我相信这对于柳青或者李开复来说问题不大，而“平平淡淡”的你路还很长。</p>

<p>还是放心赶路吧：勤奋根本不会杀人，相反，我认识的大多数勤奋的人，都是健康且快乐的。</p>

<p>因为他们不蛮干。</p>

<a name="L.................."></a>
<h2>勤奋不是蛮干</h2>

<p>什么是蛮干呢？</p>

<ul>
<li>没有主观能动性只是应付时间的行为是敷衍，这样的人很可恶。</li>
<li>有主观能动性但只会堆砌时间的行为是蛮干，这样的人很可怜。</li>
</ul>


<p>在我看来996上班制度或者规定每周上班80个小时就是鼓励蛮干。</p>

<p>看看阿里的人<a href="http://www.zhihu.com/question/23272060">自己怎么说996</a>你就知道，如果你鼓励的是蛮干，那总是蛮干都得不到：很多人只是敷衍而已。</p>

<p>这件事情曾经给了我很大的困扰。</p>

<p>工作上我一直被给予了很大的自由度，我也会给大家很大的自由度。</p>

<p>老板对一切都非常满意，但却有一个心结：集体加班不够多。</p>

<p>他常常也不好直说（因为实际效果上看目前是比以前输出高了不少），经常是在时机合适的时候提点一下我：“我们今天开会出来公司里面空空荡荡的”或者“过去某某是经常在公司干到12点以后的”。</p>

<p>我能理解他，他在著名的H公司干了十几年，管了几千人的研发团队。现在出来创业，他和其他几个管理层也确实很拼。市场突围，产品研发的压力这么大，难免从自己的办公室走出来看到空空荡荡的屋子有些不开心。</p>

<p>但我也确实没法同意建立打卡考勤或者集体加班这样奇怪的制度。</p>

<p>花更多的时间就可以多做出来点儿什么的想法，对研发团队是不太有效的。</p>

<p>就算是读书的时候，也总是有一些人你看他/她花的时间不多，但就是考试考得好。</p>

<p>反过来，也总是有一些学生，花再多的时间都没有用。</p>

<p>如果你稍微仔细看看后面这类学生为什么会有这样的处境，总会发现老师、学生和家长这三个角色至少有一个人心思已经不在提高成绩这件事情上了：可能是老师嫌学生烂，可能是学生嫌老师烂，可能是家长嫌学生烂&hellip;可能是每个人都觉得其他两个很烂&hellip;</p>

<p>研发需要看的是输出，是把问题搞定的能力，而不是谁在公司完成了三餐、球类运动、热门新闻追踪和存在感建设。</p>

<p>我见过很多想弯道超车的公司，搞运动般的加班，结果导致动作变形，连应该有的成绩都没法做出来。</p>

<p>这并不奇怪。</p>

<p>你去软件园地铁站门口随便拦住那帮背双肩包的，问问他们自己觉得质量不错又能上线的项目哪个是靠加班加出来的。</p>

<a name="L........................"></a>
<h2>所以工作和生活？</h2>

<p>所以工作和生活的节奏，是很私人的事情。</p>

<p>这意味着两方面的意思：对于个人来说，你应该保证自己有选择它的权力。而对于组织来说，不应该对个人进行过分的干涉。</p>

<p>组织和个人努力的方向，都应该是让有效时间内输出最大化：说简单一点儿，即便有必要加班，目的都应该是为了能尽早达到按时下班，而不是在公司里面形成一种”多花点儿时间就能做出更多东西”的错觉。</p>

<p><img src="http://lenciel.cn/downloads/images/2015_10/no_one_wants_more_work.png" alt="" width="420" height="294" align="left" style="margin:5px"/></p>

<p>拿我个人来说，很长一段时间以来都很忙，每周工作时间常常超过80个小时。虽然也知道<a href="http://blog.sina.com.cn/s/blog_5d7e3c150100h2c8.html">人生是玩5个球</a>之类的道理，但却并不觉得自己的选择有什么问题：目前确实有那么多事情需要处理，自己又很愿意花时间去处理它们。</p>

<p>旁边这张图是表达，有很多道理我是知道的。只不过认定了工作和生活没法兼得，所以我准备串行处理：工作的时候疯狂工作，生活的时候好好生活。这样我既不会遗憾该勤奋的时候不够勤奋，也不会觉得什么像样的生活都没有过过。</p>

<p>我从小就是这样：如果自己想做的事情，在喜欢的时间，就希望尽全力的做个痛快。而如果是在不对劲的时间逼迫我，再喜欢的事情也不想去做。</p>

<p>所以我崇尚的节奏是年轻时（我还年轻么？），工作上勤奋一些，生活上享受一些。人上了年纪，有很多乐趣还可以慢慢享受：比如看书、旅行等等，有很多乐趣就已经不复存在：比如工作、美食、踢球和别的什么羞羞的乐趣（这里是不是可以另外开一篇讨论&hellip;）。</p>

<p>这样的选择非常私人，很可能是错的。但在组织的层面，用输出来衡量大家产出，比一切别的制度都重要，这肯定是对的。</p>

<p>因为这样的制度是真正公平的。</p>

<p>很多厉害的人在选择工作、领导或者团队的时候，能分辨和规避那些糟糕的选择，但往往会搞不清nice和fair谁更重要。</p>

<p>提醒一下，nice是奴隶制时期奴隶主常常玩的把戏，fair才是商业社会运作的根基。</p>

<p>不分青红皂白要求你加班，到了下班时间迫于气氛大家都不好意思走的公司当然去不得。
但公司对大家都不错，经理对大家都不错，这样的地方对真正有追求的人也未必是好去处。</p>

<p>反过来，那些面试的时候会说“我们加班非常多哦”的公司，未必就不能去。如果他们的考核方式是公平的，做的东西你也感兴趣，加入的时间看起来又比较正确，那很可能比去一家茶水间堆满了糖果前台比你历任女朋友都漂亮的公司要明智得多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Work Life Balance的神话]]></title>
    <link href="http://lenciel.cn/2015/10/the-myth-of-work-life-balance/"/>
    <updated>2015-10-02T22:35:05+08:00</updated>
    <id>http://lenciel.cn/2015/10/the-myth-of-work-life-balance</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/2015_10/work_life_balance.jpg" title="Don't touch me..." alt="work life balance" /></p>

<p>最近有几个事情让我在这方面想了很多。</p>

<p>首先是那篇在业界掀起轩然大波的关于<a href="http://www.nytimes.com/2015/08/16/technology/inside-amazon-wrestling-big-ideas-in-a-bruising-workplace.html">Amazon高压管理制度</a>的《纽约时报》封面文章。由Jodi Kantor和David Streitfeld耗时6个月调查了100名Amazon离职和在职员工的这篇文章，细数了Amazon企业文化里面充满达尔文主义味道的部分：</p>

<ol>
<li>末位淘汰，并且建立通道让员工将身边同事的表现秘报给共同的主管</li>
<li>对流产或者患癌员工不但不给予关心，还进行低绩效考评或者工作上边缘化</li>
<li>每周超长的工作时间，经常有凌晨的邮件，并且要求及时处理</li>
</ol>


<p>其中一个叫Molly Jay的前Kindle项目组成员讲述的故事我印象最深：她说因为要照顾患癌的父亲，<em>一周不能达到80个小时以上的工作时间</em>，绩效考评就迅速下滑。甚至在父亲临终前希望晚上和周末少一些加班，不但被主管拒绝，甚至当着她的面说她&#8221;是个麻烦&#8221;，最后她选择了离开。</p>

<p>然后是周三凌晨看曼联队的欧冠球赛，解说聊起范加尔对续约还在犹豫时说：64岁的范加尔对媒体坦言希望仔细考虑一下是否继续执教球队，因为自己陪家人的时间太少了。而就在之前，65岁的温格因为类似的原因，<a href="http://www.chinanews.com/ty/2015/09-24/7541283.shtml">和自己59岁的太太离婚了</a>。</p>

<p>最后是<a href="http://36kr.com/p/5038027.html">柳青患癌的消息</a>刷爆了创业圈之后终于又刷爆了朋友圈。含着金钥匙出生，哈佛毕业，投行背景，拼到滴滴总裁，却年纪轻轻遭此恶疾，比之前李开复患癌的消息更让人觉得唏嘘。</p>

<a name="L.........Work.Life.Balance"></a>
<h2>说好的Work Life Balance</h2>

<p>在包括四大、投行、建筑、广告、传媒等等需要打鸡血的职业里面，程序员大概算蛮幸运的：因为我们这行大多数公司还是比较推崇<a href="http://www.forbes.com/sites/kathryndill/2015/07/17/the-best-companies-for-work-life-balance-2/">Work Life Balance</a>的。</p>

<p>一方面是因为在这个行业，顶尖人才永远是卖方市场，供不应求。为了留住人才，公司纷纷开出更人性化的福利和政策。</p>

<p>上班与休假方面的规定就是一面镜子。这些年本座眼看着无限制的年休假从少量公司的福利慢慢成为硅谷创业公司的标配，更有Netflix豪迈的<a href="http://edu.qq.com/a/20150806/020001.htm">新生儿父母一年带薪产假</a>。这些政策都是有数据支撑的：Google的女员工带薪产假延长至22周后离职率下降了50%。</p>

<p>另一方面是一些广为人知的道理又被大家抬出来温习。</p>

<p>包括这次Amazon的新闻一出，先后参与了Facebook和Asana的创建，31岁就已经攒下79亿美刀身家的<a href="http://www.forbeschina.com/review/billionaires/home/106757.shtml">达斯汀·莫斯科维茨</a>就发了<a href="https://medium.com/life-learning/work-hard-live-well-ead679cb506d">一篇雄文</a>表达自己的态度：如果能够再来一次，他希望自己在创建Facebook的过程中能够过得轻松一些。</p>

<p>文章里面提到的那个一周不能工作超过40个小时的理论，我<a href="http://lenciel.cn/2013/05/the-myth-of-productivity/">之前也唠叨</a>过。实际上这个结论福特在1926年就调查得出了，并且开始<a href="http://www.history.com/this-day-in-history/ford-factory-workers-get-40-hour-week">实施在自己的汽车厂</a>。</p>

<a name="L.........Work.Life.Balance......"></a>
<h2>说好的Work Life Balance呢？</h2>

<p>然而别人家的公司与你的公司总是有差别的。</p>

<p>如果没有这篇Amazon内幕以及之后引发的世界范围内的大吐槽，广大的天朝码农经常都沉浸在”为什么受伤的总是我“的悲伤气氛中。</p>

<p>没错，移动互联网火热之前，国内IT企业标杆多是华为。大家都狼得没边儿，猛打猛拼。现在BAT火了，也不忘贡献<a href="http://baike.baidu.com/view/12867952.htm">996</a>为代表的各种疯狂制度。</p>

<p>过去我要安慰大家，只好说其实不仅仅天朝这样：从我经历过的项目来看，东亚和美国的IT人士们都非常非常苦逼。闲到十八摸这种程度，很多美帝的工程师只要我在线他就在线；之前M记的韩国大老板说在三星工作的时候，公司在办公室边上修了很多公寓以便员工不回家直接进去续命；日本台湾的就更不用说了&hellip;</p>

<p>现在好了，发现其实全世界大多数从业者的日子都没什么大的区别（注意我这里说的从业者不包括各路水货混子嘴炮流选手），真是给了本座莫大的安慰。</p>

<p>还在M记的时候，<a href="http://lenciel.cn/2012/03/do-not-burn-out-yourself/">我就挺关注burnout</a>的，因为自己确实有过经历，所以很怕带的团队里有小伙伴中招。</p>

<p>出来创业为了大家不搞出内伤，我们不打卡不搞绩效不规定上下班时间不限制休假长度。</p>

<p>但即便如此，圣杯般的Work Life Balance并没有发生：至少本座没有体验到。</p>

<p>事到如今我终于可以认定它是不可能做到的：从事实上看如此，从道理上讲也应该如此。</p>

<p>工作和生活是两件需要同一个主体，你，投入身心的事情。你可以把两件都做得马马虎虎，你可以把其中一件做得不错另一件做得挺糟，你也可以把其中一件做得出类拔萃另一件完全不做。但你没法两头都做好，因为没有平行世界。</p>

<p>觉得自己都能做好的人，一定是参考的样本太过于局限：很多时候你需要和自己差不多资质的选手比较，才能发现更多的专注意味着什么。而实际上大多数真正做好了的人，资质比你更好并且比你专注多了。</p>

<p>所以呢？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[好的引导流程胜过10个新功能]]></title>
    <link href="http://lenciel.cn/2015/06/the-next-fucking-new-feature/"/>
    <updated>2015-06-26T13:55:49+08:00</updated>
    <id>http://lenciel.cn/2015/06/the-next-fucking-new-feature</id>
    <content type="html"><![CDATA[<p>SNS的有趣之处就在于，经常你会看到一些话，让你对着屏幕点头不已。比如下面这句：</p>

<p><img src="http://lenciel.cn/downloads/images/2015_06/the_next_new_feature.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>Joshua Porter的这段话看起来是吐槽，但又实实在在的发生在参与创业大潮的你我身边。在2000年互联网泡沫破灭之前，那些最终幻灭的高科技公司的发展轨迹无非是：</p>

<ol>
<li>用一个美好的想法或者概念融资</li>
<li>花9-12个月的时间推出一个产品</li>
<li>花大把的PR费用去做推广和宣传</li>
<li>发展无法满足预期</li>
<li>花6-9个月推出产品2.0版本</li>
<li>重复#1-#5，直到烧完所有的融资</li>
</ol>


<p>在2000年之后，经过这十来年的发展，业界总结了很多的经验教训。我们在团队里面推行了敏捷、TDD等各种各样的方法论，我们在架构上进行了从monolithic到microservice的演进，我们的部署开始容器化并且都是Devops来完成了。</p>

<p>所有的人都充满信心的宣布，我们现在通过迭代，能够以较低的成本快速推出新版本了。然后，当你观察身边那些高科技公司的时候你发现：</p>

<ol>
<li>用一个美好的想法或者概念融资</li>
<li>花3-6个月推出一个应用（web app、手机app或者干脆是基于微信开发的app）</li>
<li>提交到各种应用市场然后发动PR攻势</li>
<li>发展无法满足预期</li>
<li>买关键字、买量、买推广</li>
<li>发展无法满足预期</li>
<li>花3-6个月推出应用2.0版本</li>
<li>重复#1-#7，直到烧光融资</li>
</ol>


<p>Hmmm&hellip;所以也难免有人会说这其实没有什么不同嘛：</p>

<p><img src="http://lenciel.cn/downloads/images/2015_06/chuangyeban.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>然而无论预警者的声音再大声，作为创业者这种&#8221;启动-失败-再启动&#8221;的反复试错的精神都已经成为了我们的信条。的确，就跟你打开一张刮刮乐发现没奖时一样，如果我们做出来的项目没有人用，那么再来一次无疑是最轻松最诱人的选择。</p>

<p>然而如果你仔细看数据的话，会发现下一次失败是那样的必然。</p>

<a name="L.............................."></a>
<h1>数据：冷启动后的留存</h1>

<p>下面这个曲线是从业者们最不愿意面对的曲线，展示了从流量导入到一个月后可怜的留存数据：</p>

<p><img src="http://lenciel.cn/downloads/images/2015_06/the_tragic_curve.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<ul>
<li>1000个UV访问</li>
<li>200个用户注册(20%)</li>
<li>160个用户完成注册(80%)</li>
<li>次日上线40%</li>
<li>次周上线20%</li>
<li>次月上线10%</li>
</ul>


<p>也就是说30天后，日活用户大概是2%左右：而且你还不要觉得这数据很惨。如果去搜集真实产品的数据来看，除开IM类产品，大多数的产品甚至完不成这样的数据。</p>

<p>所以，做互联网产品首先要接受一个现实：你多半比拿破仑派去<a href="http://www.douban.com/note/207589154/">入侵俄罗斯</a>的大军要<a href="https://en.wikipedia.org/wiki/Grande_Arm%C3%A9e#1810.E2.80.931812">崩得更快</a></p>

<a name="L..............."></a>
<h1>加新功能？</h1>

<p>当悲观的数据被端到面前的时候，决策层首先要明白，大多数时候加入任何新功能都不能把曲线扳回来。最容易出现的错误就是：</p>

<ol>
<li>加入的功能不是服务于大多数人：特别是如果加入的功能仅仅服务于已经注册或者已经使用过产品的用户，而不是目前还不是用户的或者刚刚注册为用户的人群</li>
<li>加入的功能没有体现在大多数人能感知的地方：特别是如果加入了新功能，但是在用户进行注册或者使用的流程里面没有提示他们，让他们根本感知不到</li>
</ol>


<p>这些错误之所以很容易犯，是因为我们作为产品设计和开发的人，很愿意把时间花在&#8221;很高级&#8221;或者&#8221;很酷&#8221;的功能上。而这些所谓的增加用户&#8221;粘性&#8221;的高级功能，如果你看看上面那条曲线，你会发现大多数是没有任何意义的：一个在用户使用产品第七天才会用到的功能，对于在第四天之后就不再出现的用户来说，等于没有。</p>

<p>其实在产品设计里面有一个概念是所谓的&#8221;engagement wall&#8221;。那些需要用户关联支付渠道或者累积经验值才能解锁的功能，或者是深度使用才能挖掘出来的功能，被认为是藏在墙后面的。比如微信上面的拍摄分享视频，发送红包等等。那些可以通过简单的投入就能让用户体验到价值的功能则被认为是在这堵墙外面的。比如微信上浏览好友的朋友圈，点个赞等等。把什么样的功能作为吸引用户的糖果放在面上，把什么样的功能放在墙里面藏着并激励用户来解锁它们，是需要经过精心设计的，但有一个规则不会变：那些放在墙里面的功能，是没法改变曲线的走势的。</p>

<a name="L......................................."></a>
<h1>如何选择下一个新加的功能？</h1>

<p>首先想好要不要挑。</p>

<p>如果产品还在初期，你可能需要做的是精细打磨现有的功能，而不是加入新功能。新功能，特别是我们自认为可以&#8221;扭转乾坤&#8221;的新功能，往往意味着巨大的风险，巨大的投入，巨大的预期，以及极大的失败可能性。你需要掂量自己和团队是否能够承受得住。</p>

<p>决定好要挑？那就先去全面深入地了解你面对的问题域和你的用户的所思所想，搜集那些真正能够带来转化率的功能，然后：</p>

<ol>
<li>做那些能够影响最多人的功能：成功的产品会把最多的时间花在那些非用户或者是随便来玩玩的用户使用的功能上，比如<a href="https://www.useronboard.com/how-slack-onboards-new-users/">Slack的引导流程</a>，比如<a href="http://blog.leadpages.net/landing-page-trends/">Medium的访客评论</a>。</li>
<li>做那些能够带来转化的功能：特别是在精力和人力有限的时候，做影响曲线前半段走势的功能：注册、登录、引导等等，特别是首次登录后的引导。不同的产品类型，需要引导的方向是不一样的。测试平台上，你要引导用户顺畅的完成一次测试；SNS你要引导用户添加好友，完成第一次对话或者分享；云服务，你要引导用户完成机器创建、带宽选择、域名解析等等动作，让他可以使用你的服务。根据你的业务，给用户一个舒适度极高的引导流程，带来的转化率的提升是非常高的。</li>
</ol>


<p>然后？</p>

<p>Let&rsquo;s keep our fingers crossed and God bless us&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django其实不是MVC]]></title>
    <link href="http://lenciel.cn/2015/03/django-is-not-that-much-mvc/"/>
    <updated>2015-03-30T11:36:24+08:00</updated>
    <id>http://lenciel.cn/2015/03/django-is-not-that-much-mvc</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/2015_03/mvc.jpg" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>很多时候<a href="https://www.djangoproject.com/">Django</a>都被称为是一个MVC框架 — <code>Model-View-Controller</code>。这样说的人要么就是已经熟悉过其他的MVC框架，所以看到Django有自己的Template系统和<code>views.py</code>来放各种逻辑代码，就想当然的认为Django也是；要么就是其实没有真正实践过Django，从各种其他的错误文档里面看到或者是听说的。</p>

<p>MVC框架，是针对<code>状态</code>的。为了明白这个，我们假设你是在编辑一个图片：</p>

<ul>
<li>你得在内存里面保存这张图片 (Model)</li>
<li>你得在屏幕上显示这张图片 (View)</li>
<li>你得有办法让用户改变图片 (Controller)</li>
<li>当用户改变图片后，你得更新显示：<code>Controller</code>通知<code>Model</code>更新状态，然后<code>Model</code>通知<code>View</code>刷新显示（最好是通过某种pub/sub机制，让View和Model之间是没有耦合的)</li>
</ul>


<p>MVC框架主要是管理状态，让MVC三者是同步的：这三部分同时在内存（可能跑在不同的线程甚至进程）里，有各自的状态，相互之间进行交互，让变动同步到各方。</p>

<p>Django的<code>Model-View-Template</code>有很大的不同。</p>

<p>首先是没有状态。大多数的HTTP GET请求，拿到的数据库里面的数据，都被当成是immutable的不可重入的输入，而没有状态。而在一般的Web应用开发中，HTTP上有状态的交互可以通过：</p>

<ol>
<li>修改保存在服务器端数据库里的数据</li>
<li>修改保存在客户端的数据（比如cookies）</li>
</ol>


<p>共同来完成。因此一次状态的变化并不是在一个page的view里面保持的：状态一半放在当前的page和cookies里面，一半放在session数据库里面。</p>

<p>但是处理HTTP请求的时候，Django的MVT是完全无状态的。这里首先要说明的是，<code>views.py</code>这个名字本身是有一点儿误导的，因为给人的感觉是它只做&#8221;读&#8221;操作而不去&#8221;写&#8221;数据库（也就是说只是处理GET请求而不是POST请求）。但实际上<code>GET/POST</code>请求都会被放在<code>views.py</code>里面处理，所以更好的名字其实应该是<code>handler.py</code>：大多数Django的REST框架都是这样命名的。</p>

<p>处理GET请求的时候，如前面分析，本身就没有状态，而只是对输入的请求和服务器返回的数据进行展示。其次，当涉及数据修改的POST请求时，Django的处理其实是非常类似于老式的Web应用的。</p>

<p>所谓的老式的Web应用是指，过去的网站上当后台的数据发生变化的时候，其实是需要用户在前端自己点击刷新按钮来刷新的（最典型的刷新按钮就是浏览器里面那个刷新按钮）。这个动作背后发生的事情其实是：</p>

<ol>
<li>除开标识当前是哪个用户在浏览哪部分数据的信息（当前的url，用户的identity等等cookies里面的数据），把浏览器里面其他的状态都丢弃</li>
<li>发起一个全新的请求，获取所有的数据，再次重建页面</li>
</ol>


<p>说Django和老派的Web应用类似，是指一旦数据变更（比如一次SQL的INSERT或者是UPDATE），你需要返回一个redirect再做一次GET：&#8221;有数据的状态变化了，让我们重头再来一次&#8221;。</p>

<p>这也是为什么<a href="https://code.djangoproject.com/ticket/17">Django的ORM里面是没有一个&#8221;identity mapper&#8221;的</a>。<code>Model</code>处理状态变化的办法就是完全的无视它：当你觉得数据改变了时，直接重新获取一次数据重建页面。</p>

<p>这和大多数经典的MVC框架（比如AngularJS）是和这完全相反的套路：在设计上做了很多事情来避免&#8221;从头再来&#8221;，而是通过建立MVC之间的消息机制，来通知各方的状态变化，做到同步。</p>

<p>MVC还有一部分是关于如何分隔代码。如果你把MVC当成：&#8221;把存储数据，显示数据和处理数据的代码分离&#8221;，那Django的设计的确是符合这个模式的。</p>

<p>但是实际上这是一个粒度非常粗的描述，因此就把Django说成是MVC的其实会带来很多误会。</p>

<p>比如，Django是基于HTTP的，所以理解它的MVT，最好的办法就是实践它：看它的<code>view</code>里面是如何处理一个HTTP的请求并返回一个HTTP的response。如果你脑子里面有其他的不是基于HTTP这层次的MVC框架，用来类比学习Django，你大概会哭&hellip;</p>

<p>其次，Django的框架，它的app里面文件的组织和使用，和很多别的MVC框架也是不同的。</p>

<p>最近有个特别火的日志是Hynek Schlawack的<a href="https://hynek.me/articles/know-your-models/">Know Your Models</a>。它是基于经典的MVC框架来假设，实际上Django并不是适用于这套假设的。</p>

<p>比如他觉得应该有<code>pure</code>的models，从而把M、V、C分离开做到可以独立进行处理。</p>

<p>但其实Django里面很多app都仅仅是数据库的简单wrapper。这种情况下其实没必要有<code>pure</code>的M，然后再加上一堆V和C。其实这是Django的美好之处：以<code>admin</code>这个app为例，它的设计初衷就是要在数据库上面封装一个足够简单的编辑层，以致于95%的代码都是可以自动生成的。</p>

<p>把<code>Model</code>通过API暴露出来给<code>View</code>用，当然也是正确的思路。但我自己写代码的时候，就很喜欢把所有的直接调用<code>.filter()</code>的代码都放到<code>models.py</code>里面，这样一来<code>models.py</code>就是独立可测的。</p>

<p>并且，如果你写了一个<code>pure</code>的Model，而把逻辑代码从Model里面抽取出来放到别的地方去，那你在<code>admin</code>和其他<code>ModelForms</code>里面就没法重用了。</p>

<p>总的来说，在Django里面，model在创建的时候，就是有业务逻辑贯穿在里面的。如果你每个<code>customer</code>只能有一个<code>email</code>，那么你的model就得包含这个限制。如果你要改变这个规则，那么就不仅仅是MVT的某一方要改，而是从上到下都得修改。</p>

<p>甚至我个人认为MVC里面说的&#8221;逻辑和数据分离&#8221;这种思路本来就挺奇怪的。除非你把数据存储当成<code>key-value</code>这样的东西，那么你怎么可能在一个不是为了某个业务逻辑设计的数据库上开发出一个应用呢？</p>

<p>数据就是数据，是<code>gloabl data</code>而不是<code>gloabal state</code>。在整个HTTP请求被处理的过程中，它被认为是没有变化的：如果有，就应该再发一条请求来取最新的数据再去重画。</p>

<p>当我们开发Django的应用时，为了满足实际上的业务逻辑的需要，数据库的schema一般一直在变。这样Django的model就可以作为API的一个良好的基石，把往上走的事情做得尽量简单。</p>

<p>这涉及到软件开发里最基本的一个设计要点：你把数据库仅仅当成应用里面的持久化层，还是当成应用的一部分，甚至是最重要的一部分。</p>

<p>我其实一直偏向于后者：喂，把像Postgres这样RDMS当成一个持久层未免也太不尊重了吧！所以在使用Django设计app的时候，不但要思考&#8221;model layer&#8221;，还要综合考虑其他数据库可以做的事情：比如contraint checking, transactions, triggers等等。同样，在测试的时候也不仅仅是测试那些字段和model之间的关系，而是要考虑对业务逻辑的测试。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile and Scrum, the Love Story]]></title>
    <link href="http://lenciel.cn/2015/03/agile-and-scrum/"/>
    <updated>2015-03-07T03:05:36+08:00</updated>
    <id>http://lenciel.cn/2015/03/agile-and-scrum</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/2015_03/minime.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>本次吐槽献给Scrum Master们。毕竟了解了软件社区其实对Agile和Scrum的情绪已经有些像走到结尾的爱情故事，也许可以让大家在工作中不要把自己和大家SM得太惨。加上我们进新公司之后也在推行敏捷流程，不如整理一下本座对这套东西好鬼复杂的情绪&hellip;</p>

<p>Agile，中文翻译为“敏捷”，是在90年代逐渐引起广泛关注的一系列新型软件开发方法的总称。其中“敏捷”的语义主要是指应对快速变化的需求。</p>

<p>敏捷思想发展到顶峰的标志是<a href="http://www.agilemanifesto.org/history.html">Agile Manifesto</a>的正式定稿。当时大概谁也没有想到，2001年二月这群敏捷方法发起者和实践者在美国犹他州雪鸟滑雪圣地的一次聚会后的产物，能在软件工程和方法论范畴独领风骚这么多年。</p>

<p>但敏捷再好，它毕竟是人写的不是神写的，也会随着技术的不断革新慢慢变得过时。类似的，<a href="http://en.wikipedia.org/wiki/Scrum_(software_development">Scrum</a>这种用于实践敏捷的开发流程虽然也大红大紫了这么多年，但它也暴露出了不少缺陷。</p>

<a name="L......................................."></a>
<h2>瀑布文档过多，敏捷文档过少</h2>

<p>世界<a href="http://book.douban.com/subject/1867642/">变平了</a>之后，大多数的公司团队是分散在多处的。即便是TestBird这样没有超过100人的公司，办公地点也分布在多个国家和地区。而在编写Agile指南的2001年，<del>本座还细皮嫩肉</del>，Subversion还是新鲜货，Git还没有被发明，Skype这类VoIP的方案还没有出现，云还仅仅是用来下雨的。因此<a href="http://www.agilemanifesto.org/principles.html">里面说到</a>：</p>

<blockquote>
<p>在开发小组中最有效率也最有效果的信息传达方式是面对面的交谈</p>
</blockquote>


<p>当然，值得一提的是强调沟通本来就不是Agile的发明。在Agile Manifesto刚刚被编写出来时还占据着主流的<a href="http://en.wikipedia.org/wiki/Waterfall_model">瀑布式开发</a>里，要求编码开始前撰写非常详细的文档，然后再对这些文档进行充分的评审：沟通和讲解其实是完成这些工作的前提。只不过Agile不但高度推崇面对面的交流，而且鄙视文档活动，结果虽然在一定程度上减少了瀑布流程里面写文档写到程序员晕厥的状况，但又对公司造成了新一轮的伤害。</p>

<a name="L..........................."></a>
<h3>讨论之后还得多写写</h3>

<p>在软件开发中，有些工作通过口头交流本身就是低效的。</p>

<p>当然有适合面对面讨论的部分：比如对关键模块的技术选型，比如对业务流程和需求的澄清。</p>

<p>但进入设计和实现阶段的活动，应该是看得见摸得着版本化可回溯的，所谓&#8221;a wireframe is worthy than one thousand words，a prototype is worth a thousand wireframes&#8221;。</p>

<p>比如下面是一次提交之后Gitlab上提供的查看diff的界面：通过这样的方式review整个改动，比小伙伴坐在自己怀里结对编码要清楚得多（而且小伙伴坐在怀里的时候引发的羞赧常常让你难以把他的错误直接打到他脸上不是么）：</p>

<p><img src="http://lenciel.cn/downloads/images/2015_03/gitlab_diff.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>所以我会经常在公司里面鼓动大家把输出都落到代码和文档里面。经过一段时间，就会慢慢看到有人在群里面问“那个什么什么是怎么回事”的时候，后面的回复是“你去看看confluence上xxx页面”或者是“这个是jira的xxx问题单讨论的”。</p>

<p><img src="http://lenciel.cn/downloads/images/2015_03/written_words_is_better.png" title="Don't touch me..." alt="Vhost threshold" /></p>

<p>如果你的员工经常需要重复回答同一个问题，包括来个新员工这个环境怎么配那个Wifi的密码还需要人告诉他/她，你也好意思说自己是敏捷的？</p>

<a name="L..........................."></a>
<h3>讨论之前最好多写写</h3>

<p>强调面对面沟通，而弱化文档和代码本身在沟通中的作用，造成的一个更严重后果是面对一个问题，大家不仔细思考就开会讨论。结果会上随便放炮，下来各不认账。</p>

<p>我在M记做PM的时候，项目组里面有几位韩国同事。因为是远程办公，每天除开代码之外，我们只能通过Skype交流。这里面有个叫Jason的同事，无论分给他什么活，他不但做得飞快，而且还会以<a href="https://www.atlassian.com/software/confluence">Confluence</a>上一篇甚至几篇洋洋洒洒的文章作为交付。</p>

<p>在回顾那个项目的时候我发现，我和他没有每日站会，没有Sprint结尾的demo，但我们之间的沟通是整个团队里面最高效的：每天查看他提交的代码和文档，我就非常清楚他的进度和问题了。</p>

<p>这样做的收益并不仅仅是我们之间沟通的高效。</p>

<p>在他第三个小孩儿出生之后一周，他搞定了一个非常复杂的调研任务。聊天的时候我问他怎么可以在那么多私事需要处理的情况下弄得这么快。他说，有很多时候在confluence上写着写着，自己的思路就清晰了。</p>

<p>这也是我自己的感受。很多次我在写邮件问其他人问题的时候，邮件写完自己就有了答案。我自己呆过的团队，厉害的工程师都非常能写：他们的区别不过是有些人只记录给自己看，有些人会写给大家看。</p>

<a name="L.........................................."></a>
<h2>流程、工具和个体究竟谁更重要</h2>

<p>前面说了技术的革新使“面对面沟通”的重要性变得过时和有害。那么下面这个Agile核心思想呢：</p>

<blockquote>
<p>个体和个体间的交流比流程和工具更重要</p>
</blockquote>


<p>我自己对这种“人定胜天”的论调天生有抗拒感。就像当年主席发明这句话是因为大家日子过得足够糟一样，只有你为团队提供的工具足够糟才需要这么去忽悠大家。</p>

<p>软件开发是一项和工具高度相关的工作。除去你的生产活动的效率很大程度上取决于你对工具的熟悉程度以外，你还需要使用工具参与到流程中：和其他人交流、配环境、提单、解bug、记录工作时间等等，都离不开工具。</p>

<p>无论你的团队好好工作的意愿多么强烈，如果你还在用sametime而不是slack，还在用破破烂烂自己开发的测试用例管理工具而不是rally，你的开发流程就是不如别人顺畅。</p>

<p>因为使用的工具可以“塑造”你的团队沟通的方式（反过来你团队沟通的方式也可以塑造<a href="http://haacked.com/archive/2013/05/13/applying-conways-law.aspx/">他们使用工具的方式</a>）。</p>

<p>这也就是<a href="http://en.wikipedia.org/wiki/Marshall_McLuhan">Marshall McLuhan</a>的著名论断<code>The medium is the message</code> （<a href="http://www.wired.com">Wired</a>杂志把他视为办刊的精神导师，我觉得搞互联网的人都该看看他的书）:</p>

<p><img src="http://lenciel.cn/downloads/images/2015_03/mcluhan.jpg" title="Don't touch me..." alt="Vhost threshold" /></p>

<a name="Daily.StandUp.or.Daily.FuckUp"></a>
<h2>Daily StandUp or Daily FuckUp</h2>

<blockquote>
<p>市场销售人员和开发人员应该在整个项目过程中每天都在一起工作</p>
</blockquote>


<p>首先，严格的区分市场销售人员和开发人员本身就是个糟糕的主意。</p>

<p>其次，“每天都在一起”也是奇怪的号召，而在Scrum流程中，这种奇怪的号召被具体化，成了每日站会。我经常在参与站会的时候听到小兄弟们说的其实是“我昨天说我要三天做完的事情，真的还要两天”。作为职业玩家，职业程度很多时候就体现在不需要每天都告诉其他人自己要怎么做。可以想象一下830每天开个站会，然后梅西说，我今天可能需要在训练里面给伊涅斯塔传5个过顶球，你做好胸部停球转身抽射的准备……</p>

<a name="L............"></a>
<h2>敏捷文化</h2>

<p>我本身是挺讨厌“方法论”者和他们发明的术语的。当然，可能也不是我一个人讨厌。参与了Agile Manifesto制定的Dave Thomas在<a href="http://pragdave.me/blog/2014/03/04/time-to-kill-agile/">Agile Is Dead</a>里面说过：</p>

<blockquote>
<p>I haven’t participated in any Agile events, I haven’t affiliated with the Agile Alliance, and I haven’t done any “agile” consultancy. I didn’t attend the 10th anniversary celebrations.</p>
<p>Why? Because I didn’t think that any of these things were in the spirit of the manifesto we produced&#8230;</p>
<p>The word “agile” has been subverted to the point where it is effectively meaningless, and what passes for an agile community seems to be largely an arena for consultants and vendors to hawk services and products.</p>
</blockquote>


<p>在我看来，就好比真正明白某个知识的人总是能用大白话把你讲明白一样，在敏捷开发流程里面被某些公司鼓吹的那些活动和术语在我看来都是些没有价值的东西（ThoughtWorks，说你呢！）。</p>

<p>比如Scrum，我从来不说我们用Scrum，而说我们搞迭代（如果和老外我也说iteration而不是Scrum）。
比如Sprint，我从来不喜欢说我们这个Sprint，而是说我们这个迭代。
迭代本身是个有语义的好词语，为什么不用它呢。</p>

<p>就像Gregg Caines在<a href="http://caines.ca/blog/2014/12/02/i-dont-miss-the-sprint/">这篇文章</a>里面说的一样：</p>

<blockquote>
<p>when you want to get people to change the way they work, and you want them to understand the completely foreign concepts you’re bringing to them, it’s absolutely crucial that you name the thing in a way that also explains what it is not.</p>
</blockquote>


<p>然后他还说：</p>

<blockquote>
<p>In Scrum, it’s also common to have a “sprint commitment” where the team “commits” to a body of work to accomplish in that time frame. The commitment is meant to be a rough estimate for the sake of planning purposes, and if a team doesn’t get that work done in that time, it tries to learn from the estimate and be more realistic in the next sprint. Developers are not supposed to be chastized [sic] for not meeting the sprint commitment — it’s just an extra piece of information to improve upon and to use for future planning. Obviously naming is hugely important here too, because in every other use of the word, a “commitment” is a pledge or a binding agreement, and this misnomer <em>really</em> influences the way people (mis)understand the concept of sprints. Let’s face it: if people see sprints as just more frequent deadlines (including those implementing them), the fault can’t be entirely theirs.</p>
</blockquote>


<p>的确，问工程师要个estimation然后把它当成commitment，这不是耍流氓么。不仅仅是Scrum，大多数的组织里面推行一年半载的敏捷流程，大多数人还是对它究竟每个阶段在干什么迷迷糊糊。即便是靠培训敏捷流程混饭的公司也<a href="http://martinfowler.com/articles/agileFluency.html">承认</a>要把他们鼓吹的流程落地是非常难的：</p>

<blockquote>
<p>In our experience, it takes a team two to six months to become fluent at the one-star level. About 45% of the teams we talk to say they’re fluent at this level.</p>
<p>Reaching the two-star level takes another three to 24 months, depending on the amount of technical debt in the code. About 35% of teams report fluency at this level.</p>
<p>Three-star teams are much more rare. About 5% of teams report fluency at this level. We’ve heard reports ranging from a year to five years to reach this level of fluency.</p>
</blockquote>


<a name="L..............."></a>
<h2>我们的选择</h2>

<p>敏捷开发的很多思想是有益的，但我们没有用Scrum和它那堆奇怪的活动（standup、sprint planning等等）。我们鼓励少开会，多通过<a href="http://tomayko.com/writings/adopt-an-open-source-process-constraints">异步的方式沟通</a>而不是经常让大家停下手里的工作来进行讨论。我们也从来不对estimation之类的东西认真，更不去做什么burndown或者计算点数，因为Agile Manifesto里面说过：</p>

<blockquote>
<p>可以工作的软件是进度的主要度量标准</p>
</blockquote>


<p>自动化测试、持续集成、自动部署、有效的监控和运维，让你的软件随时可以发布，才是产品可以不断演进的根基。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disappointment & Confidence]]></title>
    <link href="http://lenciel.cn/2015/02/the-confidence-and-disappointment/"/>
    <updated>2015-02-28T14:02:26+08:00</updated>
    <id>http://lenciel.cn/2015/02/the-confidence-and-disappointment</id>
    <content type="html"><![CDATA[<p>I wrote this in English because it is a habbit I have: when I&rsquo;m frustrated, I wrote in English.</p>

<p>It feels safer and warmer because it seems no one will take time to read it carefully when the language is switched.</p>

<p>Today one of our freind told me she decides to resign to brew her drawing skill dedicatedly. She is working with us since Myriad, then Palm4fun, then Testbird. And she is not just a colleague for us, but a talent, honest freind. So I feel kinda upset.</p>

<p>But I know it will happen sooner or later since we join Testbird.</p>

<p>It doesn&rsquo;t have to be her, but it will happen.</p>

<p>It doesn&rsquo;t have to be Testbird, but it will happen.</p>

<p>I know it because everytime when you join a new team you will have the disappointment and confidence problem.</p>

<p>On the very first day of the new job. When you walk in the building knowing practically no one. Everyone is pleasant and nice… almost too nice. Everyone (including you) is not quite themselves because everyone understands the power of the first impression. They’re watching every single move and attempting to interpret how these moves might be perceived. It’s exhausting and it doesn’t reflect the natural steady state of the team.</p>

<p>You listen. You talk to every single person who is willing and you slowly form the impression of the tangible and intangible aspects of this group of people. A picture slowly forms in your mind of how it fits together and, as an aside, it’s almost always wrong because your brain hates discord. As quickly as possible, your brain wants a framework that efficiently predicts what is going to happen next. Your initial framework is a calming hodgepodge of past experience combined with your three most recent epiphanies, and you call this weak sauce, “The way they work.”</p>

<p>And this poor assessment goes both ways. It’s the beginning of the disappointment. You discover your model for them is incorrect. They discover that you are not who they expected. It’s the end of the honeymoon and the fact the end has begun is progress, but it mostly feels like disappointment. You’re in an unfortunate hole. It’s buyer’s remorse. It’s understanding the world is never, ever that simple.</p>

<p>You sense their disappointment, so you listen harder. You push yourself to talk with a wider variety of unfamiliar humans, because you continue to erroneously believe that one of them could tell you that elusive one rule that would explain this particular clan’s culture in a immediately useful and revealing way. You read every decrepit wiki page. You attend every meeting. You’re attempting to rebuild yourself in a new culture and it’s exhausting because you took all of this for granted in your prior gig. You had built blazing fast intuition, but it took months&hellip;perhaps years.</p>

<p>Or maybe never.</p>

<p>How can you start climbing out of the disappointment? The only way I know is through small, unexpected wins.</p>

<p>Find something small enough that you can fix it without breaking other things.</p>

<p>No one expected you to fix that; no one even knew it was broken; and no one thought it was that important. When you fixed it, no one really noticed. When the consequences of the fix became obvious, they thought, “She/He can do that? Hmmm&hellip;.interesting.”</p>

<p>Your fix is your first legitimate reputation defining moment, because while people were told who you were, they didn’t believe it because people don’t believe what they have not seen.</p>

<p>Disappointment vanishes slowly and quietly each of these small wins. The wins don’t feel substantive or impactful, but they continue to incrementally define who you are to the rest of the team. They start to build a realistic model of you in their minds. You’re not who they expected, it’s not what you expected, but after three months you start to think of this strange place as home.</p>

<p>I wish all the best for her and hope she take the time to relax and learn, and come back not just with her enhanced UX expertise, but also with the knowledge that everybody boarding on a new ship will have the same disappointment problem and you can always conquer it with small wins.</p>

<p>Good Luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《鸟人》]]></title>
    <link href="http://lenciel.cn/2015/02/birdman/"/>
    <updated>2015-02-25T20:02:27+08:00</updated>
    <id>http://lenciel.cn/2015/02/birdman</id>
    <content type="html"><![CDATA[<p><img style="width:30%" src="http://lenciel.cn/downloads/images/2015_02/birdman_1.jpg" title="Don't touch me..." alt="Vhost threshold" />
<img style="width:30%" src="http://lenciel.cn/downloads/images/2015_02/birdman_2.jpg" title="Don't touch me..." alt="Vhost threshold" />
<img style="width:30%" src="http://lenciel.cn/downloads/images/2015_02/birdman_3.jpg" title="Don't touch me..." alt="Vhost threshold" /></p>


<p>今年奥斯卡最佳电影颁给了《鸟人》，喜欢电影的小伙伴们纷纷起立&hellip;</p>

<p>毕竟从82届的《拆弹部队》算起，到85届的《为奴十二载》，年年美国主旋律，今年能够给一部足够有特色的杰作，而不是再给《SELMA》或者是《美国狙击手》这样的“美国好电影”，算是奥斯卡“迷途知返”。</p>

<p>另外有很多人觉得2014年是电影的小年，所以呼声最高的《鸟人》和《少年时代》都是小众电影。但其实这年有达内兄弟，有诺兰，有大卫芬奇，有波兰斯基，挺大的一年。</p>

<p>而《鸟人》在这样的“大年”也走得很曲折：在《少年时代》起跑阶段一家独大的状况下，《鸟人》在后半程接连拿下了PGA（制片人工会）最佳影片，SAG（演员工会）最佳群戏和DGA（导演工会）最佳导演，最终在奥斯卡翻盘。</p>

<p>那么这部最佳电影究竟在说什么？</p>

<p>有人说它讽刺了电影工业，那些超能英雄电影，那些看起来光鲜其实脆弱的明星。</p>

<p>也有人讨厌它晃晃悠悠分不清戏里戏外台前台后的伪长镜头。</p>

<p>我觉得它说的问题其实是任何人都需要面对的冲突：内心和现实的冲突。电影里的主角配角，街头朗诵《麦克白》的醉汉，以及雷蒙德卡佛的小说，其实都围绕着这根主线。</p>

<p>每个人都会时不时地希望完全遵从自己的内心去生活。演员想不用管剧评家说什么；女儿想不用管父母说什么；老公想不用管老婆说什么；想在戏台上和Lesley真正来一发的Mike想不管所有人说什么。换句话说，不管有钱没钱，我们都希望不用管其他人是什么感受任性一下。</p>

<p>所以电影故意在每个角色突破现实的时候制造一种欣快感，并且通过戏中戏和长镜头弱化虚幻和现实的边界让那些快感迅速升级。</p>

<p>然后马上伴随紧密鼓点端出一地鸡毛的苦涩现实：每个人毕竟都被现实生活所禁锢。</p>

<p>大多数人当然会觉得Riggan，Mike，Sam，Lesley这样的人太傻太敏感太脆弱。</p>

<p>这里的大多数人包括Riggan穿着内裤走在时代广场的时候，那些拿起手机拍的看客。包括打开微信疯狂的摇完几块钱的红包，然后传播“看开”、“放下”、“断舍离”的你我。</p>

<p>我们按照社会规定的模式活着。别人和自己的差别太大，就气恼一番；自己和别人一模一样，又不由悲哀。面对内心和现实的冲突时，往往选择埋葬自我，接受现实。</p>

<p>如此而已。</p>

<p>就算是Riggan本尊也需要在化妆镜上贴着句话时时提醒自己：</p>

<p><code>A thing is a thing, not what is said of that thing</code></p>

<p>那些人们愿意为之慷慨赴死的东西，比如爱情，比如自由，很多时候，它们代表的无非是个体对现实的置之度外。</p>

<p>这也是为什么罗曼·罗兰在《约翰·克利斯朵夫》里面说的这段话会引起那么多人的共鸣：</p>

<blockquote><p>大多数人在他们二三十岁时就死去了，因为过了那个年龄，他们只是自己的影子，此后的余生则是在模仿自己中度过。日复一日，更机械，更装腔作势地重复他们在有生之年的所作所为，所思所想，所爱所恨。</p></blockquote>


<p>看这电影的时候，我还会想起自己最喜欢的电影《一一》。杨德昌无非是挑了一个普通的中产阶级家庭，白描一把，让你看到，每个个体都在日复一日重复自己的生活；而个体之间，年幼者又在重复年长者曾经的生活。</p>

<p>在这样循规蹈矩的生活中，那些敏感而挣扎着的人类，或许是痛苦的，但也是伟大的。</p>

<p>因为人类可以称为文明的大多数内容，都是那些敏感而挣扎着的人类在“个体对现实的妥协”和“个体对现实的抵抗和超越”这两者的冲撞中生产出来的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Let Me Show You the World]]></title>
    <link href="http://lenciel.cn/2015/02/let-me-show-you-the-world/"/>
    <updated>2015-02-23T21:08:02+08:00</updated>
    <id>http://lenciel.cn/2015/02/let-me-show-you-the-world</id>
    <content type="html"><![CDATA[<p>之前提过有一些机构<a href="http://www.ppgis.net/imagery.htm">开放</a>了卫星云图，可以用GIS信息通过接口去获取。从天上看，地球还是挺美的，很多都可以用来做手机的桌面，如果你需要下载无损的版本：<a href="http://pan.baidu.com/s/1sjuiOqx">click</a>，分享码:<code>gdyv</code>：</p>

<p><link rel="stylesheet" type="text/css" href="http://lenciel.cn/downloads/static/css/elasticstack_slider.css" /></p>

<div class="slider-container">
    <ul id="elasticstack" class="elasticstack">
        <li><img src="http://lenciel.cn/downloads/images/2015_02/satellite_images/r19961_39_2013.jpg" alt="01"/><h6>Lakes Ounianga - 乍得</h6></li>
        <li><img src="http://lenciel.cn/downloads/images/2015_02/satellite_images/r1460_39_2006.jpg" alt="02"/><h6>Barbuda - 安巴</h6></li>
        <li><img src="http://lenciel.cn/downloads/images/2015_02/satellite_images/r1585_39_2000.jpg" alt="03"/><h6>Maalhosmadulu Atoll - 马尔代夫</h6></li>
        <li><img src="http://lenciel.cn/downloads/images/2015_02/satellite_images/r4937_39_2012.jpg" alt="04"/><h6>Pleiades Mon Saint Michel - 法国</h6></li>
        <li><img src="http://lenciel.cn/downloads/images/2015_02/satellite_images/r870_39_2002.jpg" alt="05"/><h6>Nazca Lines - 秘鲁</h6></li>
        <li><img src="http://lenciel.cn/downloads/images/2015_02/satellite_images/r950_39_2005.jpg" alt="01"/><h6>Chott El Djerid - 突尼斯</h6></li>
        <li><img src="http://lenciel.cn/downloads/images/2015_02/satellite_images/r1315_39_2002.jpg" alt="01"/><h6>Geba River Guinea - 比绍</h6></li>
        <li><img src="http://lenciel.cn/downloads/images/2015_02/satellite_images/r1385_39_2006.jpg" alt="01"/><h6>Dasht E Kavir - 伊朗</h6></li>
        <li><img src="http://lenciel.cn/downloads/images/2015_02/satellite_images/r1570_39_1995.jpg" alt="01"/><h6>Rub Al Khali - 沙特</h6></li>
        <li><img src="http://lenciel.cn/downloads/images/2015_02/satellite_images/r1560_39_2000.jpg" alt="01"/><h6>Namib Desert - 纳米比亚</h6></li>
        <li><img src="http://lenciel.cn/downloads/images/2015_02/satellite_images/r1650_39_1986.jpg" alt="01"/><h6>Tchernobyl - 乌克兰</h6></li>
        <li><img src="http://lenciel.cn/downloads/images/2015_02/satellite_images/r1675_39_2007.jpg" alt="01"/><h6>Nunavut - 加拿大</h6></li>
        <li><img src="http://lenciel.cn/downloads/images/2015_02/satellite_images/r16692_39_2012.jpg" alt="01"/><h6>Gaborone Bostwana - 意大利</h6></li>
        <li><img src="http://lenciel.cn/downloads/images/2015_02/satellite_images/r495_39_2002.jpg" alt="01"/><h6>Amsterdam - 荷兰</h6></li>
        <li><img src="http://lenciel.cn/downloads/images/2015_02/satellite_images/r16680_39_2012.jpg" alt="01"/><h6>Uluru - 澳大利亚</h6></li>
        <li><img src="http://lenciel.cn/downloads/images/2015_02/satellite_images/r1140_39_2007.jpg" alt="01"/><h6>Al Wusta - 阿曼</h6></li>
        <li><img src="http://lenciel.cn/downloads/images/2015_02/satellite_images/r1080_39_2006.jpg" alt="01"/><h6>Darfur - 苏丹</h6></li>
        <li><img src="http://lenciel.cn/downloads/images/2015_02/satellite_images/r920_39_2004.jpg" alt="01"/><h6>Taklamakan - 中国</h6></li>
        <li><img src="http://lenciel.cn/downloads/images/2015_02/satellite_images/r1580_39_2004.jpg" alt="01"/><h6>Grisons Region - 瑞士</h6></li>
        <li><img src="http://lenciel.cn/downloads/images/2015_02/satellite_images/r1660_39_2011.jpg" alt="01"/><h6>Puyehue Volcano - 智利</h6></li>
        <li><img src="http://lenciel.cn/downloads/images/2015_02/satellite_images/r1530_39_1999.jpg" alt="01"/><h6>Sahara - 马里</h6></li>
        <li><img src="http://lenciel.cn/downloads/images/2015_02/satellite_images/r34229_39_2013.jpg" alt="01"/><h6>Spitzberg Glacier - 挪威</h6></li>
        <li><img src="http://lenciel.cn/downloads/images/2015_02/satellite_images/r825_39_2006.jpg" alt="01"/><h6>Everglades National Park - 美国</h6></li>
        <li><img src="http://lenciel.cn/downloads/images/2015_02/satellite_images/r20048_39_2013.jpg" alt="01"/><h6>Bissagos - 几内亚</h6></li>
        <li><img src="http://lenciel.cn/downloads/images/2015_02/satellite_images/r1400_39_2003.jpg" alt="01"/><h6>Wadi Rum - 约旦</h6></li>
        <li><img src="http://lenciel.cn/downloads/images/2015_02/satellite_images/r1270_39_2004.jpg" alt="01"/><h6>Laguna Colorada 玻利维亚</h6></li>
    </ul>
</div>


<!-- /container -->




<script src="http://lenciel.cn/downloads/static/js/draggabilly.pkgd.min.js"></script>


<script src="http://lenciel.cn/downloads/static/js/modernizr.custom.js"></script>


<script src="http://lenciel.cn/downloads/static/js/elastiStack.js"></script>


<script>
    new ElastiStack( document.getElementById( 'elasticstack' ) );
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sam Altman给创业者的建议]]></title>
    <link href="http://lenciel.cn/2015/02/startup-advices-from-sam-altman/"/>
    <updated>2015-02-22T22:22:00+08:00</updated>
    <id>http://lenciel.cn/2015/02/startup-advices-from-sam-altman</id>
    <content type="html"><![CDATA[<p>去年创业界的一大盛事就是YC的CEO，斯坦福的退学生<a href="http://blog.samaltman.com/">Sam Altman</a>联手斯坦福大学，开设了课程CS183B：<a href="http://startupclass.samaltman.com/">How To Start A Startup</a>。十周共20节课程请来了各路顶尖人才，从创意、产品、团队和执行这四个YC认为创业最关键的维度分享了如何进行创业。</p>

<p>如果你自己是创业者，个人建议是整个课程可以好好看一遍，反正就算你不会翻墙，因为YC巨大的号召力，国内也有人为这个课程专门做了<a href="http://startupclass.club/">镜像网站</a>并配了字幕。</p>

<p>如果你是蠢蠢欲动想要创业的人，不妨看看Sam Altman给出的这个课程的简化提纲，看看自己是不是适合这样的生活：</p>

<ul>
<li>创业应当从创意和想法开始，而不是一来就开一家公司。当创业还只是围绕一个创意或者一个项目的实现时，承受的压力会小很多，就更愿意接受那些看上去稀奇古怪但实则能量巨大的想法。就算非要开公司，最好的思路也是去集合各式各样好玩的想法并实施。</li>
<li>而与之相反，当你拥有了一家公司的时候，你会面临压力，从而导致对各种各样的想法产生过快的判断。而如果只是一个项目，你就可以花更多时间去确定它是不是真的是一个好的方向：这其实是非常重要的工作，因为创业真正开始之后，你将花费非常多的时间和精力投入到这个方向。</li>
<li>团队中，至少有一个技术合伙人（这个人能从技术角度去帮助实现公司希望拥有的任何产品）</li>
<li>通常来说，选择一个高增长市场远比选择一个份额巨大但增长缓慢的市场要好。特别是如果你发现的高增长市场正好是其他人忽视的。</li>
<li>最好的创业想法是那些看起来很糟但其实非常好的想法（你得具有非凡的信心和判断力）。</li>
<li>去创造直击人性的事物。即便是在其他点上都输得一塌糊涂，但只要做到这点就够了。另一方面，如果做不到这点，其他所有的点都非常出彩也都无济于事。</li>
<li>一旦将创业从“好玩的项目”切换成为公司运作，请果断而且迅速的行动。这时候，不能再花费数周做一项决定，而需要迅速试错：思考一个小时，在下一个小时就得到结果。</li>
<li>让自己变得强大，而且强硬。前进的道路会充满艰辛，即便你自己也会一次又一次的怀疑自己。</li>
<li>找到办法让自己的产品被它们的用户触碰到。一开始即便是靠人力也要做到这点（推荐阅读：<a href="http://www.paulgraham.com/ds.html">this</a>）。</li>
<li>倾听用户的声音，改善产品，然后继续倾听，直到一些用户开始爱上了你的产品（这时候，最好是一小撮，而不是一大群）。而且，请不要在用户是否喜欢你的产品这件事情上欺骗自己。</li>
<li>尽可能的降低你的资源消耗速度，直到你确定你的产品已经捕获了部分用户的芳心，而降低消耗的最简单的方法就是缓慢增加招聘。</li>
<li>规划商业策略，大多数人并没有这样做。然后，偶尔从另一个角度思考一下，如何抵抗自己制定的商业策略。请记住，在未来的某一天你会需要并且成为垄断者的 (in the Peter Thiel sense)。</li>
<li>在融资前一定读读<a href="Read%20this%20before%20you%20raise%20money:%20http://paulgraham.com/fr.html">这个</a></li>
<li>忽略媒体的报道，特别是那些称赞的报道。</li>
<li>在公司的早期就一定要盈利。</li>
<li>尽可能去雇佣那些最好的员工，无论你花费多少时间去寻找他们，都不过分。多给你的员工一些股份，提升他们的期望。聪明、高效的人总是渴望成功的。（推荐阅读：<a href="http://blog.samaltman.com/how-to-hire">this</a>）</li>
<li>当你发现自己雇佣了错误的员工之后，请迅速开除他。</li>
<li>不要和那些你合作起来感觉不那么良好的员工（甚至是合伙人）、伙伴、投资者一起共事。</li>
<li>尝试去摸索规模化获取用户的方法，这时候你需要做的是硬着头皮去学习销售和市场营销工作。顺道说一句，通过花费超过用户价值的价格去获取用户虽然在时下很流行，但请记住，这并不可取。</li>
<li>持续关注用户的增长速度，别停下来，这是衡量一个公司CEO是否合格的最好策略。如果你偶然发现自己说出了“我们的目标不是用户增长”这样的话，请仔细反省一下，自己是否把时间花费在了其他错误的事情上？当然，也记得别让自己被那些虚荣的指标欺骗。</li>
<li>一个成熟创业公司的状态是：公司每个人都能全身心投入到分配给自己的任务当中。这种投入对于几个创始人来说更是至关重要。创业圈里面流行的关于“传教士与雇佣兵”的区别的确存在，而且非常明显。</li>
<li>不要在那些无所谓的事情上浪费时间（这些事不包括产品开发、与用户沟通以及用户增长等，它们都很重要）。比如，沉溺于讲述如何创业的电影或者书籍，与律师或会计开会，参加各式虚张声势的推广会议等。</li>
<li>相反，请将精力放在那些重要的事情上。每天找出两三件最重要的事，这时候变身成为一个工作机器，专注其中，忽略任何外部的干扰。</li>
<li>不要找任何借口，做需要被做的事情。</li>
<li>学习对团队的管理，让小伙伴们都开开心心的。千万别忽略了这点，真的非常重要。</li>
<li>除开创造一个伟大的产品，如果想真正成功，还需要创造一个伟大的公司，所以多花点时间去思考公司文化。</li>
<li>不要小看人脉关系的重要性。</li>
<li>在你真的确定想卖掉自己的心血之前，忽略那些收购意向。事实上，如果一些公司能够避免类似失误，他们也许已经非常成功了。不幸的是，它们过早被收购导致了关门。</li>
<li>努力工作，这是成功的不二法门。虽然每个人都希望走捷径，但目前看来尚未出现。</li>
<li>保持这种状态工作十年。</li>
</ul>


<p>个人觉得，说得非常实诚，真正在花心思做自己的产品的公司肯定能收益良多。当然，最后那句也是最关键的一句：毕竟是九死一生的创业嘛，回档再多次也是正常&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Palm4fun Tech Stack Review Part II]]></title>
    <link href="http://lenciel.cn/2015/02/p4f-tech-stack-part-2-others/"/>
    <updated>2015-02-20T14:11:19+08:00</updated>
    <id>http://lenciel.cn/2015/02/p4f-tech-stack-part-2-others</id>
    <content type="html"><![CDATA[<p>距离<a href="http://lenciel.cn/2015/01/p4f-tech-stack-part-1-devops/">上篇</a>略久，主要最近很忙。</p>

<a name="Application..amp..Data"></a>
<h2>Application &amp; Data</h2>

<p>和其他几个提供辅助的部分不同，App/Data这部分基本上就是产品本身了。</p>

<a name="Application.Hosting"></a>
<h3>Application Hosting</h3>

<p><img src="http://lenciel.cn/downloads/images/2015_01/p4f_stack_app_data_1.png" title="Don't touch me..." alt="stack_devops_1" /></p>

<p>我们在选择云的时候，也有试用过“久负盛名”的几家大的。</p>

<ul>
<li>阿里因为性价比的原因直接被我忽略了</li>
<li>AWS显然是成熟度最高的，但是在国内用起来确实比较憋屈，希望他们正式入华后有好转</li>
<li>Google的Compute Engine和Windows Azure都属于开张不久，前者因为有打折劵最终被我用来做了很久的翻墙代理（但是也因为忘记关VPS收到了巨额账单，好在Google还比较厚道免单了）。后者因为在国内有部署，速度非常不错，但是整体比UCloud还是贵了不少。</li>
</ul>


<p>最终我们选择了UCloud，他们的价钱比较公道，服务也做得非常棒。虽然我们机器并不是很多，但是仍然有24小时随叫随到的服务团队在跟，并且服务团队的技术实力在国内的服务提供商里面也非常突出。</p>

<p>平时还有一些抛弃型的原型我会放到Heroku或者Google App Engine上，因为它们用来部署Django应用非常便捷。</p>

<p>我们大多数项目都只是简单的管理后台，用Apache还是Nginx并没有明显区别。因为Apache在大多数OS自带，所以基本上都是以Apache+uwsgi+supervisor来进行部署。</p>

<a name="Languages..amp..Frameworks"></a>
<h3>Languages &amp; Frameworks</h3>

<p><img src="http://lenciel.cn/downloads/images/2015_01/p4f_stack_app_data_2.png" title="Don't touch me..." alt="stack_devops_1" /></p>

<p>这张图再画长一倍也不一定能画完，因为这部分特别是Web前端技术的变动实在是太大了。感觉JavaScript社区换框架、方法论、编译工具甚至是VM就像足球运动员换袜子一样勤。</p>

<p>所以我们的策略一直是不绑定到某个具体框架：那样很容易被绑架。从目前来看：</p>

<ul>
<li>React/Flux最近特别火，由Facebook内部使用并开源（特别是最近推出了React Native）。</li>
<li>AngularJS，火了很长时间，由Google内部使用并开源。目前两个主要版本变动太大嘴炮很多，可以观望到尘埃落定再考虑深入学习。</li>
<li>Backbone是非常不错的客户端MVC框架。</li>
<li>node.js和io.js。目前它们是一样的东西，io.js只是node.js的一个fork（类似于Hudson和Jenkins的关系）。目前可以只学node.js但是得盯着io.js的发展，因为很多原来node.js的主力都在io.js这边。</li>
<li>npm是Javascript目前最主要的package管理工具。目前你还会听说bower但几乎大家都已经确认这是个愚蠢的idea。另外你还会听说jspm，一个很新的系统，非常不错，值得留意。</li>
<li>Browserify使得你可以在browser里面直接使用npm的module，而不仅仅是在server端。完全是一次革命，非常好用。</li>
<li>Gulp和Grunt是build工具（类比Ant/Maven），Gulp更新而且设计上非常成熟，推荐学习和使用Gulp。</li>
<li>express.js是服务器端JS应用开发需要学习的东西。</li>
<li>Meteor是设计非常领先的一个全栈的框架（想想Django），整体上非常酷，目前也很流行。如果你想试试自己的学习能力和承受能力，值得一试。</li>
<li>jQuery之于JavaScript就好比少林寺之于中华武术。每个人都在学，都以为它就可以搞定整个武林，但那是错的。JQuery是用来对DOM做操作的，如果你用它在干别的，你多半错了。</li>
</ul>


<a name="Assets..amp..Media"></a>
<h3>Assets &amp; Media</h3>

<p><img src="http://lenciel.cn/downloads/images/2015_01/p4f_stack_app_data_3.png" title="Don't touch me..." alt="stack_devops_1" /></p>

<p>这方面没什么好说的，一开始我们用的就是UCloud自带的服务。后面为Testbird开发项目的时候接触到了七牛云。不得不吐槽一下七牛云还处于快速增长期，不论是提供的服务的稳定性，还是文档更新的及时性，都还有很多值得提高的地方。</p>

<a name="Data.Storage"></a>
<h3>Data Storage</h3>

<p><img src="http://lenciel.cn/downloads/images/2015_01/p4f_stack_app_data_4.png" title="Don't touch me..." alt="stack_app_data_4" /></p>

<p>数据库我们一般本地开发用SQLite，stage和prod服务器用MySQL。之所以没有选择Postgresql是因为它那些很不错的功能我们在项目里面还没有需要，所以就偷懒选择了自己更熟悉的系统。</p>

<a name="Libraries"></a>
<h3>Libraries</h3>

<p><img src="http://lenciel.cn/downloads/images/2015_01/p4f_stack_app_data_5.png" title="Don't touch me..." alt="stack_app_data_5" /></p>

<p>这张图也是很难画完整的，因为它一直在变。不过我们基本上用ACE封装了一套自己的UI框架，对提高开发效率还是非常有用的。</p>

<a name="Utilities"></a>
<h2>Utilities</h2>

<p><img src="http://lenciel.cn/downloads/images/2015_01/p4f_stack_utilities.png" title="Don't touch me..." alt="stack_utilities" /></p>

<p>都是些中规中矩的选择，因为好的服务都在国内被封堵得比较彻底，不是吗？</p>

<p>比如统计，百度做得和Google还差几个数量级（你见过实时统计有百度那么不实时的么？），但是在国内因为墙的关系常常还是只能用。</p>

<p>再比如SMS网关，国外有大量的类似<a href="https://www.twilio.com/sms/toll-free">Twilio</a>的优质服务，价格便宜，接口良好，但是&hellip;我们都用亿美。</p>

<p>值得一提的是推送消息服务，因为被百度坑过，我们一开始用了我浙大著名创业公司“个推”，结果质量低得还比较离谱。最后好死不死又换到了百度Push：原因还是因为Google原生的Push被墙。</p>

<a name="Business.Tools"></a>
<h2>Business Tools</h2>

<p><img src="http://lenciel.cn/downloads/images/2015_01/p4f_stack_business_tools.png" title="Don't touch me..." alt="stack_devops_1" /></p>

<p>其实Trello和Slack这样的工具用好一个就足以撑起一家中等规模的公司了。可惜因为经常被墙，很多不能自己翻墙的同事或者客户用起来倍感艰辛。</p>

<p>整个公司的任务驱动主要还是靠Jira，知识分享和管理主要是靠Confluence。</p>

<p>阿勒！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goodbye Palm4fun, and the Tech Stack Review Part I]]></title>
    <link href="http://lenciel.cn/2015/01/p4f-tech-stack-part-1-devops/"/>
    <updated>2015-01-04T14:44:23+08:00</updated>
    <id>http://lenciel.cn/2015/01/p4f-tech-stack-part-1-devops</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/2015_01/goodbye_palm4fun.png" title="Don't touch me..." alt="goodbye" /></p>

<p>大概两年前，和Bergkamp、194一次计划外的聊天之后，<strike>出于保护直肠的目的</strike>，本座离开了基友密布的<a href="http://www.myriadgroup.com/">Myriad</a>，作为Palm4fun的联合创始人之一，开始捣鼓着自己创业。</p>

<p>在具体的研发工作方面，我主要是负责服务器端的开发。但因为被冠名CTO，我的工作还包括：</p>

<ul>
<li>制定研发流程，管理运作研发团队（很幸运，团队都是气味相投的小伙伴并且平均水平很高）</li>
<li>搭建和维护各种IT系统让大家的工作更加轻松</li>
<li>对各种项目进行技术选型、风险评估和报价</li>
<li>培养有palm4fun自己特色的团队文化</li>
<li>甚至是，设计我们的logo和<a href="http://lenciel.cn/2014/09/logo-test/">T-Shirt</a></li>
</ul>


<p>别误会，并不是和写代码比，我更喜欢做这些事情：我做这些，主要是经过多年的折腾，已经对自己想在什么样的环境里进行软件开发有了自己的体会。所以，我当然愿意花时间和小伙伴们一起，把理想中的工作环境具体到实践。</p>

<p>经过这两年的时间，虽然我们有纯技术团队创业理应遭遇的各种捉襟见肘，但因为整个团队的坚持和付出，在活下来的同时，也完成了一定的技术积累。有一个可喜的现象是，我们自己参与开发孵化的项目，虽然有一些死掉了，但也有一些拿到了几百万的天使投资；而我们作为外包方参与研发的项目，客户都非常认可我们的项目质量和工作方式。很多客户不但和我们确定了长期合作的关系，还积极介绍自己朋友的项目给我们。</p>

<p>新年到来之际，随着我们被<a href="http://www.testbird.com/">Testbird</a>收编，Palm4fun大部分成员即将投入到新公司的各条战线，Palm4fun作为一个组织也就此消亡了。回首这两年，我想说，如果你没有和我一起经历那说了你也不懂我还是不说了&hellip;&hellip;</p>

<p>跨年的时候，茕茕孑立的本座画了张思维导图，主要目的是把过去两年palm4fun的积累整理一下。画出来之后很多朋友希望我分享高清无码图：因为整个图非常大，不太适合在移动设备上看。</p>

<p><img src="http://lenciel.cn/downloads/images/2015_01/p4f_stack_all.png" title="Don't touch me..." alt="stack_all" /></p>

<p>其实在一开始选择这些的时候，基本上就是从运维支撑和测试部署工具、产品开发和数据管理、基础设施和功能模块以及商业工具四个维度出发，所以就拆成四个部分简单过一遍。特别声明：选择的依据和出发点主要是根据个人喜好，包括自己使用的体验以及眼缘，并没有特别的理由。比如我们用Reviewboard不用Phabricator，完全是因为团队中大多数人已经用习惯了。</p>

<a name="Build.Test.Deploy"></a>
<h2>Build/Test/Deploy</h2>

<p><img src="http://lenciel.cn/downloads/images/2015_01/p4f_stack_devops_1.png" title="Don't touch me..." alt="stack_devops_1" /></p>

<ul>
<li>我们没有用Gerrit或者Phabricator的原因是它们功能太多了</li>
<li>Ngrok是做微信接口调试时意外发现的好物</li>
</ul>


<a name="Monitoring"></a>
<h2>Monitoring</h2>

<p><img src="http://lenciel.cn/downloads/images/2015_01/p4f_stack_devops_2.png" title="Don't touch me..." alt="stack_devops_2" /></p>

<ul>
<li>Sentry帮我们在用户找到我们之前找到了很多问题</li>
<li>一开始我们用过Nagios，它的设计也很不错，就是界面太&hellip;</li>
<li>Zabbix帮我们远离主机因为硬盘满了或者内存不够驾崩的场面</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Fixture With Factory Boy and Faker]]></title>
    <link href="http://lenciel.cn/2014/12/making-fixture-with-factory-boy-and-faker/"/>
    <updated>2014-12-20T03:14:59+08:00</updated>
    <id>http://lenciel.cn/2014/12/making-fixture-with-factory-boy-and-faker</id>
    <content type="html"><![CDATA[<p>我们在Django项目的开发和测试过程中经常需要mock一些数据作为<a href="https://docs.djangoproject.com/en/1.7/howto/initial-data/">fixture</a>，比较常见的做法是：</p>

<ol>
<li>进行一些操作创建测试数据</li>
<li>使用<code>dumpdata</code>命令导出json格式的数据</li>
<li>以导出的json为模板构造测试数据用<code>loaddata</code>命令导入到数据库</li>
</ol>


<p>这样对于大多数场景也算够用了，但是你总会遇到某一天客户走来说：“我想看看那个报表生成出来啥样，能不能创建两千条记录？”</p>

<p>这种时候你大概你第一反应是把之前那个json搞来copy-paste出两千份数据。但很快你就会意识到那是不行的：要构建一个对象，你常常需要先构建它外键的对象，而实际上线的项目它的数据库结构是非常复杂的（数据库结构图的生成见<a href="http://lenciel.cn/2014/12/integrate-schemaspy-with-sphinx-build-for-django-database-design-visualization/">这里</a>），所以构建两千条记录的工作量会远远超过你的想象：</p>

<p><img src="http://lenciel.cn/downloads/images/2014_12/database_design_visualization.png" title="schemaSpy..." alt="schemaSpy" /></p>

<p>最近本座试用了<a href="https://github.com/rbarrois/factory_boy/">factory boy</a>和<a href="https://github.com/joke2k/faker">faker</a>的组合，感觉还比较好用。</p>

<a name="Factory.Boy"></a>
<h2>Factory Boy</h2>

<p>最开始找这类批量生成测试数据的库，主要考察的是<a href="https://github.com/vandersonmota/model_mommy">Model Mommy</a>和<a href="https://github.com/rbarrois/factory_boy/">Factory Boy</a>。看了一下文档感觉两者的差别并不算很大，但是<a href="http://movie.douban.com/subject/1898357/">Factory Girl</a>里面的<a href="http://movie.douban.com/celebrity/1003485/">Sienna Miller</a>实在是让人过目不忘所以有什么好犹豫的呢？</p>

<p>Factories的文档上说明了基本的用法，需要注意的主要是如何生成有一定依赖关系的一组测试对象。</p>

<a name="L............"></a>
<h3>数据构造</h3>

<p>Factory Boy下的数据构造主要是通过<code>Sequence</code>和<code>Fuzz</code>两个包来完成。</p>

<p><code>Sequence</code>故名思议是顺序生成的，比如你要让生成的数据有规律的用户名和电话号码，这样你看到电话<code>13000000001</code>就是是对应<code>user0001</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="n">Sequence</span><span class="p">(</span><span class="k">lambda</span> <span class="n">n</span><span class="p">:</span> <span class="s">u&#39;user</span><span class="si">%04d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="n">phone</span> <span class="o">=</span> <span class="n">Sequence</span><span class="p">(</span><span class="k">lambda</span> <span class="n">n</span><span class="p">:</span> <span class="s">u&#39;1300000</span><span class="si">%04d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">n</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>而<code>Fuzz</code>则是随机的，主要用来构造像学校、专业或者生日这样的数据：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">card_bank</span> <span class="o">=</span> <span class="n">FuzzyChoice</span><span class="p">([</span><span class="s">u&#39;中国银行&#39;</span><span class="p">,</span> <span class="s">u&#39;中国招商银行&#39;</span><span class="p">,</span> <span class="s">u&#39;中国工商银行&#39;</span><span class="p">,</span>
</span><span class='line'>                      <span class="s">u&#39;中国建设银行&#39;</span><span class="p">,</span> <span class="s">u&#39;成都银行&#39;</span><span class="p">])</span>
</span><span class='line'><span class="n">major</span> <span class="o">=</span> <span class="n">FuzzyChoice</span><span class="p">([</span><span class="s">u&#39;地球物理学&#39;</span><span class="p">,</span> <span class="s">u&#39;大气科学&#39;</span><span class="p">,</span> <span class="s">u&#39;海洋科学&#39;</span><span class="p">,</span> <span class="s">u&#39;力学&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="s">u&#39;农业工程&#39;</span><span class="p">,</span> <span class="s">u&#39;环境科学&#39;</span><span class="p">,</span> <span class="s">u&#39;心理学&#39;</span><span class="p">,</span> <span class="s">u&#39;统计学&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="s">u&#39;系统科学&#39;</span><span class="p">,</span> <span class="s">u&#39;地矿&#39;</span><span class="p">,</span> <span class="s">u&#39;机械&#39;</span><span class="p">,</span> <span class="s">u&#39;仪器仪表&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="s">u&#39;能源动力&#39;</span><span class="p">,</span> <span class="s">u&#39;电气信息&#39;</span><span class="p">,</span> <span class="s">u&#39;土建&#39;</span><span class="p">,</span> <span class="s">u&#39;测绘&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="s">u&#39;环境与安全&#39;</span><span class="p">,</span> <span class="s">u&#39;化工与制药&#39;</span><span class="p">,</span> <span class="s">u&#39;交通运输&#39;</span><span class="p">,</span> <span class="s">u&#39;海洋工程;&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="s">u&#39;航空航天&#39;</span><span class="p">,</span> <span class="s">u&#39;武器&#39;</span><span class="p">,</span> <span class="s">u&#39;工程力学&#39;</span><span class="p">,</span> <span class="s">u&#39;生物工程&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="s">u&#39;公安技术&#39;</span><span class="p">,</span> <span class="s">u&#39;材料科学&#39;</span><span class="p">,</span> <span class="s">u&#39;材料&#39;</span><span class="p">,</span> <span class="s">u&#39;水利&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="s">u&#39;林业工程&#39;</span><span class="p">,</span> <span class="s">u&#39;轻工纺织食品&#39;</span><span class="p">,</span> <span class="s">u&#39;电子信息科学&#39;</span><span class="p">,</span> <span class="s">u&#39;其他&#39;</span><span class="p">])</span>
</span><span class='line'><span class="n">birthday</span> <span class="o">=</span> <span class="n">FuzzyNaiveDateTime</span><span class="p">(</span><span class="n">dt</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">1992</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">dt</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">1996</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，有的字段，比如姓名、地址这类通过顺序或者是随机的从某个设定的集合抽取效果都不够理想，后面会看到怎么用<a href="https://github.com/joke2k/faker">faker</a>来构造它们。</p>

<a name="L.................."></a>
<h3>关联对象生成</h3>

<p>关联对象的关系有很多种(1:1, 1:n, n:1, n:n)，主要都是通过组合运用<code>SubFactory</code>和<code>RelatedFactory</code>两者来生成，但具体的构造方式和先构造谁都要以实际情况而定。比如我们有User和Tester这样的1:1的关系：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Tester</span><span class="p">(</span><span class="n">TimeBaseModel</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">OneToOneField</span><span class="p">(</span><span class="n">User</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">verbose_name</span><span class="o">=</span><span class="s">u&#39;账号&#39;</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">related_name</span><span class="o">=</span><span class="s">&#39;tester&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里在考虑是在<code>TesterFactory</code>里面把<code>User</code>作为<code>SubFactory</code>来生成，还是在<code>UserFactory</code>里面把<code>Tester</code>作为<code>RelatedFactory</code>来生成，主要就是看先后关系。很显然，在这里我们应该先构造系统里的User：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">TestUserFactory</span><span class="p">(</span><span class="n">UserFactory</span><span class="p">):</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="n">tester</span> <span class="o">=</span> <span class="n">RelatedFactory</span><span class="p">(</span><span class="s">&#39;apps.tester.factories.TesterFactory&#39;</span><span class="p">,</span> <span class="s">&#39;user&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码告诉系统，在每个<code>TestUser</code>被构造的时候，用构造出来的<code>user</code>来创建一个1:1的<code>Tester</code>。这个<code>Tester</code>的构造会在<code>user</code>的<code>save</code>之前完成。</p>

<p>然后在<code>Tester</code>的构造过程中你可以直接通过<code>SelfAttribute</code>使用传入的<code>user</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">TesterFactory</span><span class="p">(</span><span class="n">DjangoModelFactory</span><span class="p">):</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="n">phone</span> <span class="o">=</span> <span class="n">SelfAttribute</span><span class="p">(</span><span class="s">&#39;user.phone&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">nick_name</span> <span class="o">=</span> <span class="n">SelfAttribute</span><span class="p">(</span><span class="s">&#39;user.nick_name&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">creator</span> <span class="o">=</span> <span class="n">SelfAttribute</span><span class="p">(</span><span class="s">&#39;user&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>再比如，我们的<code>Tester</code>和<code>PlatformTask</code>都会关联到测试任务<code>TesterTask</code>，它们俩看起来都是<code>ForeinKey</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">TesterTask</span><span class="p">(</span><span class="n">TestingDeviceMixin</span><span class="p">,</span> <span class="n">TimeBaseModel</span><span class="p">):</span>
</span><span class='line'>    <span class="n">owner</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Tester</span><span class="p">,</span>
</span><span class='line'>                              <span class="n">verbose_name</span><span class="o">=</span><span class="s">u&#39;测试人&#39;</span><span class="p">,</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">platform_task</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">PlatformTask</span><span class="p">,</span>
</span><span class='line'>                                      <span class="n">verbose_name</span><span class="o">=</span><span class="s">u&#39;任务&#39;</span><span class="p">,</span>
</span><span class='line'>                                      <span class="n">related_name</span><span class="o">=</span><span class="s">u&#39;tester_tasks&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>但对生成数据而言，我们的目标会是每个<code>Tester</code>在被创建的时候，都给它创建一个以这个<code>Tester</code>为<code>owner</code>的<code>TesterTask</code>，并且给这个<code>TesterTask</code>创建一个关联的<code>PlatformTask</code>。</p>

<p>于是我们的写法就会是，首先在<code>TesterFactory</code>里面使用<code>RelatedFactory</code>来创建<code>TesterTask</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">TesterFactory</span><span class="p">(</span><span class="n">DjangoModelFactory</span><span class="p">):</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="n">tester_task</span> <span class="o">=</span> <span class="n">RelatedFactory</span><span class="p">(</span><span class="s">&#39;apps.tester.factories.TesterTaskFactory&#39;</span><span class="p">,</span> <span class="s">&#39;owner&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在<code>TesterTaskFactory</code>里面创建<code>PlatformTask</code>，并且在构造的时候使用传入的<code>owner</code>的参数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">TesterTaskFactory</span><span class="p">(</span><span class="n">DjangoModelFactory</span><span class="p">):</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="n">platform_task</span> <span class="o">=</span> <span class="n">SubFactory</span><span class="p">(</span><span class="s">&#39;apps.platformtask.factories.PlatformTaskFactory&#39;</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">company</span><span class="o">=</span><span class="n">SelfAttribute</span><span class="p">(</span><span class="s">&#39;..owner.user.company&#39;</span><span class="p">),</span>
</span><span class='line'>                               <span class="n">owner</span><span class="o">=</span><span class="n">SelfAttribute</span><span class="p">(</span><span class="s">&#39;..owner.user&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<a name="faker"></a>
<h2>faker</h2>

<p>有很多字段，比如姓名、地址这些，纯粹用Fuzz的办法很难做到“贴近真实”。<a href="https://github.com/joke2k/faker">faker</a>就是用来解决这类字段的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">faker</span> <span class="kn">import</span> <span class="n">Factory</span>
</span><span class='line'><span class="n">fake</span> <span class="o">=</span> <span class="n">Factory</span><span class="o">.</span><span class="n">create</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">fake</span><span class="o">.</span><span class="n">name</span><span class="p">()</span>
</span><span class='line'><span class="c"># &#39;Lucy Cechtelar&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">fake</span><span class="o">.</span><span class="n">address</span><span class="p">()</span>
</span><span class='line'><span class="c"># &quot;426 Jordy Lodge</span>
</span><span class='line'><span class="c">#  Cartwrightshire, SC 88120-6700&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">fake</span><span class="o">.</span><span class="n">text</span><span class="p">()</span>
</span><span class='line'><span class="c"># Sint velit eveniet. Rerum atque repellat voluptatem quia rerum. Numquam excepturi</span>
</span><span class='line'><span class="c"># beatae sint laudantium consequatur. Magni occaecati itaque sint et sit tempore. Nesciunt</span>
</span><span class='line'><span class="c"># amet quidem. Iusto deleniti cum autem ad quia aperiam.</span>
</span><span class='line'><span class="c"># A consectetur quos aliquam. In iste aliquid et aut similique suscipit. Consequatur qui</span>
</span><span class='line'><span class="c"># quaerat iste minus hic expedita. Consequuntur error magni et laboriosam. Aut aspernatur</span>
</span><span class='line'><span class="c"># voluptatem sit aliquam. Dolores voluptatum est.</span>
</span><span class='line'><span class="c"># Aut molestias et maxime. Fugit autem facilis quos vero. Eius quibusdam possimus est.</span>
</span><span class='line'><span class="c"># Ea quaerat et quisquam. Deleniti sunt quam. Adipisci consequatur id in occaecati.</span>
</span><span class='line'><span class="c"># Et sint et. Ut ducimus quod nemo ab voluptatum.</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个包最可爱的地方就是支持本地化，比如一个随机的中文姓名可以这么去构造：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">faker</span> <span class="o">=</span> <span class="n">FakerFactory</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="s">&#39;zh_CN&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">name</span> <span class="o">=</span> <span class="n">lazy_attribute</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">faker</span><span class="o">.</span><span class="n">name</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<a name="L......fixture"></a>
<h2>生成fixture</h2>

<p>因为<a href="https://github.com/rbarrois/factory_boy/">factory boy</a>和<a href="https://github.com/joke2k/faker">faker</a>主要的作用是在测试里面去mock数据，所以要用它们生成fixture不是那么容易。这是因为Django的整个设计上就很注意避免你把测试的数据写到生产的数据库，所以测试都会在一个在<code>Setup</code>阶段被创建，在<code>TearDown</code>阶段被删除的临时数据库里面进行（我看了一下，在开发版本的Django上已经加了一个<code>--keepdb</code>的参数使得你可以<a href="https://docs.djangoproject.com/en/dev/ref/django-admin/#django-admin-option---keepdb">保留你用来运行测试的数据库了</a>）。</p>

<p>所以我们可以在一个测试的<code>Setup</code>阶段把数据生成后，直接调用<code>dumpdata</code>命令来把数据<code>dump</code>出去：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="n">company</span> <span class="o">=</span> <span class="n">CompanyFactory</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="n">TestUserFactory</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">company</span><span class="o">=</span><span class="n">company</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="mi">3000</span><span class="p">)</span>
</span><span class='line'>    <span class="n">TestUserFactory</span><span class="o">.</span><span class="n">create_batch</span><span class="p">(</span><span class="n">company</span><span class="o">=</span><span class="n">company</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">1500</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#for test_user in test_users:</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">create_fixture</span><span class="p">(</span><span class="s">&#39;tester&#39;</span><span class="p">,</span> <span class="s">&#39;tester.json&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">create_fixture</span><span class="p">(</span><span class="s">&#39;account&#39;</span><span class="p">,</span> <span class="s">&#39;account.json&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意，这里在创建的时候指定id主要是为了让初始的id比较大，避免和系统里面已经有的id撞车导致你构造的测试数据在<code>loaddata</code>的时候报错或者覆盖现有数据。</p>

<p>其中，<code>create_fixture</code>函数内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">create_fixture</span><span class="p">(</span><span class="n">app_name</span><span class="p">,</span> <span class="n">filename</span><span class="p">):</span>
</span><span class='line'>    <span class="n">buf</span> <span class="o">=</span> <span class="n">StringIO</span><span class="p">()</span>
</span><span class='line'>    <span class="n">management</span><span class="o">.</span><span class="n">call_command</span><span class="p">(</span><span class="s">&#39;dumpdata&#39;</span><span class="p">,</span> <span class="n">app_name</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">buf</span><span class="p">)</span>
</span><span class='line'>    <span class="n">buf</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">buf</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrate schemaSpy With Sphinx Build]]></title>
    <link href="http://lenciel.cn/2014/12/integrate-schemaspy-with-sphinx-build-for-django-database-design-visualization/"/>
    <updated>2014-12-18T00:26:32+08:00</updated>
    <id>http://lenciel.cn/2014/12/integrate-schemaspy-with-sphinx-build-for-django-database-design-visualization</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/2014_12/schemaSpy.png" title="schemaSpy..." alt="schemaSpy" /></p>

<p>在做项目的时候，客户或者合作的部门常常问研发要“数据库设计”。在古代，瀑布式开发的第一个阶段是做架构设计和写文档，所以这样的需求一般都能被“充分满足”。而在我们现在的项目节奏和迭代速度都很快，数据库的设计在项目初期经常也在变化，如何能够比较方便的文档化这些变更？</p>

<p>对开发团队内部来说，我个人觉得Django的South或者是1.7之后加入的<a href="http://lenciel.cn/2014/08/django-1-dot-7-migrations/">Migration</a>里面每次变更生成的migration文件就已经足够开发人员了解底层的设计发生了什么变化。</p>

<p>而对外提供的文档，主要是在更高层级进行设计的沟通，所以之前我们一般是通过<a href="https://github.com/django-extensions/django-extensions">django-extension</a>里面的<code>graph_models</code>命令来生成简单的关系图：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Create a PNG image file called my_project_visualized.png with application grouping</span>
</span><span class='line'><span class="nv">$ </span>./manage.py graph_models -a -g -o my_project_visualized.png
</span></code></pre></td></tr></table></div></figure>


<p>效果如下：</p>

<p><img src="http://lenciel.cn/downloads/images/2014_12/django_extension.svg" title="django-extension-sample..." alt="django-extension-sample" /></p>

<p>这里的图是通过<a href="http://www.graphviz.org/">graphviz</a>来完成的，可以看到一般的了解也足够了，但是缺点主要是：</p>

<ol>
<li>生成的关系图比较简陋</li>
<li>由于是图片，一旦表比较多浏览起来并不是那么灵活</li>
</ol>


<a name="L......schemaSpy"></a>
<h2>使用schemaSpy</h2>

<p>于是在新的项目里面本座选用了看起来更美好的<a href="http://schemaspy.sourceforge.net/">schemaSpy</a>，因为：</p>

<ol>
<li>轻量但支持多种数据库（jdbc），针对Django的test/stage/prod环境都可以使用</li>
<li><a href="http://schemaspy.sourceforge.net/sample/">功能非常强大</a>，并且有命令行支持，可以集成到CI</li>
</ol>


<p>不过和大多数开源工具一样，它的文档也是乱糟糟的。以开发环境为例，我们一般使用sqlite作为数据库，要在Mac下面成功运行schemaSpy连接sqlite，你需要：</p>

<ol>
<li>下载最新的<a href="http://sourceforge.net/projects/schemaspy/files/">SchemaSpy jar包</a></li>
<li>下载最新的<a href="https://bitbucket.org/xerial/sqlite-jdbc">Xerial Sqlite JDBC jar</a>包<code>sqlite-xerial.jar</code></li>
<li><p>创建一个<code>sqlite-xerial.properties</code>文件，内容如下：</p>

<pre><code class="`"> # Use -dp to override.
 description=SQLite
 connectionSpec=jdbc:sqlite:&lt;db&gt;
 db=database name
 driver=org.sqlite.JDBC
 #you may need to put the full path to the driver depending on your setup
 driverPath=sqlite-jdbc-3.8.7.jar
 selectTablesSql=.tables
</code></pre></li>
<li><p>运行命令：</p>

<pre><code class="`"> java -jar schemaSpy_5.0.0.jar -t  sqlite-xerial.properties -db ../src/default.db  -o django-testbird -sso
</code></pre></li>
</ol>


<p>会看到有<code>warning</code>，但是无需惊慌，我看了一下是schemaSpy的作者没有正确的处理<code>[]</code>。</p>

<a name="L.........Sphinx"></a>
<h2>集成到Sphinx</h2>

<p>因为我们的项目都使用了Jenkins自动启动Sphinx来生成文档，所以理想的情况当然是：</p>

<ol>
<li>修改Django下某个app的<code>models.py</code></li>
<li><code>make migration</code>生成migrations文件</li>
<li>代码提交并push到gitlab</li>
<li>Jenkins调用<code>django management command</code>完成表结构的变更</li>
<li>Jenkins自动更新包括数据库设计在内的文档</li>
</ol>


<p>要实现#5，最简单的办法是在Sphinx文档目录下的<code>Makefile</code>里面加一个<code>target</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">dbv:</span>
</span><span class='line'>    <span class="n">java</span> <span class="o">-</span><span class="n">jar</span> <span class="n">schemaSpy_5</span><span class="o">.</span><span class="mf">0.0</span><span class="o">.</span><span class="na">jar</span> <span class="o">-</span><span class="n">t</span> <span class="n">sqlite</span><span class="o">-</span><span class="n">xerial</span><span class="o">.</span><span class="na">properties</span> <span class="o">-</span><span class="n">db</span> <span class="o">../</span><span class="n">src</span><span class="o">/</span><span class="k">default</span><span class="o">.</span><span class="na">db</span>  <span class="o">-</span><span class="n">o</span> <span class="n">_db_virtualization</span><span class="o">/</span><span class="n">django</span><span class="o">-</span><span class="n">testproject</span> <span class="o">-</span><span class="n">sso</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在Jenkins调用的脚本里面加上<code>make dbv</code>就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Use Evernote]]></title>
    <link href="http://lenciel.cn/2014/12/how-i-use-evernote/"/>
    <updated>2014-12-17T14:27:39+08:00</updated>
    <id>http://lenciel.cn/2014/12/how-i-use-evernote</id>
    <content type="html"><![CDATA[<p>其实之前也分享了一些<a href="http://lenciel.cn/blog/categories/tools-i-use/">自己使用的工具</a>，只是更偏重研发。今天跟另外一个也用Evernote的同事交流了一下我怎么用Evernote，效果还可以，干脆在年关将至的时候分享一下自己日常使用的一些软件。</p>

<p>从Evernote开始。</p>

<p>进入互联网时代，特别是移动互联网时代之后，获取各种信息变得越来越便捷了，如何管理这些纷繁的信息也自热而然成为一个需求。大多数像我一样的老人，一开始是用<a href="https://digg.com/">dig</a>和<a href="https://delicious.com/">delicious</a>这样基于书签的工具。因为在有google和云笔记本这种东西之前，大家都是靠装满了各种书签的&#8221;收藏夹&#8221;过活（年轻人是不能理解重装机器没有备份收藏夹的伤痛的）。</p>

<p>但是这样的系统坏处就是它是&#8221;lazy-loading&#8221;的，你每次需要的时候，需要打开网页（如果你还能想起叫啥并且它们还健在的话）去找原来看到的信息，所以更适合用来做reference的整理。对于你真正希望梳理成自己知识的东西，更好的选择当然是使用所谓的PIM(Personal Information Management)软件。</p>

<p>我2010年开始用Evernote，一直用的是免费版(空间对我来说够了，而且我也没有太多分享的需求)，它的优点包括：</p>

<ul>
<li>多(liang)种(you)多(bu)样(qi)的记录手段</li>
<li>丰富灵活的管理方式</li>
<li>跨平台跨设备云同步</li>
<li>颜色还真水嫩啊</li>
</ul>


<p>但时间久了，Evernote里面的东西也多了起来。每次要找点儿什么基本上都是靠全文搜索，一直到我读到Michael Hyatt的<a href="http://michaelhyatt.com/evernote-tags.html">这篇文章</a>。</p>

<p>简单来说，大多数人用Evernote都是以&#8221;笔记本(Notebook)&ldquo;为容器来整理Note的。Michael的意思是Notebook和Tag比有这么几个弱点：</p>

<ol>
<li>Notebook数量有限制（个人版250，企业版5000），Tag可以有100000个</li>
<li>Notebook和Note是一对一的，Tag和Note是多对一的</li>
<li>Notebook只能建一级嵌套（基本上就是说可以Group一下），Tag可以无限制多层级嵌套</li>
</ol>


<p>所以他推荐了使用Tag来进行Note的管理。</p>

<p>除此之外他那篇文章里面还有个很重要的概念就是所有的文章先收到一个叫<code>Inbox</code>的Notebook，处理了之后再放到<code>Cabinet</code>里面去。这其实非常像我们使用邮箱：所有的邮件先被邮件系统放到Inbox，然后我们处理了之后打上相应的标签(ToDo, Later, &hellip;)，最后归档。</p>

<p>所以我现在是这么Evernote的。</p>

<p>首先，把Notebook减少到两个，一个是<code>Inbox</code>，一个是<code>Archive</code>。它们的作用跟我们的邮箱里面的Inbox和Archive是完全一样的。</p>

<p>然后，如果在网上看到觉得还挺有意思的文章，就用Evernote收录到<code>Inbox</code>。</p>

<p>注意，收录的时候我都习惯用下面的选项，去掉所有的样式：</p>

<p><img src="http://lenciel.cn/downloads/images/2014_12/evernote_chrome_clipper.png" title="Evernote Clipper" alt="Evernote Clipper" /></p>

<p>最后，在整理Inbox的时候，对每篇文章做一些修修剪剪，给Note加上合适的Tag，然后放到<code>Archive</code>。可以看到，因为tag可以嵌套和展开，要找到自己感兴趣的文章变得容易很多：</p>

<p><img src="http://lenciel.cn/downloads/images/2014_12/evernote_nested_tags.png" title="Evernote Clipper" alt="Evernote Clipper" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Merry Christmas Css Animation]]></title>
    <link href="http://lenciel.cn/2014/12/lonely-christmas-with-css/"/>
    <updated>2014-12-16T22:18:49+08:00</updated>
    <id>http://lenciel.cn/2014/12/lonely-christmas-with-css</id>
    <content type="html"><![CDATA[<p>昔日一统天下的Flash继续<a href="http://www.36kr.com/p/217821.html">势微</a>，但其实Web上的各种动画效果却越来越多了。今天因为一个产品需求，花了点儿时间看了一下，感觉目前CSS动画和JS动画两大门派势力都不小，之间需要有一个把大家嫁接在一起的东西：不知道<a href="http://w3c.github.io/web-animations/">Web Animation</a>会不会<a href="http://updates.html5rocks.com/2014/05/Web-Animations---element-animate-is-now-in-Chrome-36">有机会</a>。</p>

<p>纯CSS的动画实作:</p>

<p><link rel="stylesheet" type="text/css" href="http://lenciel.cn/downloads/static/css/christmas_animation.css" /></p>

<script>
  function resetSvgText() {
    $('#id-text-1' ).text($('#id-text-input-1' ).val());
    $('#id-text-2' ).text($('#id-text-input-2' ).val());
  }
$('#id-btn-submit').click(function() {
  resetSvgText();
})
</script>




<div class="form-container">
  <form class="form-inline" autocomplete="off" onsubmit="return false;">
    <input id="id-text-input-1" type="text" class="input-text" placeholder="Merry">
    <input id="id-text-input-2" type="text" class="input-text" placeholder="Christmas"><br/>
    <input type="submit" onclick="javascript:resetSvgText()" id="id-btn-submit" value="给我点儿颜色看看">
  </form>
</div>




<div class="box-container">
    <svg viewBox="0 0 1400 1000">
      <symbol id="s-text">
        <text id="id-text-1" text-anchor="middle"
              x="50%"
              y="35%"
              class="text--line"
              >
          Merry
        </text>
        <text id="id-text-2" text-anchor="middle"
              x="50%"
              y="90%"
              class="text--line2"
              >
          Christmas
        </text>
      </symbol>

      <g class="g-ants">
        <use xlink:href="#s-text"
          class="text-copy"></use>
        <use xlink:href="#s-text"
          class="text-copy"></use>
        <use xlink:href="#s-text"
          class="text-copy"></use>
        <use xlink:href="#s-text"
          class="text-copy"></use>
        <use xlink:href="#s-text"
          class="text-copy"></use>
      </g>
    </svg>
</div>


<!-- /container -->



]]></content>
  </entry>
  
</feed>
